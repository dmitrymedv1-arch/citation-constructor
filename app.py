import os
import csv
import streamlit as st
import re
import json
from datetime import datetime
from crossref.restful import Works
from docx import Document
from docx.oxml.ns import qn
from docx.shared import RGBColor, Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
import io
from tqdm import tqdm
from docx.oxml import OxmlElement
import base64
import html
import concurrent.futures
from typing import List, Dict, Tuple, Set, Any, Optional
import hashlib
import time
from collections import Counter
import functools
import logging
from pathlib import Path
import sqlite3
from contextlib import contextmanager
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('citation_processor.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    DB_PATH = "doi_cache.db"
    LTWA_CSV_PATH = "ltwa.csv"
    USER_PREFS_DB = "user_preferences.db"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
    CROSSREF_WORKERS = 3
    CROSSREF_RETRY_WORKERS = 2
    REQUEST_TIMEOUT = 30
    
    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    CACHE_TTL_HOURS = 24 * 7  # 1 –Ω–µ–¥–µ–ª—è
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    MIN_REFERENCES_FOR_STATS = 5
    MAX_REFERENCES = 1000
    
    # –°—Ç–∏–ª–∏
    NUMBERING_STYLES = ["No numbering", "1", "1.", "1)", "(1)", "[1]"]
    AUTHOR_FORMATS = ["AA Smith", "A.A. Smith", "Smith AA", "Smith A.A", "Smith, A.A."]
    PAGE_FORMATS = ["122 - 128", "122-128", "122 ‚Äì 128", "122‚Äì128", "122‚Äì8", "122"]
    DOI_FORMATS = ["10.10/xxx", "doi:10.10/xxx", "DOI:10.10/xxx", "https://dx.doi.org/10.10/xxx"]
    JOURNAL_STYLES = ["{Full Journal Name}", "{J. Abbr.}", "{J Abbr}"]
    AVAILABLE_ELEMENTS = ["", "Authors", "Title", "Journal", "Year", "Volume", "Issue", "Pages", "DOI"]
    
    # –¶–≤–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    PROGRESS_COLORS = {
        'start': '#FF6B6B',
        'middle': '#4ECDC4', 
        'end': '#45B7D1'
    }
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞)
    THEMES = {
        'light': {
            'primary': '#1f77b4',
            'background': '#f8f9fa',
            'secondaryBackground': '#ffffff',
            'text': '#212529',
            'font': 'sans-serif',
            'border': '#dee2e6',
            'cardBackground': '#ffffff'
        },
        'dark': {
            'primary': '#4ECDC4',
            'background': '#1a1d23',
            'secondaryBackground': '#2d323d',
            'text': '#e9ecef',
            'font': 'sans-serif',
            'border': '#495057',
            'cardBackground': '#2d323d'
        }
    }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Crossref
works = Works()

# –ü–æ–ª–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤
TRANSLATIONS = {
    'en': {
        'header': 'üé® Citation Style Constructor',
        'general_settings': '‚öôÔ∏è General Settings',
        'element_config': 'üìë Element Configuration',
        'style_preview': 'üëÄ Style Preview',
        'data_input': 'üìÅ Data Input',
        'data_output': 'üì§ Data Output',
        'numbering_style': 'Numbering:',
        'author_format': 'Authors:',
        'author_separator': 'Separator:',
        'et_al_limit': 'Et al after:',
        'use_and': "'and'",
        'use_ampersand': "'&'",
        'doi_format': 'DOI format:',
        'doi_hyperlink': 'DOI as hyperlink',
        'page_format': 'Pages:',
        'final_punctuation': 'Final punctuation:',
        'element': 'Element',
        'italic': 'Italic',
        'bold': 'Bold',
        'parentheses': 'Parentheses',
        'separator': 'Separator',
        'input_method': 'Input:',
        'output_method': 'Output:',
        'select_docx': 'Select DOCX',
        'enter_references': 'Enter references (one per line)',
        'references': 'References:',
        'results': 'Results:',
        'process': 'üöÄ Process',
        'example': 'Example:',
        'error_select_element': 'Select at least one element!',
        'processing': '‚è≥ Processing...',
        'upload_file': 'Upload a file!',
        'enter_references_error': 'Enter references!',
        'select_docx_output': 'Select DOCX output to download!',
        'doi_txt': 'üìÑ DOI (TXT)',
        'references_docx': 'üìã References (DOCX)',
        'found_references': 'Found {} references.',
        'found_references_text': 'Found {} references in text.',
        'statistics': 'Statistics: {} DOI found, {} not found.',
        'language': 'Language:',
        'gost_style': 'Apply GOST Style',
        'export_style': 'üì§ Export Style',
        'import_style': 'üì• Import Style',
        'export_file_name': 'File name:',
        'import_file': 'Select style file:',
        'export_success': 'Style exported successfully!',
        'import_success': 'Style imported successfully!',
        'import_error': 'Error importing style file!',
        'processing_status': 'Processing references...',
        'current_reference': 'Current: {}',
        'processed_stats': 'Processed: {}/{} | Found: {} | Errors: {}',
        'time_remaining': 'Estimated time remaining: {}',
        'duplicate_reference': 'üîÑ Repeated Reference (See #{})',
        'batch_processing': 'Batch processing DOI...',
        'extracting_metadata': 'Extracting metadata...',
        'checking_duplicates': 'Checking for duplicates...',
        'retrying_failed': 'Retrying failed DOI requests...',
        'bibliographic_search': 'Searching by bibliographic data...',
        'style_presets': 'Style Presets',
        'gost_button': 'GOST',
        'acs_button': 'ACS (MDPI)',
        'rsc_button': 'RSC',
        'cta_button': 'CTA',
        'style_preset_tooltip': 'Here are some styles maintained by individual publishers. For major publishers (Elsevier, Springer Nature, and Wiley), styles vary from journal to journal. To create (or reformat) references for a specific journal, use the Citation Style Constructor.',
        'journal_style': 'Journal style:',
        'full_journal_name': 'Full Journal Name',
        'journal_abbr_with_dots': 'J. Abbr.',
        'journal_abbr_no_dots': 'J Abbr',
        'short_guide_title': 'A short guide for the conversion of doi-based references',
        'step_1': '‚ù∂ Select a ready reference style (ACS(MDPI), RSC, or CTA), or create your own style by selecting the sequence, design, and punctuation of the element configurations',
        'step_1_note': '(!) The punctuation boxes enable various items to be included between element configurations (simple punctuation, Vol., Issue‚Ä¶)',
        'step_2': '‚ù∑ Then, use the Style Presets to change certain element configurations for each reformatted reference.',
        'step_3': '‚ù∏ The Style Preview function enables users to visualize the final form of their reference style',
        'step_4': '‚ùπ If the final style is appropriate, select the Docx or Text option in the Data Input section and upload the corresponding information (reference list). Then, in the Data Output section, select the required options and press "Process" to initiate reformatting.',
        'step_5': '‚ù∫ After processing is complete, download the reformatted references in your preferred format.',
        'step_5_note': '(!) Outputting the Docx file is recommended, as it preserves formatting (e.g., bold, italic, and hyperlinks) and includes additional stats at the end of the document.',
        'step_6': '‚ùª After creating your final version of the style, save it so that you can upload it again in the next session. Use the Style Management section for this purpose.',
        'validation_error_no_elements': 'Please configure at least one element or select a preset style!',
        'validation_error_too_many_references': 'Too many references (maximum {} allowed)',
        'validation_warning_few_references': 'Few references for meaningful statistics',
        'cache_initialized': 'Cache initialized successfully',
        'cache_cleared': 'Cache cleared successfully',
        'theme_selector': 'Theme:',
        'light_theme': 'Light',
        'dark_theme': 'Dark',
        'mobile_view': 'Mobile View',
        'desktop_view': 'Desktop View',
        'clear_button': 'üóëÔ∏è Clear',
        'back_button': '‚Ü©Ô∏è Back'
    },
    'ru': {
        'header': 'üé® –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—Ç–∏–ª–µ–π —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        'general_settings': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        'element_config': 'üìë –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
        'style_preview': 'üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä',
        'data_input': 'üìÅ –í–≤–æ–¥',
        'data_output': 'üì§ –í—ã–≤–æ–¥',
        'numbering_style': '–ù—É–º–µ—Ä–∞—Ü–∏—è:',
        'author_format': '–ê–≤—Ç–æ—Ä—ã:',
        'author_separator': '–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å:',
        'et_al_limit': 'Et al –ø–æ—Å–ª–µ:',
        'use_and': "'–∏'",
        'use_ampersand': "'&'",
        'doi_format': '–§–æ—Ä–º–∞—Ç DOI:',
        'doi_hyperlink': 'DOI –∫–∞–∫ —Å—Å—ã–ª–∫–∞',
        'page_format': '–°—Ç—Ä–∞–Ω–∏—Ü—ã:',
        'final_punctuation': '–ö–æ–Ω–µ—á–Ω–∞—è –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è:',
        'element': '–≠–ª–µ–º–µ–Ω—Ç',
        'italic': '–ö—É—Ä—Å–∏–≤',
        'bold': '–ñ–∏—Ä–Ω—ã–π',
        'parentheses': '–°–∫–æ–±–∫–∏',
        'separator': '–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å',
        'input_method': '–í–≤–æ–¥:',
        'output_method': '–í—ã–≤–æ–¥:',
        'select_docx': '–í—ã–±–µ—Ä–∏—Ç–µ DOCX',
        'enter_references': '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)',
        'references': '–°—Å—ã–ª–∫–∏:',
        'results': '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:',
        'process': 'üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å',
        'example': '–ü—Ä–∏–º–µ—Ä:',
        'error_select_element': '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç!',
        'processing': '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...',
        'upload_file': '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª!',
        'enter_references_error': '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏!',
        'select_docx_output': '–í—ã–±–µ—Ä–∏—Ç–µ DOCX –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!',
        'doi_txt': 'üìÑ DOI (TXT)',
        'references_docx': 'üìã –°—Å—ã–ª–∫–∏ (DOCX)',
        'found_references': '–ù–∞–π–¥–µ–Ω–æ {} —Å—Å—ã–ª–æ–∫.',
        'found_references_text': '–ù–∞–π–¥–µ–Ω–æ {} —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ.',
        'statistics': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {} DOI –Ω–∞–π–¥–µ–Ω–æ, {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.',
        'language': '–Ø–∑—ã–∫:',
        'gost_style': '–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å –ì–û–°–¢',
        'export_style': 'üì§ –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∏–ª—è',
        'import_style': 'üì• –ò–º–ø–æ—Ä—Ç —Å—Ç–∏–ª—è',
        'export_file_name': '–ò–º—è —Ñ–∞–π–ª–∞:',
        'import_file': '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å—Ç–∏–ª—è:',
        'export_success': '–°—Ç–∏–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!',
        'import_success': '–°—Ç–∏–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!',
        'import_error': '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞ —Å—Ç–∏–ª—è!',
        'processing_status': '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫...',
        'current_reference': '–¢–µ–∫—É—â–∞—è: {}',
        'processed_stats': '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {}/{} | –ù–∞–π–¥–µ–Ω–æ: {} | –û—à–∏–±–∫–∏: {}',
        'time_remaining': '–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {}',
        'duplicate_reference': 'üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ (–°–º. #{})',
        'batch_processing': '–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ DOI...',
        'extracting_metadata': '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...',
        'checking_duplicates': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã...',
        'retrying_failed': '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö DOI...',
        'bibliographic_search': '–ü–æ–∏—Å–∫ –ø–æ –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º...',
        'style_presets': '–ì–æ—Ç–æ–≤—ã–µ —Å—Ç–∏–ª–∏',
        'gost_button': '–ì–û–°–¢',
        'acs_button': 'ACS (MDPI)',
        'rsc_button': 'RSC',
        'cta_button': 'CTA',
        'style_preset_tooltip': '–ó–¥–µ—Å—å —É–∫–∞–∑–∞–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∏–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–¥–Ω–æ–≥–æ –∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞. –î–ª—è —Ä—è–¥–∞ –∫—Ä—É–ø–Ω—ã—Ö –∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤ (Esevier, Springer Nature, Wiley) —Å—Ç–∏–ª—å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∂—É—Ä–Ω–∞–ª–∞ –∫ –∂—É—Ä–Ω–∞–ª—É. –î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è) —Å—Å—ã–ª–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º —Å—Å—ã–ª–æ–∫.',
        'journal_style': '–°—Ç–∏–ª—å –∂—É—Ä–Ω–∞–ª–∞:',
        'full_journal_name': '–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞',
        'journal_abbr_with_dots': 'J. Abbr.',
        'journal_abbr_no_dots': 'J Abbr',
        'short_guide_title': '–ö—Ä–∞—Ç–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫, –∏–º–µ—é—â–∏—Ö doi',
        'step_1': '‚ù∂ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Å—Ç–∏–ª—å —Å—Å—ã–ª–æ–∫ (–ì–û–°–¢, ACS(MDPI), RSC –∏–ª–∏ CTA) –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å, –≤—ã–±—Ä–∞–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
        'step_1_note': '(!) –ü–æ–ª—è –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –≤–∫–ª—é—á–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–∂–¥—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ (–ø—Ä–æ—Å—Ç–∞—è –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è, –¢–æ–º, –í—ã–ø—É—Å–∫‚Ä¶)',
        'step_2': '‚ù∑ –ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ —Å—Ç–∏–ª–∏, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏.',
        'step_3': '‚ù∏ –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∏–ª—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –≤–∞—à–µ–≥–æ —Å—Ç–∏–ª—è —Å—Å—ã–ª–æ–∫',
        'step_4': '‚ùπ –ï—Å–ª–∏ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é Docx –∏–ª–∏ –¢–µ–∫—Å—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—Å–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã). –ó–∞—Ç–µ–º –≤ —Ä–∞–∑–¥–µ–ª–µ –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –æ–ø—Ü–∏–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å" –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.',
        'step_5': '‚ù∫ –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.',
        'step_5_note': '(!) –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–≤–æ–¥–∏—Ç—å —Ñ–∞–π–ª Docx, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç, –∫—É—Ä—Å–∏–≤ –∏ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏) –∏ –≤–∫–ª—é—á–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Ü–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.',
        'step_6': '‚ùª –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å—Ç–∏–ª—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–Ω–æ–≤–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏. –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª Style Management.',
        'validation_error_no_elements': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Å—Ç–∏–ª—å!',
        'validation_error_too_many_references': '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Å—ã–ª–æ–∫ (–º–∞–∫—Å–∏–º—É–º {} —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)',
        'validation_warning_few_references': '–ú–∞–ª–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è –∑–Ω–∞—á–∏–º–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
        'cache_initialized': '–ö—ç—à –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ',
        'cache_cleared': '–ö—ç—à –æ—á–∏—â–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        'theme_selector': '–¢–µ–º–∞:',
        'light_theme': '–°–≤–µ—Ç–ª–∞—è',
        'dark_theme': '–¢—ë–º–Ω–∞—è',
        'mobile_view': '–ú–æ–±–∏–ª—å–Ω—ã–π –≤–∏–¥',
        'desktop_view': '–î–µ—Å–∫—Ç–æ–ø–Ω—ã–π –≤–∏–¥',
        'clear_button': 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å',
        'back_button': '‚Ü©Ô∏è –ù–∞–∑–∞–¥'
    },
    'de': {
        'header': 'üé® Zitationsstil-Konstruktor',
        'general_settings': '‚öôÔ∏è Allgemeine Einstellungen',
        'element_config': 'üìë Elementkonfiguration',
        'style_preview': 'üëÄ Stilvorschau',
        'data_input': 'üìÅ Dateneingabe',
        'data_output': 'üì§ Datenausgabe',
        'numbering_style': 'Nummerierung:',
        'author_format': 'Autoren:',
        'author_separator': 'Trennzeichen:',
        'et_al_limit': 'Et al nach:',
        'use_and': "'und'",
        'use_ampersand': "'&'",
        'doi_format': 'DOI-Format:',
        'doi_hyperlink': 'DOI als Hyperlink',
        'page_format': 'Seiten:',
        'final_punctuation': 'Schlusszeichen:',
        'element': 'Element',
        'italic': 'Kursiv',
        'bold': 'Fett',
        'parentheses': 'Klammern',
        'separator': 'Trennzeichen',
        'input_method': 'Eingabe:',
        'output_method': 'Ausgabe:',
        'select_docx': 'DOCX ausw√§hlen',
        'enter_references': 'Referenzen eingeben (eine pro Zeile)',
        'references': 'Referenzen:',
        'results': 'Ergebnisse:',
        'process': 'üöÄ Verarbeiten',
        'example': 'Beispiel:',
        'error_select_element': 'W√§hlen Sie mindestens ein Element aus!',
        'processing': '‚è≥ Verarbeitung...',
        'upload_file': 'Laden Sie eine Datei hoch!',
        'enter_references_error': 'Geben Sie Referenzen ein!',
        'select_docx_output': 'W√§hlen Sie DOCX-Ausgabe zum Herunterladen!',
        'doi_txt': 'üìÑ DOI (TXT)',
        'references_docx': 'üìã Referenzen (DOCX)',
        'found_references': '{} Referenzen gefunden.',
        'found_references_text': '{} Referenzen im Text gefunden.',
        'statistics': 'Statistik: {} DOI gefunden, {} nicht gefunden.',
        'language': 'Sprache:',
        'gost_style': 'GOST-Stil anwenden',
        'export_style': 'üì§ Stil exportieren',
        'import_style': 'üì• Stil importieren',
        'export_file_name': 'Dateiname:',
        'import_file': 'Stildatei ausw√§hlen:',
        'export_success': 'Stil erfolgreich exportiert!',
        'import_success': 'Stil erfolgreich importiert!',
        'import_error': 'Fehler beim Importieren der Stildatei!',
        'processing_status': 'Verarbeite Referenzen...',
        'current_reference': 'Aktuell: {}',
        'processed_stats': 'Verarbeitet: {}/{} | Gefunden: {} | Fehler: {}',
        'time_remaining': 'Gesch√§tzte verbleibende Zeit: {}',
        'duplicate_reference': 'üîÑ Wiederholte Referenz (Siehe #{})',
        'batch_processing': 'Stapelverarbeitung DOI...',
        'extracting_metadata': 'Extrahiere Metadaten...',
        'checking_duplicates': 'Pr√ºfe auf Duplikate...',
        'retrying_failed': 'Wiederhole fehlgeschlagene DOI-Anfragen...',
        'bibliographic_search': 'Suche nach bibliografischen Daten...',
        'style_presets': 'Stilvorlagen',
        'gost_button': 'GOST',
        'acs_button': 'ACS (MDPI)',
        'rsc_button': 'RSC',
        'cta_button': 'CTA',
        'style_preset_tooltip': 'Hier sind einige Stile, die von einzelnen Verlagen gepflegt werden. F√ºr gro√üe Verlage (Elsevier, Springer Nature, Wiley) variiert der Stil von Journal zu Journal. Um Referenzen f√ºr ein bestimmtes Journal zu erstellen (oder neu zu formatieren), verwenden Sie den Zitationsstil-Konstruktor.',
        'journal_style': 'Journal-Stil:',
        'full_journal_name': 'Vollst√§ndiger Journalname',
        'journal_abbr_with_dots': 'J. Abk.',
        'journal_abbr_no_dots': 'J Abk',
        'short_guide_title': 'Kurzanleitung zur Konvertierung von DOI-basierten Referenzen',
        'step_1': '‚ù∂ W√§hlen Sie einen vorgefertigten Referenzstil (ACS(MDPI), RSC oder CTA) oder erstellen Sie Ihren eigenen Stil, indem Sie die Reihenfolge, Gestaltung und Zeichensetzung der Elementkonfigurationen ausw√§hlen',
        'step_1_note': '(!) Die Zeichensetzungsfelder erm√∂glichen die Aufnahme verschiedener Elemente zwischen Elementkonfigurationen (einfache Zeichensetzung, Vol., Issue‚Ä¶)',
        'step_2': '‚ù∑ Verwenden Sie dann die Stilvorlagen, um bestimmte Elementkonfigurationen f√ºr jede neu formatierte Referenz zu √§ndern.',
        'step_3': '‚ù∏ Die Stilvorschau-Funktion erm√∂glicht es Benutzern, die endg√ºltige Form ihres Referenzstils zu visualisieren',
        'step_4': '‚ùπ Wenn der endg√ºltige Stil geeignet ist, w√§hlen Sie die Option Docx oder Text im Abschnitt Dateneingabe und laden Sie die entsprechenden Informationen hoch. W√§hlen Sie dann im Abschnitt Datenausgabe die erforderlichen Optionen und dr√ºcken Sie "Verarbeiten", um die Neuformatierung zu starten.',
        'step_5': '‚ù∫ Nach Abschluss der Verarbeitung laden Sie die neu formatierten Referenzen in Ihrem bevorzugten Format herunter.',
        'step_5_note': '(!) Die Ausgabe der Docx-Datei wird empfohlen, da sie die Formatierung beibeh√§lt (z.B. fett, kursiv und Hyperlinks) und zus√§tzliche Statistiken am Ende des Dokuments enth√§lt.',
        'step_6': '‚ùª Speichern Sie Ihre endg√ºltige Version des Stils, damit Sie ihn in der n√§chsten Sitzung erneut hochladen k√∂nnen. Verwenden Sie dazu den Abschnitt Stilmanagement.',
        'validation_error_no_elements': 'Bitte konfigurieren Sie mindestens ein Element oder w√§hlen Sie einen vorgefertigten Stil!',
        'validation_error_too_many_references': 'Zu viele Referenzen (maximal {} erlaubt)',
        'validation_warning_few_references': 'Wenige Referenzen f√ºr aussagekr√§ftige Statistiken',
        'cache_initialized': 'Cache erfolgreich initialisiert',
        'cache_cleared': 'Cache erfolgreich gel√∂scht',
        'theme_selector': 'Thema:',
        'light_theme': 'Hell',
        'dark_theme': 'Dunkel',
        'mobile_view': 'Mobile Ansicht',
        'desktop_view': 'Desktop Ansicht',
        'clear_button': 'üóëÔ∏è L√∂schen',
        'back_button': '‚Ü©Ô∏è Zur√ºck'
    },
    'es': {
        'header': 'üé® Constructor de Estilos de Citas',
        'general_settings': '‚öôÔ∏è Configuraci√≥n General',
        'element_config': 'üìë Configuraci√≥n de Elementos',
        'style_preview': 'üëÄ Vista Previa del Estilo',
        'data_input': 'üìÅ Entrada de Datos',
        'data_output': 'üì§ Salida de Datos',
        'numbering_style': 'Numeraci√≥n:',
        'author_format': 'Autores:',
        'author_separator': 'Separador:',
        'et_al_limit': 'Et al despu√©s de:',
        'use_and': "'y'",
        'use_ampersand': "'&'",
        'doi_format': 'Formato DOI:',
        'doi_hyperlink': 'DOI como hiperv√≠nculo',
        'page_format': 'P√°ginas:',
        'final_punctuation': 'Puntuaci√≥n final:',
        'element': 'Elemento',
        'italic': 'Cursiva',
        'bold': 'Negrita',
        'parentheses': 'Par√©ntesis',
        'separator': 'Separador',
        'input_method': 'Entrada:',
        'output_method': 'Salida:',
        'select_docx': 'Seleccionar DOCX',
        'enter_references': 'Ingresar referencias (una por l√≠nea)',
        'references': 'Referencias:',
        'results': 'Resultados:',
        'process': 'üöÄ Procesar',
        'example': 'Ejemplo:',
        'error_select_element': '¬°Seleccione al menos un elemento!',
        'processing': '‚è≥ Procesando...',
        'upload_file': '¬°Suba un archivo!',
        'enter_references_error': '¬°Ingrese referencias!',
        'select_docx_output': '¬°Seleccione salida DOCX para descargar!',
        'doi_txt': 'üìÑ DOI (TXT)',
        'references_docx': 'üìã Referencias (DOCX)',
        'found_references': 'Se encontraron {} referencias.',
        'found_references_text': 'Se encontraron {} referencias en el texto.',
        'statistics': 'Estad√≠sticas: {} DOI encontrados, {} no encontrados.',
        'language': 'Idioma:',
        'gost_style': 'Aplicar Estilo GOST',
        'export_style': 'üì§ Exportar Estilo',
        'import_style': 'üì• Importar Estilo',
        'export_file_name': 'Nombre del archivo:',
        'import_file': 'Seleccionar archivo de estilo:',
        'export_success': '¬°Estilo exportado exitosamente!',
        'import_success': '¬°Estilo importado exitosamente!',
        'import_error': '¬°Error al importar archivo de estilo!',
        'processing_status': 'Procesando referencias...',
        'current_reference': 'Actual: {}',
        'processed_stats': 'Procesadas: {}/{} | Encontradas: {} | Errores: {}',
        'time_remaining': 'Tiempo restante estimado: {}',
        'duplicate_reference': 'üîÑ Referencia Repetida (Ver #{})',
        'batch_processing': 'Procesamiento por lotes DOI...',
        'extracting_metadata': 'Extrayendo metadatos...',
        'checking_duplicates': 'Verificando duplicados...',
        'retrying_failed': 'Reintentando solicitudes DOI fallidas...',
        'bibliographic_search': 'Buscando por datos bibliogr√°ficos...',
        'style_presets': 'Estilos Predefinidos',
        'gost_button': 'GOST',
        'acs_button': 'ACS (MDPI)',
        'rsc_button': 'RSC',
        'cta_button': 'CTA',
        'style_preset_tooltip': 'Aqu√≠ hay algunos estilos mantenidos por editoriales individuales. Para editoriales importantes (Elsevier, Springer Nature, Wiley), el estilo var√≠a de revista en revista. Para crear (or reformatear) referencias para una revista espec√≠fica, use el Constructor de Estilos de Citas.',
        'journal_style': 'Estilo de revista:',
        'full_journal_name': 'Nombre Completo de la Revista',
        'journal_abbr_with_dots': 'J. Abrev.',
        'journal_abbr_no_dots': 'J Abrev',
        'short_guide_title': 'Una gu√≠a breve para la conversi√≥n de referencias basadas en doi',
        'step_1': '‚ù∂ Seleccione un estilo de referencia listo (ACS(MDPI), RSC o CTA), o cree su propio estilo seleccionando la secuencia, dise√±o y puntuaci√≥n de las configuraciones de elementos',
        'step_1_note': '(!) Los cuadros de puntuaci√≥n permiten incluir varios elementos entre configuraciones de elementos (puntuaci√≥n simple, Vol., Issue‚Ä¶)',
        'step_2': '‚ù∑ Luego, use los Estilos Predefinidos para cambiar ciertas configuraciones de elementos para cada referencia reformateada.',
        'step_3': '‚ù∏ La funci√≥n de Vista Previa del Estilo permite a los usuarios visualizar la forma final de su estilo de referencia',
        'step_4': '‚ùπ Si el estilo final es apropiado, seleccione la opci√≥n Docx o Texto en la secci√≥n de Entrada de Datos y cargue la informaci√≥n correspondiente. Luego, en la secci√≥n de Salida de Datos, seleccione las opciones requeridas y presione "Procesar" para iniciar el reformateo.',
        'step_5': '‚ù∫ Despu√©s de completar el procesamiento, descargue las referencias reformateadas en su formato preferido.',
        'step_5_note': '(!) Se recomienda generar el archivo Docx, ya que conserva el formato (por ejemplo, negrita, cursiva e hiperv√≠nculos) e incluye estad√≠sticas adicionales al final del documento.',
        'step_6': '‚ùª Despu√©s de crear su versi√≥n final del estilo, gu√°rdela para poder cargarla nuevamente en la siguiente sesi√≥n. Use la secci√≥n Gesti√≥n de Estilos para este prop√≥sito.',
        'validation_error_no_elements': '¬°Por favor configure al menos un elemento o seleccione un estilo predefinido!',
        'validation_error_too_many_references': 'Demasiadas referencias (m√°ximo {} permitidas)',
        'validation_warning_few_references': 'Pocas referencias para estad√≠sticas significativas',
        'cache_initialized': 'Cach√© inicializado exitosamente',
        'cache_cleared': 'Cach√© limpiado exitosamente',
        'theme_selector': 'Tema:',
        'light_theme': 'Claro',
        'dark_theme': 'Oscuro',
        'mobile_view': 'Vista M√≥vil',
        'desktop_view': 'Vista Escritorio',
        'clear_button': 'üóëÔ∏è Limpiar',
        'back_button': '‚Ü©Ô∏è Atr√°s'
    },
    'it': {
        'header': 'üé® Costruttore di Stili di Citazione',
        'general_settings': '‚öôÔ∏è Impostazioni Generali',
        'element_config': 'üìë Configurazione Elementi',
        'style_preview': 'üëÄ Anteprima Stile',
        'data_input': 'üìÅ Input Dati',
        'data_output': 'üì§ Output Dati',
        'numbering_style': 'Numerazione:',
        'author_format': 'Autori:',
        'author_separator': 'Separatore:',
        'et_al_limit': 'Et al dopo:',
        'use_and': "'e'",
        'use_ampersand': "'&'",
        'doi_format': 'Formato DOI:',
        'doi_hyperlink': 'DOI come collegamento ipertestuale',
        'page_format': 'Pagine:',
        'final_punctuation': 'Punteggiatura finale:',
        'element': 'Elemento',
        'italic': 'Corsivo',
        'bold': 'Grassetto',
        'parentheses': 'Parentesi',
        'separator': 'Separatore',
        'input_method': 'Input:',
        'output_method': 'Output:',
        'select_docx': 'Seleziona DOCX',
        'enter_references': 'Inserisci riferimenti (uno per riga)',
        'references': 'Riferimenti:',
        'results': 'Risultati:',
        'process': 'üöÄ Elabora',
        'example': 'Esempio:',
        'error_select_element': 'Seleziona almeno un elemento!',
        'processing': '‚è≥ Elaborazione...',
        'upload_file': 'Carica un file!',
        'enter_references_error': 'Inserisci i riferimenti!',
        'select_docx_output': 'Seleziona output DOCX da scaricare!',
        'doi_txt': 'üìÑ DOI (TXT)',
        'references_docx': 'üìã Riferimenti (DOCX)',
        'found_references': 'Trovati {} riferimenti.',
        'found_references_text': 'Trovati {} riferimenti nel testo.',
        'statistics': 'Statistiche: {} DOI trovati, {} non trovati.',
        'language': 'Lingua:',
        'gost_style': 'Applica Stile GOST',
        'export_style': 'üì§ Esporta Stile',
        'import_style': 'üì• Importa Stile',
        'export_file_name': 'Nome file:',
        'import_file': 'Seleziona file stile:',
        'export_success': 'Stile esportato con successo!',
        'import_success': 'Stile importato con successo!',
        'import_error': 'Errore durante l\'importazione del file stile!',
        'processing_status': 'Elaborazione riferimenti...',
        'current_reference': 'Attuale: {}',
        'processed_stats': 'Elaborati: {}/{} | Trovati: {} | Errori: {}',
        'time_remaining': 'Tempo rimanente stimato: {}',
        'duplicate_reference': 'üîÑ Riferimento Ripetuto (Vedi #{})',
        'batch_processing': 'Elaborazione batch DOI...',
        'extracting_metadata': 'Estrazione metadati...',
        'checking_duplicates': 'Controllo duplicati...',
        'retrying_failed': 'Riprova richieste DOI fallite...',
        'bibliographic_search': 'Ricerca per dati bibliografici...',
        'style_presets': 'Stili Preimpostati',
        'gost_button': 'GOST',
        'acs_button': 'ACS (MDPI)',
        'rsc_button': 'RSC',
        'cta_button': 'CTA',
        'style_preset_tooltip': 'Ecco alcuni stili mantenuti da singoli editori. Per gli editori principali (Elsevier, Springer Nature, Wiley), lo stile varia da rivista a rivista. Per creare (o riformattare) riferimenti per una rivista specifica, utilizza il Costruttore di Stili di Citazione.',
        'journal_style': 'Stile rivista:',
        'full_journal_name': 'Nome Completo Rivista',
        'journal_abbr_with_dots': 'Riv. Abbr.',
        'journal_abbr_no_dots': 'Riv Abbr',
        'short_guide_title': 'Una breve guida per la conversione di riferimenti basati su doi',
        'step_1': '‚ù∂ Seleziona uno stile di riferimento pronto (ACS(MDPI), RSC o CTA), o crea il tuo stile personalizzato selezionando la sequenza, il design e la punteggiatura delle configurazioni degli elementi',
        'step_1_note': '(!) Le caselle di punteggiatura consentono di includere vari elementi tra le configurazioni degli elementi (punteggiatura semplice, Vol., Issue‚Ä¶)',
        'step_2': '‚ù∑ Quindi, utilizza gli Stili Preimpostati per modificare determinate configurazioni di elementi per ogni riferimento riformattato.',
        'step_3': '‚ù∏ La funzione Anteprima Stile consente agli utenti di visualizzare la forma finale del loro stile di riferimento',
        'step_4': '‚ùπ Se lo stile finale √® appropriato, seleziona l\'opzione Docx o Testo nella sezione Input Dati e carica le informazioni corrispondenti. Quindi, nella sezione Output Dati, seleziona le opzioni richieste e premi "Elabora" per avviare la riformattazione.',
        'step_5': '‚ù∫ Dopo il completamento dell\'elaborazione, scarica i riferimenti riformattati nel formato preferito.',
        'step_5_note': '(!) Si consiglia di output il file Docx, in quanto conserva la formattazione (ad esempio, grassetto, cursivo e collegamenti ipertestuali) e include statistiche aggiuntive alla fine del documento.',
        'step_6': '‚ùª Dopo aver creato la versione finale dello stile, salvala in modo da poterla caricare nuovamente nella sessione successiva. Utilizza la sezione Gestione Stili per questo scopo.',
        'validation_error_no_elements': 'Si prega di configurare almeno un elemento o selezionare uno stile preimpostato!',
        'validation_error_too_many_references': 'Troppi riferimenti (massimo {} consentiti)',
        'validation_warning_few_references': 'Pochi riferimenti per statistiche significative',
        'cache_initialized': 'Cache inizializzato con successo',
        'cache_cleared': 'Cache cancellato con successo',
        'theme_selector': 'Tema:',
        'light_theme': 'Chiaro',
        'dark_theme': 'Scuro',
        'mobile_view': 'Vista Mobile',
        'desktop_view': 'Vista Desktop',
        'clear_button': 'üóëÔ∏è Cancella',
        'back_button': '‚Ü©Ô∏è Indietro'
    },
    'ja': {
        'header': 'üé® ÂºïÁî®„Çπ„Çø„Ç§„É´ÊßãÁØâ„ÉÑ„Éº„É´',
        'general_settings': '‚öôÔ∏è ‰∏ÄËà¨Ë®≠ÂÆö',
        'element_config': 'üìë Ë¶ÅÁ¥†Ë®≠ÂÆö',
        'style_preview': 'üëÄ „Çπ„Çø„Ç§„É´„Éó„É¨„Éì„É•„Éº',
        'data_input': 'üìÅ „Éá„Éº„ÇøÂÖ•Âäõ',
        'data_output': 'üì§ „Éá„Éº„ÇøÂá∫Âäõ',
        'numbering_style': 'Áï™Âè∑‰ªò„Åë:',
        'author_format': 'ËëóËÄÖ:',
        'author_separator': 'Âå∫Âàá„ÇäÊñáÂ≠ó:',
        'et_al_limit': 'Et al ‰ª•Âæå:',
        'use_and': "'„Åä„Çà„Å≥'",
        'use_ampersand': "'&'",
        'doi_format': 'DOIÂΩ¢Âºè:',
        'doi_hyperlink': 'DOI„Çí„Éè„Ç§„Éë„Éº„É™„É≥„ÇØ„Å®„Åó„Å¶',
        'page_format': '„Éö„Éº„Ç∏:',
        'final_punctuation': 'ÁµÇ‰∫ÜÂè•Ë™≠ÁÇπ:',
        'element': 'Ë¶ÅÁ¥†',
        'italic': 'Êñú‰Ωì',
        'bold': 'Â§™Â≠ó',
        'parentheses': 'Êã¨Âºß',
        'separator': 'Âå∫Âàá„ÇäÊñáÂ≠ó',
        'input_method': 'ÂÖ•Âäõ:',
        'output_method': 'Âá∫Âäõ:',
        'select_docx': 'DOCX„ÇíÈÅ∏Êäû',
        'enter_references': 'ÂèÇËÄÉÊñáÁåÆ„ÇíÂÖ•ÂäõÔºà1Ë°å„Å´1„Å§Ôºâ',
        'references': 'ÂèÇËÄÉÊñáÁåÆ:',
        'results': 'ÁµêÊûú:',
        'process': 'üöÄ Âá¶ÁêÜ',
        'example': '‰æã:',
        'error_select_element': 'Â∞ë„Å™„Åè„Å®„ÇÇ1„Å§„ÅÆË¶ÅÁ¥†„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ',
        'processing': '‚è≥ Âá¶ÁêÜ‰∏≠...',
        'upload_file': '„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ',
        'enter_references_error': 'ÂèÇËÄÉÊñáÁåÆ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ',
        'select_docx_output': '„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åô„ÇãDOCXÂá∫Âäõ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ',
        'doi_txt': 'üìÑ DOI (TXT)',
        'references_docx': 'üìã ÂèÇËÄÉÊñáÁåÆ (DOCX)',
        'found_references': '{}‰ª∂„ÅÆÂèÇËÄÉÊñáÁåÆ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü„ÄÇ',
        'found_references_text': '„ÉÜ„Ç≠„Çπ„ÉàÂÜÖ„Åß{}‰ª∂„ÅÆÂèÇËÄÉÊñáÁåÆ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü„ÄÇ',
        'statistics': 'Áµ±Ë®à: {}‰ª∂„ÅÆDOI„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü„ÄÅ{}‰ª∂„ÅØË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ',
        'language': 'Ë®ÄË™û:',
        'gost_style': 'GOST„Çπ„Çø„Ç§„É´„ÇíÈÅ©Áî®',
        'export_style': 'üì§ „Çπ„Çø„Ç§„É´„Çí„Ç®„ÇØ„Çπ„Éù„Éº„Éà',
        'import_style': 'üì• „Çπ„Çø„Ç§„É´„Çí„Ç§„É≥„Éù„Éº„Éà',
        'export_file_name': '„Éï„Ç°„Ç§„É´Âêç:',
        'import_file': '„Çπ„Çø„Ç§„É´„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû:',
        'export_success': '„Çπ„Çø„Ç§„É´„ÅÆ„Ç®„ÇØ„Çπ„Éù„Éº„Éà„ÅåÊàêÂäü„Åó„Åæ„Åó„ÅüÔºÅ',
        'import_success': '„Çπ„Çø„Ç§„É´„ÅÆ„Ç§„É≥„Éù„Éº„Éà„ÅåÊàêÂäü„Åó„Åæ„Åó„ÅüÔºÅ',
        'import_error': '„Çπ„Çø„Ç§„É´„Éï„Ç°„Ç§„É´„ÅÆ„Ç§„É≥„Éù„Éº„Éà„Ç®„É©„ÉºÔºÅ',
        'processing_status': 'ÂèÇËÄÉÊñáÁåÆ„ÇíÂá¶ÁêÜ‰∏≠...',
        'current_reference': 'ÁèæÂú®: {}',
        'processed_stats': 'Âá¶ÁêÜÊ∏à„Åø: {}/{} | Ë¶ã„Å§„Åã„Å£„Åü: {} | „Ç®„É©„Éº: {}',
        'time_remaining': 'Êé®ÂÆöÊÆã„ÇäÊôÇÈñì: {}',
        'duplicate_reference': 'üîÑ ÈáçË§áÂèÇËÄÉÊñáÁåÆ (ÂèÇÁÖß #{})',
        'batch_processing': 'DOI„ÅÆ„Éê„ÉÉ„ÉÅÂá¶ÁêÜ...',
        'extracting_metadata': '„É°„Çø„Éá„Éº„Çø„ÇíÊäΩÂá∫‰∏≠...',
        'checking_duplicates': 'ÈáçË§á„Çí„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠...',
        'retrying_failed': 'Â§±Êïó„Åó„ÅüDOI„É™„ÇØ„Ç®„Çπ„Éà„ÇíÂÜçË©¶Ë°å‰∏≠...',
        'bibliographic_search': 'Êõ∏Ë™å„Éá„Éº„Çø„ÅßÊ§úÁ¥¢‰∏≠...',
        'style_presets': '„Çπ„Çø„Ç§„É´„Éó„É™„Çª„ÉÉ„Éà',
        'gost_button': 'GOST',
        'acs_button': 'ACS (MDPI)',
        'rsc_button': 'RSC',
        'cta_button': 'CTA',
        'style_preset_tooltip': '„Åì„Åì„Å´„ÅØ„ÄÅÂÄã„ÄÖ„ÅÆÂá∫ÁâàÁ§æ„ÅåÁ∂≠ÊåÅ„Åó„Å¶„ÅÑ„Çã„ÅÑ„Åè„Å§„Åã„ÅÆ„Çπ„Çø„Ç§„É´„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ‰∏ªË¶Å„Å™Âá∫ÁâàÁ§æÔºàElsevier„ÄÅSpringer Nature„ÄÅWileyÔºâ„ÅÆÂ†¥Âêà„ÄÅ„Çπ„Çø„Ç§„É´„ÅØ„Ç∏„É£„Éº„Éä„É´„Åî„Å®„Å´Áï∞„Å™„Çä„Åæ„Åô„ÄÇÁâπÂÆö„ÅÆ„Ç∏„É£„Éº„Éä„É´„ÅÆÂèÇËÄÉÊñáÁåÆ„Çí‰ΩúÊàêÔºà„Åæ„Åü„ÅØÂÜç„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÔºâ„Åô„Çã„Å´„ÅØ„ÄÅÂºïÁî®„Çπ„Çø„Ç§„É´ÊßãÁØâ„ÉÑ„Éº„É´„Çí‰ΩøÁî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
        'journal_style': '„Ç∏„É£„Éº„Éä„É´„Çπ„Çø„Ç§„É´:',
        'full_journal_name': 'ÂÆåÂÖ®„Å™„Ç∏„É£„Éº„Éä„É´Âêç',
        'journal_abbr_with_dots': 'J. Áï•Áß∞',
        'journal_abbr_no_dots': 'J Áï•Áß∞',
        'short_guide_title': 'DOI„Éô„Éº„Çπ„ÅÆÂèÇËÄÉÊñáÁåÆÂ§âÊèõ„ÅÆÁü≠„ÅÑ„Ç¨„Ç§„Éâ',
        'step_1': '‚ù∂ Êó¢Ë£Ω„ÅÆÂèÇËÄÉÊñáÁåÆ„Çπ„Çø„Ç§„É´ÔºàACS(MDPI)„ÄÅRSC„ÄÅCTAÔºâ„ÇíÈÅ∏Êäû„Åô„Çã„Åã„ÄÅË¶ÅÁ¥†Ë®≠ÂÆö„ÅÆÈ†ÜÂ∫è„ÄÅ„Éá„Ç∂„Ç§„É≥„ÄÅÂè•Ë™≠ÁÇπ„ÇíÈÅ∏Êäû„Åó„Å¶Áã¨Ëá™„ÅÆ„Çπ„Çø„Ç§„É´„Çí‰ΩúÊàê„Åó„Åæ„Åô',
        'step_1_note': 'ÔºàÔºÅÔºâÂè•Ë™≠ÁÇπ„Éú„ÉÉ„ÇØ„Çπ„Çí‰ΩøÁî®„Åô„Çã„Å®„ÄÅË¶ÅÁ¥†Ë®≠ÂÆöÈñì„Å´„Åï„Åæ„Åñ„Åæ„Å™È†ÖÁõÆ„ÇíÂê´„ÇÅ„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„ÅôÔºàÁ∞°Âçò„Å™Âè•Ë™≠ÁÇπ„ÄÅVol.„ÄÅIssue‚Ä¶Ôºâ',
        'step_2': '‚ù∑ Ê¨°„Å´„ÄÅ„Çπ„Çø„Ç§„É´„Éó„É™„Çª„ÉÉ„Éà„Çí‰ΩøÁî®„Åó„Å¶„ÄÅÂÜç„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Åï„Çå„ÅüÂêÑÂèÇËÄÉÊñáÁåÆ„ÅÆÁâπÂÆö„ÅÆË¶ÅÁ¥†Ë®≠ÂÆö„ÇíÂ§âÊõ¥„Åó„Åæ„Åô„ÄÇ',
        'step_3': '‚ù∏ „Çπ„Çø„Ç§„É´„Éó„É¨„Éì„É•„ÉºÊ©üËÉΩ„Å´„Çà„Çä„ÄÅ„É¶„Éº„Ç∂„Éº„ÅØÂèÇËÄÉÊñáÁåÆ„Çπ„Çø„Ç§„É´„ÅÆÊúÄÁµÇÁöÑ„Å™ÂΩ¢„ÇíË¶ñË¶öÂåñ„Åß„Åç„Åæ„Åô',
        'step_4': '‚ùπ ÊúÄÁµÇÁöÑ„Å™„Çπ„Çø„Ç§„É´„ÅåÈÅ©Âàá„Å™Â†¥Âêà„ÅØ„ÄÅ„Éá„Éº„ÇøÂÖ•Âäõ„Çª„ÇØ„Ç∑„Éß„É≥„ÅßDocx„Åæ„Åü„ÅØ„ÉÜ„Ç≠„Çπ„Éà„Ç™„Éó„Ç∑„Éß„É≥„ÇíÈÅ∏Êäû„Åó„ÄÅÂØæÂøú„Åô„ÇãÊÉÖÂ†±„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Åæ„Åô„ÄÇÊ¨°„Å´„ÄÅ„Éá„Éº„ÇøËº∏Âá∫„Çª„ÇØ„Ç∑„Éß„É≥„ÅßÂøÖË¶Å„Å™„Ç™„Éó„Ç∑„Éß„É≥„ÇíÈÅ∏Êäû„Åó„ÄÅ„ÄåÂá¶ÁêÜ„Äç„ÇíÊäº„Åó„Å¶ÂÜç„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÇíÈñãÂßã„Åó„Åæ„Åô„ÄÇ',
        'step_5': '‚ù∫ Âá¶ÁêÜ„ÅåÂÆå‰∫Ü„Åó„ÅüÂæå„ÄÅÂ∏åÊúõ„ÅÆÂΩ¢Âºè„ÅßÂÜç„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Åï„Çå„ÅüÂèÇËÄÉÊñáÁåÆ„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Åæ„Åô„ÄÇ',
        'step_5_note': 'ÔºàÔºÅÔºâDocx„Éï„Ç°„Ç§„É´„ÅÆËº∏Âá∫„Çí„ÅäÂãß„ÇÅ„Åó„Åæ„Åô„ÄÇ„Åì„Çå„ÅØ„ÄÅ„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÔºàÂ§™Â≠ó„ÄÅÊñú‰Ωì„ÄÅ„Éè„Ç§„Éë„Éº„É™„É≥„ÇØ„Å™„Å©Ôºâ„Çí‰øùÊåÅ„Åó„ÄÅÊñáÊõ∏„ÅÆÊúÄÂæå„Å´ËøΩÂä†„ÅÆÁµ±Ë®àÊÉÖÂ†±„ÇíÂê´„ÇÅ„Çã„Åü„ÇÅ„Åß„Åô„ÄÇ',
        'step_6': '‚ùª „Çπ„Çø„Ç§„É´„ÅÆÊúÄÁµÇ„Éê„Éº„Ç∏„Éß„É≥„Çí‰ΩúÊàê„Åó„ÅüÂæå„ÄÅÊ¨°„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥„ÅßÂÜçÂ∫¶„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åß„Åç„Çã„Çà„ÅÜ„Å´‰øùÂ≠ò„Åó„Åæ„Åô„ÄÇ„Åì„ÅÆÁõÆÁöÑ„Å´„ÅØ„Çπ„Çø„Ç§„É´ÁÆ°ÁêÜ„Çª„ÇØ„Ç∑„Éß„É≥„Çí‰ΩøÁî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
        'validation_error_no_elements': 'Â∞ë„Å™„Åè„Å®„ÇÇ1„Å§„ÅÆË¶ÅÁ¥†„ÇíË®≠ÂÆö„Åô„Çã„Åã„ÄÅ„Éó„É™„Çª„ÉÉ„Éà„Çπ„Çø„Ç§„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ',
        'validation_error_too_many_references': 'ÂèÇËÄÉÊñáÁåÆ„ÅåÂ§ö„Åô„Åé„Åæ„ÅôÔºàÊúÄÂ§ß{}‰ª∂„Åæ„ÅßË®±ÂèØÔºâ',
        'validation_warning_few_references': 'ÊúâÊÑè„Å™Áµ±Ë®à„ÅÆ„Åü„ÇÅ„ÅÆÂèÇËÄÉÊñáÁåÆ„ÅåÂ∞ë„Å™„Åô„Åé„Åæ„Åô',
        'cache_initialized': '„Ç≠„É£„ÉÉ„Ç∑„É•„ÅÆÂàùÊúüÂåñ„Å´ÊàêÂäü„Åó„Åæ„Åó„Åü',
        'cache_cleared': '„Ç≠„É£„ÉÉ„Ç∑„É•„ÅÆ„ÇØ„É™„Ç¢„Å´ÊàêÂäü„Åó„Åæ„Åó„Åü',
        'theme_selector': '„ÉÜ„Éº„Éû:',
        'light_theme': '„É©„Ç§„Éà',
        'dark_theme': '„ÉÄ„Éº„ÇØ',
        'mobile_view': '„É¢„Éê„Ç§„É´Ë°®Á§∫',
        'desktop_view': '„Éá„Çπ„ÇØ„Éà„ÉÉ„ÉóË°®Á§∫',
        'clear_button': 'üóëÔ∏è „ÇØ„É™„Ç¢',
        'back_button': '‚Ü©Ô∏è Êàª„Çã'
    },
    'zh': {
        'header': 'üé® ÂºïÊñáÊ†∑ÂºèÊûÑÂª∫Âô®',
        'general_settings': '‚öôÔ∏è ÈÄöÁî®ËÆæÁΩÆ',
        'element_config': 'üìë ÂÖÉÁ¥†ÈÖçÁΩÆ',
        'style_preview': 'üëÄ Ê†∑ÂºèÈ¢ÑËßà',
        'data_input': 'üìÅ Êï∞ÊçÆËæìÂÖ•',
        'data_output': 'üì§ Êï∞ÊçÆËæìÂá∫',
        'numbering_style': 'ÁºñÂè∑:',
        'author_format': '‰ΩúËÄÖ:',
        'author_separator': 'ÂàÜÈöîÁ¨¶:',
        'et_al_limit': 'Et al Âú®‰πãÂêé:',
        'use_and': "'Âíå'",
        'use_ampersand': "'&'",
        'doi_format': 'DOIÊ†ºÂºè:',
        'doi_hyperlink': 'DOI‰Ωú‰∏∫Ë∂ÖÈìæÊé•',
        'page_format': 'È°µÈù¢:',
        'final_punctuation': 'ÁªìÊùüÊ†áÁÇπ:',
        'element': 'ÂÖÉÁ¥†',
        'italic': 'Êñú‰Ωì',
        'bold': 'Á≤ó‰Ωì',
        'parentheses': 'Êã¨Âè∑',
        'separator': 'ÂàÜÈöîÁ¨¶',
        'input_method': 'ËæìÂÖ•:',
        'output_method': 'ËæìÂá∫:',
        'select_docx': 'ÈÄâÊã©DOCX',
        'enter_references': 'ËæìÂÖ•ÂèÇËÄÉÊñáÁåÆÔºàÊØèË°å‰∏Ä‰∏™Ôºâ',
        'references': 'ÂèÇËÄÉÊñáÁåÆ:',
        'results': 'ÁªìÊûú:',
        'process': 'üöÄ Â§ÑÁêÜ',
        'example': 'Á§∫‰æã:',
        'error_select_element': 'ËØ∑ÈÄâÊã©Ëá≥Â∞ë‰∏Ä‰∏™ÂÖÉÁ¥†ÔºÅ',
        'processing': '‚è≥ Â§ÑÁêÜ‰∏≠...',
        'upload_file': 'ËØ∑‰∏ä‰º†Êñá‰ª∂ÔºÅ',
        'enter_references_error': 'ËØ∑ËæìÂÖ•ÂèÇËÄÉÊñáÁåÆÔºÅ',
        'select_docx_output': 'ËØ∑ÈÄâÊã©Ë¶Å‰∏ãËΩΩÁöÑDOCXËæìÂá∫ÔºÅ',
        'doi_txt': 'üìÑ DOI (TXT)',
        'references_docx': 'üìã ÂèÇËÄÉÊñáÁåÆ (DOCX)',
        'found_references': 'ÊâæÂà∞ {} Êù°ÂèÇËÄÉÊñáÁåÆ„ÄÇ',
        'found_references_text': 'Âú®ÊñáÊú¨‰∏≠ÊâæÂà∞ {} Êù°ÂèÇËÄÉÊñáÁåÆ„ÄÇ',
        'statistics': 'ÁªüËÆ°: ÊâæÂà∞ {} Êù°DOIÔºå{} Êù°Êú™ÊâæÂà∞„ÄÇ',
        'language': 'ËØ≠Ë®Ä:',
        'gost_style': 'Â∫îÁî®GOSTÊ†∑Âºè',
        'export_style': 'üì§ ÂØºÂá∫Ê†∑Âºè',
        'import_style': 'üì• ÂØºÂÖ•Ê†∑Âºè',
        'export_file_name': 'Êñá‰ª∂Âêç:',
        'import_file': 'ÈÄâÊã©Ê†∑ÂºèÊñá‰ª∂:',
        'export_success': 'Ê†∑ÂºèÂØºÂá∫ÊàêÂäüÔºÅ',
        'import_success': 'Ê†∑ÂºèÂØºÂÖ•ÊàêÂäüÔºÅ',
        'import_error': 'ÂØºÂÖ•Ê†∑ÂºèÊñá‰ª∂ÈîôËØØÔºÅ',
        'processing_status': 'Â§ÑÁêÜÂèÇËÄÉÊñáÁåÆ‰∏≠...',
        'current_reference': 'ÂΩìÂâç: {}',
        'processed_stats': 'Â∑≤Â§ÑÁêÜ: {}/{} | ÊâæÂà∞: {} | ÈîôËØØ: {}',
        'time_remaining': 'È¢ÑËÆ°Ââ©‰ΩôÊó∂Èó¥: {}',
        'duplicate_reference': 'üîÑ ÈáçÂ§çÂèÇËÄÉÊñáÁåÆ (ÂèÇËßÅ #{})',
        'batch_processing': 'ÊâπÈáèÂ§ÑÁêÜDOI...',
        'extracting_metadata': 'ÊèêÂèñÂÖÉÊï∞ÊçÆ‰∏≠...',
        'checking_duplicates': 'Ê£ÄÊü•ÈáçÂ§çÈ°π...',
        'retrying_failed': 'ÈáçËØïÂ§±Ë¥•ÁöÑDOIËØ∑Ê±Ç...',
        'bibliographic_search': 'ÈÄöËøá‰π¶ÁõÆÊï∞ÊçÆÊêúÁ¥¢...',
        'style_presets': 'Ê†∑ÂºèÈ¢ÑËÆæ',
        'gost_button': 'GOST',
        'acs_button': 'ACS (MDPI)',
        'rsc_button': 'RSC',
        'cta_button': 'CTA',
        'style_preset_tooltip': 'ËøôÈáåÊòØ‰∏Ä‰∫õÁî±ÂêÑ‰∏™Âá∫ÁâàÂïÜÁª¥Êä§ÁöÑÊ†∑Âºè„ÄÇÂØπ‰∫é‰∏ªË¶ÅÂá∫ÁâàÂïÜÔºàElsevier„ÄÅSpringer Nature„ÄÅWileyÔºâÔºåÊ†∑ÂºèÂõ†ÊúüÂàäËÄåÂºÇ„ÄÇË¶Å‰∏∫ÁâπÂÆöÊúüÂàäÂàõÂª∫ÔºàÊàñÈáçÊñ∞Ê†ºÂºèÂåñÔºâÂèÇËÄÉÊñáÁåÆÔºåËØ∑‰ΩøÁî®ÂºïÊñáÊ†∑ÂºèÊûÑÂª∫Âô®„ÄÇ',
        'journal_style': 'ÊúüÂàäÊ†∑Âºè:',
        'full_journal_name': 'ÂÆåÊï¥ÊúüÂàäÂêçÁß∞',
        'journal_abbr_with_dots': 'ÊúüÂàä Áº©ÂÜô',
        'journal_abbr_no_dots': 'ÊúüÂàäÁº©ÂÜô',
        'short_guide_title': 'Âü∫‰∫éDOIÁöÑÂèÇËÄÉÊñáÁåÆËΩ¨Êç¢ÁÆÄÁü≠ÊåáÂçó',
        'step_1': '‚ù∂ ÈÄâÊã©Áé∞ÊàêÁöÑÂèÇËÄÉÊñáÁåÆÊ†∑ÂºèÔºàACS(MDPI)„ÄÅRSCÊàñCTAÔºâÔºåÊàñÈÄöËøáÈÄâÊã©ÂÖÉÁ¥†ÈÖçÁΩÆÁöÑÈ°∫Â∫è„ÄÅËÆæËÆ°ÂíåÊ†áÁÇπÂàõÂª∫Ëá™Â∑±ÁöÑÊ†∑Âºè',
        'step_1_note': 'ÔºàÔºÅÔºâÊ†áÁÇπÊ°ÜÂÖÅËÆ∏Âú®ÂÖÉÁ¥†ÈÖçÁΩÆ‰πãÈó¥ÂåÖÂê´ÂêÑÁßçÈ°πÁõÆÔºàÁÆÄÂçïÊ†áÁÇπ„ÄÅÂç∑„ÄÅÊúü‚Ä¶Ôºâ',
        'step_2': '‚ù∑ ÁÑ∂ÂêéÔºå‰ΩøÁî®Ê†∑ÂºèÈ¢ÑËÆæÊõ¥ÊîπÊØè‰∏™ÈáçÊñ∞Ê†ºÂºèÂåñÁöÑÂèÇËÄÉÊñáÁåÆÁöÑÁâπÂÆöÂÖÉÁ¥†ÈÖçÁΩÆ„ÄÇ',
        'step_3': '‚ù∏ Ê†∑ÂºèÈ¢ÑËßàÂäüËÉΩ‰ΩøÁî®Êà∑ËÉΩÂ§üÂèØËßÜÂåñÂÖ∂ÂèÇËÄÉÊñáÁåÆÊ†∑ÂºèÁöÑÊúÄÁªàÂΩ¢Âºè',
        'step_4': '‚ùπ Â¶ÇÊûúÊúÄÁªàÊ†∑ÂºèÂêàÈÄÇÔºåËØ∑Âú®Êï∞ÊçÆËæìÂÖ•ÈÉ®ÂàÜÈÄâÊã©DocxÊàñÊñáÊú¨ÈÄâÈ°πÂπ∂‰∏ä‰º†Áõ∏Â∫î‰ø°ÊÅØ„ÄÇÁÑ∂ÂêéÂú®Êï∞ÊçÆËæìÂá∫ÈÉ®ÂàÜÈÄâÊã©ÊâÄÈúÄÈÄâÈ°πÂπ∂Êåâ"Â§ÑÁêÜ"ÂºÄÂßãÈáçÊñ∞Ê†ºÂºèÂåñ„ÄÇ',
        'step_5': '‚ù∫ Â§ÑÁêÜÂÆåÊàêÂêéÔºå‰ª•ÊÇ®ÂñúÊ¨¢ÁöÑÊ†ºÂºè‰∏ãËΩΩÈáçÊñ∞Ê†ºÂºèÂåñÁöÑÂèÇËÄÉÊñáÁåÆ„ÄÇ',
        'step_5_note': 'ÔºàÔºÅÔºâÂª∫ËÆÆËæìÂá∫DocxÊñá‰ª∂ÔºåÂõ†‰∏∫ÂÆÉ‰øùÁïôÊ†ºÂºèÔºà‰æãÂ¶ÇÁ≤ó‰Ωì„ÄÅÊñú‰ΩìÂíåË∂ÖÈìæÊé•ÔºâÂπ∂Âú®ÊñáÊ°£Êú´Â∞æÂåÖÂê´ÈôÑÂä†ÁªüËÆ°‰ø°ÊÅØ„ÄÇ',
        'step_6': '‚ùª ÂàõÂª∫Ê†∑ÂºèÁöÑÊúÄÁªàÁâàÊú¨ÂêéÔºå‰øùÂ≠òÂÆÉ‰ª•‰æøÂú®‰∏ã‰∏Ä‰∏™‰ºöËØù‰∏≠ÂÜçÊ¨°‰∏ä‰º†„ÄÇ‰ΩøÁî®Ê†∑ÂºèÁÆ°ÁêÜÈÉ®ÂàÜÂÆûÁé∞Ê≠§ÁõÆÁöÑ„ÄÇ',
        'validation_error_no_elements': 'ËØ∑ÈÖçÁΩÆËá≥Â∞ë‰∏Ä‰∏™ÂÖÉÁ¥†ÊàñÈÄâÊã©È¢ÑËÆæÊ†∑ÂºèÔºÅ',
        'validation_error_too_many_references': 'ÂèÇËÄÉÊñáÁåÆÂ§™Â§öÔºàÊúÄÂ§öÂÖÅËÆ∏ {} Êù°Ôºâ',
        'validation_warning_few_references': 'ÂèÇËÄÉÊñáÁåÆÂ§™Â∞ëÔºåÊó†Ê≥ïÁîüÊàêÊúâÊÑè‰πâÁöÑÁªüËÆ°',
        'cache_initialized': 'ÁºìÂ≠òÂàùÂßãÂåñÊàêÂäü',
        'cache_cleared': 'ÁºìÂ≠òÊ∏ÖÈô§ÊàêÂäü',
        'theme_selector': '‰∏ªÈ¢ò:',
        'light_theme': 'ÊµÖËâ≤',
        'dark_theme': 'Ê∑±Ëâ≤',
        'mobile_view': 'ÁßªÂä®ËßÜÂõæ',
        'desktop_view': 'Ê°åÈù¢ËßÜÂõæ',
        'clear_button': 'üóëÔ∏è Ê∏ÖÈô§',
        'back_button': '‚Ü©Ô∏è ËøîÂõû'
    }
}

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ DOI
class DOICache:
    """–ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö DOI"""
    
    def __init__(self, db_path: str = Config.DB_PATH):
        self.db_path = db_path
        self._init_db()
    
    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            conn.execute('''
                CREATE TABLE IF NOT EXISTS doi_cache (
                    doi TEXT PRIMARY KEY,
                    metadata TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    accessed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            conn.execute('CREATE INDEX IF NOT EXISTS idx_doi ON doi_cache(doi)')
            conn.execute('CREATE INDEX IF NOT EXISTS idx_accessed_at ON doi_cache(accessed_at)')
    
    def get(self, doi: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                result = conn.execute(
                    'SELECT metadata FROM doi_cache WHERE doi = ? AND datetime(accessed_at) > datetime("now", ?)',
                    (doi, f"-{Config.CACHE_TTL_HOURS} hours")
                ).fetchone()
                
                if result:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–∞
                    conn.execute(
                        'UPDATE doi_cache SET accessed_at = CURRENT_TIMESTAMP WHERE doi = ?',
                        (doi,)
                    )
                    return json.loads(result[0])
        except Exception as e:
            logger.error(f"Cache get error for {doi}: {e}")
        return None
    
    def set(self, doi: str, metadata: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute(
                    'INSERT OR REPLACE INTO doi_cache (doi, metadata) VALUES (?, ?)',
                    (doi, json.dumps(metadata))
                )
        except Exception as e:
            logger.error(f"Cache set error for {doi}: {e}")
    
    def clear_old_entries(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute(
                    'DELETE FROM doi_cache WHERE datetime(accessed_at) <= datetime("now", ?)',
                    (f"-{Config.CACHE_TTL_HOURS} hours",)
                )
        except Exception as e:
            logger.error(f"Cache cleanup error: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞
doi_cache = DOICache()

class UserPreferencesManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
    
    def __init__(self, db_path: str = Config.USER_PREFS_DB):
        self.db_path = db_path
        self._init_db()
    
    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
        with sqlite3.connect(self.db_path) as conn:
            conn.execute('''
                CREATE TABLE IF NOT EXISTS user_preferences (
                    ip_address TEXT PRIMARY KEY,
                    language TEXT DEFAULT 'en',
                    theme TEXT DEFAULT 'light',
                    mobile_view INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            conn.execute('CREATE INDEX IF NOT EXISTS idx_ip ON user_preferences(ip_address)')
    
    def get_user_ip(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –í Streamlit –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å IP —á–µ—Ä–µ–∑ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π API
            if hasattr(st, 'experimental_user'):
                return getattr(st.experimental_user, 'ip', 'unknown')
        except:
            pass
        return 'unknown'
    
    def get_preferences(self, ip: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                result = conn.execute(
                    'SELECT language, theme, mobile_view FROM user_preferences WHERE ip_address = ?',
                    (ip,)
                ).fetchone()
                
                if result:
                    return {
                        'language': result[0],
                        'theme': result[1],
                        'mobile_view': bool(result[2])
                    }
        except Exception as e:
            logger.error(f"Error getting preferences for {ip}: {e}")
        
        return {
            'language': 'en',
            'theme': 'light',
            'mobile_view': False
        }
    
    def save_preferences(self, ip: str, preferences: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute('''
                    INSERT OR REPLACE INTO user_preferences 
                    (ip_address, language, theme, mobile_view, updated_at) 
                    VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
                ''', (
                    ip,
                    preferences.get('language', 'en'),
                    preferences.get('theme', 'light'),
                    int(preferences.get('mobile_view', False))
                ))
        except Exception as e:
            logger.error(f"Error saving preferences for {ip}: {e}")
    
    def detect_mobile_device(self, user_agent: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ User-Agent"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ User-Agent
            mobile_keywords = [
                'mobile', 'android', 'iphone', 'ipad', 'tablet', 
                'blackberry', 'webos', 'windows phone'
            ]
            user_agent_lower = user_agent.lower()
            return any(keyword in user_agent_lower for keyword in mobile_keywords)
        except:
            return False

class StyleValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç–∏–ª—è"""
    
    @staticmethod
    def validate_style_config(style_config: Dict) -> Tuple[bool, List[str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–∏–ª—è"""
        errors = []
        warnings = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤
        has_elements = bool(style_config.get('elements'))
        has_preset = any([
            style_config.get('gost_style', False),
            style_config.get('acs_style', False), 
            style_config.get('rsc_style', False),
            style_config.get('cta_style', False)
        ])
        
        if not has_elements and not has_preset:
            errors.append(get_text('validation_error_no_elements'))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if has_elements:
            elements = style_config['elements']
            for i, (element, config) in enumerate(elements):
                if not element:
                    errors.append(f"Element {i+1} is empty")
                if not config.get('separator', '').strip() and i < len(elements) - 1:
                    warnings.append(f"Element {i+1} has empty separator")
        
        return len(errors) == 0, errors + warnings
    
    @staticmethod
    def validate_references_count(references: List[str]) -> Tuple[bool, List[str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Å—ã–ª–æ–∫"""
        errors = []
        warnings = []
        
        if len(references) > Config.MAX_REFERENCES:
            errors.append(get_text('validation_error_too_many_references').format(Config.MAX_REFERENCES))
        
        if len(references) < Config.MIN_REFERENCES_FOR_STATS:
            warnings.append(get_text('validation_warning_few_references'))
        
        return len(errors) == 0, errors + warnings

class ProgressManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    def __init__(self):
        self.start_time = None
        self.progress_data = {
            'total': 0,
            'processed': 0,
            'found': 0,
            'errors': 0,
            'phase': 'initializing'
        }
    
    def start_processing(self, total: int):
        """–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.start_time = time.time()
        self.progress_data = {
            'total': total,
            'processed': 0,
            'found': 0,
            'errors': 0,
            'phase': 'processing'
        }
    
    def update_progress(self, processed: int, found: int, errors: int, phase: str = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_data.update({
            'processed': processed,
            'found': found,
            'errors': errors
        })
        if phase:
            self.progress_data['phase'] = phase
    
    def get_progress_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"""
        if not self.start_time:
            return self.progress_data
        
        elapsed = time.time() - self.start_time
        processed = self.progress_data['processed']
        total = self.progress_data['total']
        
        # –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
        time_remaining = None
        if processed > 0 and total > 0:
            estimated_total = (elapsed / processed) * total
            time_remaining = estimated_total - elapsed
            if time_remaining < 0:
                time_remaining = 0
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
        progress_ratio = processed / total if total > 0 else 0
        
        return {
            **self.progress_data,
            'elapsed_time': elapsed,
            'time_remaining': time_remaining,
            'progress_ratio': progress_ratio
        }
    
    def get_progress_color(self, progress_ratio: float) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if progress_ratio < 0.33:
            return Config.PROGRESS_COLORS['start']
        elif progress_ratio < 0.66:
            return Config.PROGRESS_COLORS['middle']
        else:
            return Config.PROGRESS_COLORS['end']

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    defaults = {
        'current_language': 'en',
        'current_theme': 'light',
        'mobile_view': False,
        'imported_style': None,
        'style_applied': False,
        'apply_imported_style': False,
        'output_text_value': "",
        'show_results': False,
        'download_data': {},
        'use_and_checkbox': False,
        'use_ampersand_checkbox': False,
        'journal_style': '{Full Journal Name}',
        'num': "No numbering",
        'auth': "AA Smith",
        'sep': ", ",
        'etal': 0,
        'doi': "10.10/xxx",
        'doilink': True,
        'page': "122‚Äì128",
        'punct': "",
        'gost_style': False,
        'acs_style': False,
        'rsc_style': False,
        'cta_style': False,
        'last_style_update': 0,
        'cache_initialized': False,
        'user_prefs_loaded': False,
        'file_processing_complete': False,
        'style_import_processed': False,  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
        'last_imported_file_hash': None,  # –•–µ—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        'style_management_initialized': False,  # –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è–º–∏
        'previous_states': [],  # –°—Ç–µ–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ Back
        'max_undo_steps': 10,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –æ—Ç–º–µ–Ω—ã
    }
    
    for key, default in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = default
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    for i in range(8):
        for prop in ['el', 'it', 'bd', 'pr', 'sp']:
            key = f"{prop}{i}"
            if key not in st.session_state:
                if prop == 'sp':
                    st.session_state[key] = ". "
                elif prop == 'el':
                    st.session_state[key] = ""
                else:
                    st.session_state[key] = False

def get_text(key: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ –∫–ª—é—á—É"""
    return TRANSLATIONS[st.session_state.current_language].get(key, key)

# –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class JournalAbbreviation:
    def __init__(self):
        self.ltwa_data = {}
        self.load_ltwa_data()
        self.uppercase_abbreviations = {'acs', 'ecs', 'rsc', 'ieee', 'iet', 'acm', 'aims', 'bmc', 'bmj', 'npj'}
        self.special_endings = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 
                               'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
                               'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X'}
    
    def load_ltwa_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ ltwa.csv"""
        try:
            csv_path = Config.LTWA_CSV_PATH
            if os.path.exists(csv_path):
                with open(csv_path, 'r', encoding='utf-8') as f:
                    reader = csv.reader(f, delimiter='\t')
                    next(reader)
                    for row in reader:
                        if len(row) >= 2:
                            word = row[0].strip()
                            abbreviation = row[1].strip() if row[1].strip() else None
                            self.ltwa_data[word] = abbreviation
            else:
                logger.warning(f"–§–∞–π–ª {csv_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ltwa.csv: {e}")
    
    def abbreviate_word(self, word: str) -> str:
        """–°–æ–∫—Ä–∞—â–∞–µ—Ç –æ–¥–Ω–æ —Å–ª–æ–≤–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö LTWA"""
        word_lower = word.lower()
        
        if word_lower in self.ltwa_data:
            abbr = self.ltwa_data[word_lower]
            return abbr if abbr else word
        
        for ltwa_word, abbr in self.ltwa_data.items():
            if ltwa_word.endswith('-') and word_lower.startswith(ltwa_word[:-1]):
                return abbr if abbr else word
        
        return word
    
    def extract_special_endings(self, journal_name: str) -> Tuple[str, str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è (A, B, C –∏ —Ç.–¥.) –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞"""
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω—á–∞–Ω–∏–π
        patterns = [
            r'\s+([A-Z])\s*$',  # –û–¥–∏–Ω–æ—á–Ω—ã–µ –±—É–∫–≤—ã –≤ –∫–æ–Ω—Ü–µ
            r'\s+([IVX]+)\s*$',  # –†–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã
            r'\s+Part\s+([A-Z0-9]+)\s*$',  # Part A, Part 1 –∏ —Ç.–¥.
            r'\s+([A-Z]):\s+[A-Z]',  # –ë—É–∫–≤–∞ —Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º: A: General, B: Environmental
        ]
        
        for pattern in patterns:
            match = re.search(pattern, journal_name)
            if match:
                ending = match.group(1)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º
                if ending in self.special_endings or re.match(r'^[A-Z]$', ending):
                    base_name = journal_name[:match.start()].strip()
                    return base_name, ending
        
        return journal_name, ""
    
    def abbreviate_journal_name(self, journal_name: str, style: str = "{J. Abbr.}") -> str:
        """–°–æ–∫—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º"""
        if not journal_name:
            return ""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ
        base_name, special_ending = self.extract_special_endings(journal_name)
        
        words_to_remove = {'a', 'an', 'the', 'of', 'in', 'and', '&', 'for', 'on', 'with', 'by'}
        words = [word for word in base_name.split() if word.lower() not in words_to_remove]
        words = [word.replace(':', '') for word in words]
        
        if len(words) <= 1:
            result = journal_name
        else:
            abbreviated_words = []
            for i, word in enumerate(words):
                original_first_char = word[0]
                abbreviated = self.abbreviate_word(word.lower())
                
                if abbreviated and original_first_char.isupper():
                    abbreviated = abbreviated[0].upper() + abbreviated[1:]
                
                if i == 0 and abbreviated.lower() in self.uppercase_abbreviations:
                    abbreviated = abbreviated.upper()
                
                abbreviated_words.append(abbreviated)
            
            if style == "{J. Abbr.}":
                result = " ".join(abbreviated_words)
            elif style == "{J Abbr}":
                result = " ".join(abbr.replace('.', '') for abbr in abbreviated_words)
            else:
                result = base_name
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ
        if special_ending:
            if ':' in journal_name and special_ending + ':' in journal_name:
                # –î–ª—è —Å–ª—É—á–∞–µ–≤ —Ç–∏–ø–∞ "Applied Catalysis A: General"
                result += f" {special_ending}:"
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
                after_colon = journal_name.split(special_ending + ':', 1)[1].strip()
                if after_colon:
                    result += f" {after_colon}"
            else:
                result += f" {special_ending}"
        
        result = re.sub(r'\.\.+', '.', result)
        return result

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
journal_abbrev = JournalAbbreviation()

class BaseCitationFormatter:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, style_config: Dict[str, Any]):
        self.style_config = style_config
    
    def format_authors(self, authors: List[Dict[str, str]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤"""
        if not authors:
            return ""
        
        author_format = self.style_config['author_format']
        separator = self.style_config['author_separator']
        et_al_limit = self.style_config['et_al_limit']
        use_and_bool = self.style_config['use_and_bool']
        use_ampersand_bool = self.style_config['use_ampersand_bool']
        
        author_str = ""
        
        if use_and_bool or use_ampersand_bool:
            limit = len(authors)
        else:
            limit = et_al_limit if et_al_limit and et_al_limit > 0 else len(authors)
        
        for i, author in enumerate(authors[:limit]):
            given = author['given']
            family = author['family']
            
            initials = given.split()[:2]
            first_initial = initials[0][0] if initials else ''
            second_initial = initials[1][0].upper() if len(initials) > 1 else ''
            
            if author_format == "AA Smith":
                formatted_author = f"{first_initial}{second_initial} {family}"
            elif author_format == "A.A. Smith":
                if second_initial:
                    formatted_author = f"{first_initial}.{second_initial}. {family}"
                else:
                    formatted_author = f"{first_initial}. {family}"
            elif author_format == "Smith AA":
                formatted_author = f"{family} {first_initial}{second_initial}"
            elif author_format == "Smith A.A":
                if second_initial:
                    formatted_author = f"{family} {first_initial}.{second_initial}."
                else:
                    formatted_author = f"{family} {first_initial}."
            elif author_format == "Smith, A.A.":
                if second_initial:
                    formatted_author = f"{family}, {first_initial}.{second_initial}."
                else:
                    formatted_author = f"{family}, {first_initial}."
            else:
                formatted_author = f"{first_initial}. {family}"
            
            author_str += formatted_author
            
            if i < len(authors[:limit]) - 1:
                if i == len(authors[:limit]) - 2 and (use_and_bool or use_ampersand_bool):
                    if use_and_bool:
                        author_str += " and "
                    else:
                        author_str += " & "
                else:
                    author_str += separator
        
        if et_al_limit and len(authors) > et_al_limit and not (use_and_bool or use_ampersand_bool):
            author_str += " et al"
        
        return author_str.strip()
    
    def format_pages(self, pages: str, article_number: str, style_type: str = "default") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∏–ª—è"""
        page_format = self.style_config['page_format']
        
        if pages:
            if style_type == "rsc":
                if '-' in pages:
                    first_page = pages.split('-')[0].strip()
                    return first_page
                else:
                    return pages.strip()
            elif style_type == "cta":
                if '-' in pages:
                    start, end = pages.split('-')
                    start = start.strip()
                    end = end.strip()
                    
                    if len(start) == len(end) and start[:-1] == end[:-1]:
                        return f"{start}‚Äì{end[-1]}"
                    elif len(start) > 1 and len(end) > 1 and start[:-2] == end[:-2]:
                        return f"{start}‚Äì{end[-2:]}"
                    else:
                        return f"{start}‚Äì{end}"
                else:
                    return pages.strip()
            else:
                if '-' not in pages:
                    return pages
                
                start, end = pages.split('-')
                start = start.strip()
                end = end.strip()
                
                if page_format == "122 - 128":
                    return f"{start} - {end}"
                elif page_format == "122-128":
                    return f"{start}-{end}"
                elif page_format == "122 ‚Äì 128":
                    return f"{start} ‚Äì {end}"
                elif page_format == "122‚Äì128":
                    return f"{start}‚Äì{end}"
                elif page_format == "122‚Äì8":
                    i = 0
                    while i < len(start) and i < len(end) and start[i] == end[i]:
                        i += 1
                    return f"{start}‚Äì{end[i:]}"
        
        return article_number
    
    def format_doi(self, doi: str) -> Tuple[str, str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç DOI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ URL"""
        doi_format = self.style_config['doi_format']
        
        if doi_format == "10.10/xxx":
            value = doi
        elif doi_format == "doi:10.10/xxx":
            value = f"doi:{doi}"
        elif doi_format == "DOI:10.10/xxx":
            value = f"DOI:{doi}"
        elif doi_format == "https://dx.doi.org/10.10/xxx":
            value = f"https://dx.doi.org/{doi}"
        else:
            value = doi
        
        return value, f"https://doi.org/{doi}"
    
    def format_journal_name(self, journal_name: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è"""
        journal_style = self.style_config.get('journal_style', '{Full Journal Name}')
        return journal_abbrev.abbreviate_journal_name(journal_name, journal_style)

class CustomCitationFormatter(BaseCitationFormatter):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Issue"""
    
    def format_reference(self, metadata: Dict[str, Any], for_preview: bool = False) -> Tuple[Any, bool]:
        if not metadata:
            error_message = "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É." if st.session_state.current_language == 'ru' else "Error: Could not format the reference."
            return (error_message, True)
        
        elements = []
        previous_element_was_empty = False
        
        for i, (element, config) in enumerate(self.style_config['elements']):
            value = ""
            doi_value = None
            element_empty = False
            
            if element == "Authors":
                value = self.format_authors(metadata['authors'])
                element_empty = not value
            elif element == "Title":
                value = metadata['title']
                element_empty = not value
            elif element == "Journal":
                value = self.format_journal_name(metadata['journal'])
                element_empty = not value
            elif element == "Year":
                value = str(metadata['year']) if metadata['year'] else ""
                element_empty = not value
            elif element == "Volume":
                value = metadata['volume']
                element_empty = not value
            elif element == "Issue":
                value = metadata['issue']
                element_empty = not value
            elif element == "Pages":
                value = self.format_pages(metadata['pages'], metadata['article_number'])
                element_empty = not value
            elif element == "DOI":
                doi = metadata['doi']
                doi_value = doi
                value, _ = self.format_doi(doi)
                element_empty = not value
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –∏—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
            if value:
                if config['parentheses'] and value:
                    value = f"({value})"
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å —É—á–µ—Ç–æ–º –ø—É—Å—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                separator = ""
                if i < len(self.style_config['elements']) - 1:
                    if not element_empty:
                        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                        separator = config['separator']
                    elif previous_element_was_empty:
                        # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –±—ã–ª –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                        separator = ""
                    else:
                        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø—É—Å—Ç–æ–π, –Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±—ã–ª –Ω–µ –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                        separator = config['separator']
                
                if for_preview:
                    formatted_value = value
                    if config['italic']:
                        formatted_value = f"<i>{formatted_value}</i>"
                    if config['bold']:
                        formatted_value = f"<b>{formatted_value}</b>"
                    
                    elements.append((formatted_value, False, False, separator, False, None, element_empty))
                else:
                    elements.append((value, config['italic'], config['bold'], separator,
                                   (element == "DOI" and self.style_config['doi_hyperlink']), doi_value, element_empty))
                
                previous_element_was_empty = False
            else:
                # –≠–ª–µ–º–µ–Ω—Ç –ø—É—Å—Ç–æ–π - –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —ç—Ç–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                previous_element_was_empty = True
        
        # –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        cleaned_elements = []
        for i, element_data in enumerate(elements):
            value, italic, bold, separator, is_doi_hyperlink, doi_value, element_empty = element_data
            
            # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –ø—É—Å—Ç–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if not element_empty:
                # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —É–±–∏—Ä–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                if i == len(elements) - 1:
                    separator = ""
                
                cleaned_elements.append((value, italic, bold, separator, is_doi_hyperlink, doi_value))
        
        if for_preview:
            ref_str = ""
            for i, (value, _, _, separator, _, _) in enumerate(cleaned_elements):
                ref_str += value
                if separator and i < len(cleaned_elements) - 1:
                    ref_str += separator
                elif i == len(cleaned_elements) - 1 and self.style_config['final_punctuation']:
                    ref_str = ref_str.rstrip(',.') + "."
            
            ref_str = re.sub(r'\.\.+', '.', ref_str)
            return ref_str, False
        else:
            return cleaned_elements, False

class GOSTCitationFormatter(BaseCitationFormatter):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Å—Ç–∏–ª—è –ì–û–°–¢ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    
    def format_reference(self, metadata: Dict[str, Any], for_preview: bool = False) -> Tuple[Any, bool]:
        if not metadata:
            error_message = "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É." if st.session_state.current_language == 'ru' else "Error: Could not format the reference."
            return (error_message, True)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–æ–≤ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: Smith J.A., Doe A.B.
        authors_str = ""
        for i, author in enumerate(metadata['authors']):
            given = author['given']
            family = author['family']
            initials = given.split()[:2]
            first_initial = initials[0][0] if initials else ''
            second_initial = initials[1][0].upper() if len(initials) > 1 else ''
            
            if second_initial:
                author_str = f"{family} {first_initial}.{second_initial}."
            else:
                author_str = f"{family} {first_initial}."
            
            authors_str += author_str
            
            if i < len(metadata['authors']) - 1:
                authors_str += ", "
        
        pages = metadata['pages']
        article_number = metadata['article_number']
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞
        journal_name = metadata['journal']
        
        doi_url = f"https://doi.org/{metadata['doi']}"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Å—ã–ª–∫–∏
        if metadata['issue']:
            gost_ref = f"{authors_str} {metadata['title']} // {journal_name}. ‚Äì {metadata['year']}. ‚Äì Vol. {metadata['volume']}, ‚Ññ {metadata['issue']}"
        else:
            gost_ref = f"{authors_str} {metadata['title']} // {journal_name}. ‚Äì {metadata['year']}. ‚Äì Vol. {metadata['volume']}"
        
        # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç article-number –Ω–∞–¥ pages
        if article_number and article_number.strip():
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            gost_ref += f". ‚Äì Art. {article_number.strip()}"
        elif pages and pages.strip():
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–µ—Å–ª–∏ –Ω–µ—Ç article-number)
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ "122-128" (—Å –æ–±—ã—á–Ω—ã–º –¥–µ—Ñ–∏—Å–æ–º)
            if '-' in pages:
                start_page, end_page = pages.split('-')
                pages_formatted = f"{start_page.strip()}-{end_page.strip()}"
            else:
                pages_formatted = pages.strip()
            gost_ref += f". ‚Äì –†. {pages_formatted}"
        else:
            # –ù–µ—Ç –Ω–∏ article-number, –Ω–∏ pages
            if st.session_state.current_language == 'ru':
                gost_ref += ". ‚Äì [–ë–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏]"
            else:
                gost_ref += ". ‚Äì [No pagination]"
        
        # –î–æ–±–∞–≤–ª—è–µ–º DOI
        gost_ref += f". ‚Äì {doi_url}"
        
        if for_preview:
            return gost_ref, False
        else:
            elements = []
            text_before_doi = gost_ref.replace(doi_url, "")
            elements.append((text_before_doi, False, False, "", False, None))
            elements.append((doi_url, False, False, "", True, metadata['doi']))
            return elements, False

class ACSCitationFormatter(BaseCitationFormatter):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Å—Ç–∏–ª—è ACS (MDPI)"""
    
    def format_reference(self, metadata: Dict[str, Any], for_preview: bool = False) -> Tuple[Any, bool]:
        if not metadata:
            error_message = "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É." if st.session_state.current_language == 'ru' else "Error: Could not format the reference."
            return (error_message, True)
        
        authors_str = ""
        for i, author in enumerate(metadata['authors']):
            given = author['given']
            family = author['family']
            
            initials = given.split()[:2]
            first_initial = initials[0][0] if initials else ''
            second_initial = initials[1][0].upper() if len(initials) > 1 else ''
            
            if second_initial:
                author_str = f"{family}, {first_initial}.{second_initial}."
            else:
                author_str = f"{family}, {first_initial}."
            
            authors_str += author_str
            
            if i < len(metadata['authors']) - 1:
                authors_str += "; "
        
        pages = metadata['pages']
        article_number = metadata['article_number']
        
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–∞–Ω–∏—Ü –≤–º–µ—Å—Ç–æ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ
        if pages:
            if '-' in pages:
                start_page, end_page = pages.split('-')
                start_page = start_page.strip()
                end_page = end_page.strip()
                # –£–±–∏—Ä–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                pages_formatted = f"{start_page}‚Äì{end_page}"
            else:
                pages_formatted = pages
        elif article_number:
            pages_formatted = article_number
        else:
            pages_formatted = ""
        
        journal_name = self.format_journal_name(metadata['journal'])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º DOI –∫–∞–∫ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É
        doi_url = f"https://dx.doi.org/{metadata['doi']}"
        
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –î–æ–±–∞–≤–ª—è–µ–º DOI –ø–æ—Å–ª–µ —Å—Ç—Ä–∞–Ω–∏—Ü —á–µ—Ä–µ–∑ ". "
        acs_ref = f"{authors_str} {metadata['title']}. {journal_name} {metadata['year']}, {metadata['volume']}, {pages_formatted}. {doi_url}"
        acs_ref = re.sub(r'\.\.+', '.', acs_ref)
        
        if for_preview:
            return acs_ref, False
        else:
            elements = []
            elements.append((authors_str, False, False, " ", False, None))
            elements.append((metadata['title'], False, False, ". ", False, None))
            elements.append((journal_name, True, False, " ", False, None))
            elements.append((str(metadata['year']), False, True, ", ", False, None))
            elements.append((metadata['volume'], True, False, ", ", False, None))
            elements.append((pages_formatted, False, False, ". ", False, None))
            # –ò–ó–ú–ï–ù–ï–ù–ò–ï 3: –î–æ–±–∞–≤–ª—è–µ–º DOI –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π
            elements.append((doi_url, False, False, "", True, metadata['doi']))
            return elements, False

class RSCCitationFormatter(BaseCitationFormatter):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Å—Ç–∏–ª—è RSC"""
    
    def format_reference(self, metadata: Dict[str, Any], for_preview: bool = False) -> Tuple[Any, bool]:
        if not metadata:
            error_message = "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É." if st.session_state.current_language == 'ru' else "Error: Could not format the reference."
            return (error_message, True)
        
        authors_str = ""
        for i, author in enumerate(metadata['authors']):
            given = author['given']
            family = author['family']
            
            initials = given.split()[:2]
            first_initial = initials[0][0] if initials else ''
            second_initial = initials[1][0].upper() if len(initials) > 1 else ''
            
            if second_initial:
                author_str = f"{first_initial}.{second_initial}. {family}"
            else:
                author_str = f"{first_initial}. {family}"
            
            authors_str += author_str
            
            if i < len(metadata['authors']) - 1:
                if i == len(metadata['authors']) - 2:
                    authors_str += " and "
                else:
                    authors_str += ", "
        
        pages = metadata['pages']
        article_number = metadata['article_number']
        
        if pages:
            if '-' in pages:
                first_page = pages.split('-')[0].strip()
                pages_formatted = first_page
            else:
                pages_formatted = pages.strip()
        elif article_number:
            pages_formatted = article_number
        else:
            pages_formatted = ""
        
        journal_name = self.format_journal_name(metadata['journal'])
        rsc_ref = f"{authors_str}, {journal_name}, {metadata['year']}, {metadata['volume']}, {pages_formatted}."
        rsc_ref = re.sub(r'\.\.+', '.', rsc_ref)
        
        if for_preview:
            return rsc_ref, False
        else:
            elements = []
            elements.append((authors_str, False, False, ", ", False, None))
            elements.append((journal_name, True, False, ", ", False, None))
            elements.append((str(metadata['year']), False, False, ", ", False, None))
            elements.append((metadata['volume'], False, True, ", ", False, None))
            elements.append((pages_formatted, False, False, ".", False, None))
            return elements, False

class CTACitationFormatter(BaseCitationFormatter):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Å—Ç–∏–ª—è CTA"""
    
    def format_reference(self, metadata: Dict[str, Any], for_preview: bool = False) -> Tuple[Any, bool]:
        if not metadata:
            error_message = "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É." if st.session_state.current_language == 'ru' else "Error: Could not format the reference."
            return (error_message, True)
        
        authors_str = ""
        for i, author in enumerate(metadata['authors']):
            given = author['given']
            family = author['family']
            
            initials = given.split()[:2]
            first_initial = initials[0][0] if initials else ''
            second_initial = initials[1][0].upper() if len(initials) > 1 else ''
            
            if second_initial:
                author_str = f"{family} {first_initial}{second_initial}"
            else:
                author_str = f"{family} {first_initial}"
            
            authors_str += author_str
            
            if i < len(metadata['authors']) - 1:
                authors_str += ", "
        
        pages = metadata['pages']
        article_number = metadata['article_number']
        pages_formatted = self.format_pages(pages, article_number, "cta")
        journal_name = self.format_journal_name(metadata['journal'])
        issue_part = f"({metadata['issue']})" if metadata['issue'] else ""
        
        cta_ref = f"{authors_str}. {metadata['title']}. {journal_name}. {metadata['year']};{metadata['volume']}{issue_part}:{pages_formatted}. doi:{metadata['doi']}"
        
        if for_preview:
            return cta_ref, False
        else:
            elements = []
            elements.append((authors_str, False, False, ". ", False, None))
            elements.append((metadata['title'], False, False, ". ", False, None))
            elements.append((journal_name, True, False, ". ", False, None))
            elements.append((str(metadata['year']), False, False, ";", False, None))
            elements.append((metadata['volume'], False, False, "", False, None))
            if metadata['issue']:
                elements.append((f"({metadata['issue']})", False, False, ":", False, None))
            else:
                elements.append(("", False, False, ":", False, None))
            elements.append((pages_formatted, False, False, ". ", False, None))
            doi_text = f"doi:{metadata['doi']}"
            elements.append((doi_text, False, False, "", True, metadata['doi']))
            return elements, False

class CitationFormatterFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    @staticmethod
    def create_formatter(style_config: Dict[str, Any]) -> BaseCitationFormatter:
        if style_config.get('gost_style', False):
            return GOSTCitationFormatter(style_config)
        elif style_config.get('acs_style', False):
            return ACSCitationFormatter(style_config)
        elif style_config.get('rsc_style', False):
            return RSCCitationFormatter(style_config)
        elif style_config.get('cta_style', False):
            return CTACitationFormatter(style_config)
        else:
            return CustomCitationFormatter(style_config)

class DocumentGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DOCX –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    @staticmethod
    def add_hyperlink(paragraph, text, url):
        part = paragraph.part
        r_id = part.relate_to(url, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink", is_external=True)
        
        hyperlink = OxmlElement('w:hyperlink')
        hyperlink.set(qn('r:id'), r_id)
        
        new_run = OxmlElement('w:r')
        rPr = OxmlElement('w:rPr')
        
        color = OxmlElement('w:color')
        color.set(qn('w:val'), '0000FF')
        rPr.append(color)
        
        underline = OxmlElement('w:u')
        underline.set(qn('w:val'), 'single')
        rPr.append(underline)
        
        new_run.append(rPr)
        new_text = OxmlElement('w:t')
        new_text.text = text
        new_run.append(new_text)
        
        hyperlink.append(new_run)
        paragraph._p.append(hyperlink)
        
        return hyperlink
    
    @staticmethod
    def apply_yellow_background(run):
        shd = OxmlElement('w:shd')
        shd.set(qn('w:fill'), 'FFFF00')
        run._element.get_or_add_rPr().append(shd)
    
    @staticmethod
    def apply_blue_background(run):
        shd = OxmlElement('w:shd')
        shd.set(qn('w:fill'), 'E6F3FF')
        run._element.get_or_add_rPr().append(shd)
    
    @staticmethod
    def apply_red_color(run):
        color = OxmlElement('w:color')
        color.set(qn('w:val'), 'FF0000')
        run._element.get_or_add_rPr().append(color)
    
    @staticmethod
    def generate_document(formatted_refs: List[Tuple[Any, bool, Any]], 
                         statistics: Dict[str, Any],
                         style_config: Dict[str, Any],
                         duplicates_info: Dict[int, int] = None) -> io.BytesIO:
        output_doc = Document()
        output_doc.add_paragraph('Citation Style Construction / ¬© IHTE, https://ihte.ru/ ¬© CTA, https://chimicatechnoacta.ru / developed by daM¬©')
        output_doc.add_paragraph('See short stats after the References section')
        output_doc.add_heading('References', level=1)
        
        DocumentGenerator._add_formatted_references(output_doc, formatted_refs, style_config, duplicates_info)
        DocumentGenerator._add_statistics_section(output_doc, statistics)
        
        output_doc_buffer = io.BytesIO()
        output_doc.save(output_doc_buffer)
        output_doc_buffer.seek(0)
        return output_doc_buffer
    
    @staticmethod
    def _add_formatted_references(doc: Document, 
                                formatted_refs: List[Tuple[Any, bool, Any]], 
                                style_config: Dict[str, Any],
                                duplicates_info: Dict[int, int] = None):
        for i, (elements, is_error, metadata) in enumerate(formatted_refs):
            numbering = style_config['numbering_style']
            
            if numbering == "No numbering":
                prefix = ""
            elif numbering == "1":
                prefix = f"{i + 1} "
            elif numbering == "1.":
                prefix = f"{i + 1}. "
            elif numbering == "1)":
                prefix = f"{i + 1}) "
            elif numbering == "(1)":
                prefix = f"({i + 1}) "
            elif numbering == "[1]":
                prefix = f"[{i + 1}] "
            else:
                prefix = f"{i + 1}. "
            
            para = doc.add_paragraph(prefix)
            
            if is_error:
                run = para.add_run(str(elements))
                DocumentGenerator.apply_yellow_background(run)
            elif duplicates_info and i in duplicates_info:
                original_index = duplicates_info[i] + 1
                duplicate_note = get_text('duplicate_reference').format(original_index)
                
                if isinstance(elements, str):
                    run = para.add_run(elements)
                    DocumentGenerator.apply_blue_background(run)
                    para.add_run(f" - {duplicate_note}").italic = True
                else:
                    for j, (value, italic, bold, separator, is_doi_hyperlink, doi_value) in enumerate(elements):
                        if is_doi_hyperlink and doi_value:
                            DocumentGenerator.add_hyperlink(para, value, f"https://doi.org/{doi_value}")
                        else:
                            run = para.add_run(value)
                            if italic:
                                run.font.italic = True
                            if bold:
                                run.font.bold = True
                            DocumentGenerator.apply_blue_background(run)
                        
                        if separator and j < len(elements) - 1:
                            para.add_run(separator)
                    
                    para.add_run(f" - {duplicate_note}").italic = True
            else:
                if metadata is None:
                    run = para.add_run(str(elements))
                    run.font.italic = True
                else:
                    for j, (value, italic, bold, separator, is_doi_hyperlink, doi_value) in enumerate(elements):
                        if is_doi_hyperlink and doi_value:
                            DocumentGenerator.add_hyperlink(para, value, f"https://doi.org/{doi_value}")
                        else:
                            run = para.add_run(value)
                            if italic:
                                run.font.italic = True
                            if bold:
                                run.font.bold = True
                        
                        if separator and j < len(elements) - 1:
                            para.add_run(separator)
                    
                    if style_config['final_punctuation'] and not is_error:
                        para.add_run(".")
    
    @staticmethod
    def _add_statistics_section(doc: Document, statistics: Dict[str, Any]):
        doc.add_heading('Stats', level=1)
        
        doc.add_heading('Journal Frequency', level=2)
        journal_table = doc.add_table(rows=1, cols=3)
        journal_table.style = 'Table Grid'
        
        hdr_cells = journal_table.rows[0].cells
        hdr_cells[0].text = 'Journal Name'
        hdr_cells[1].text = 'Count'
        hdr_cells[2].text = 'Percentage (%)'
        
        for journal_stat in statistics['journal_stats']:
            row_cells = journal_table.add_row().cells
            row_cells[0].text = journal_stat['journal']
            row_cells[1].text = str(journal_stat['count'])
            row_cells[2].text = str(journal_stat['percentage'])
        
        doc.add_paragraph()
        
        doc.add_heading('Year Distribution', level=2)
        
        if statistics['needs_more_recent_references']:
            warning_para = doc.add_paragraph()
            warning_run = warning_para.add_run("To improve the relevance and significance of the research, consider including more recent references published within the last 3-4 years")
            DocumentGenerator.apply_red_color(warning_run)
            doc.add_paragraph()
        
        year_table = doc.add_table(rows=1, cols=3)
        year_table.style = 'Table Grid'
        
        hdr_cells = year_table.rows[0].cells
        hdr_cells[0].text = 'Year'
        hdr_cells[1].text = 'Count'
        hdr_cells[2].text = 'Percentage (%)'
        
        for year_stat in statistics['year_stats']:
            row_cells = year_table.add_row().cells
            row_cells[0].text = str(year_stat['year'])
            row_cells[1].text = str(year_stat['count'])
            row_cells[2].text = str(year_stat['percentage'])
        
        doc.add_paragraph()
        
        doc.add_heading('Author Distribution', level=2)
        
        if statistics['has_frequent_author']:
            warning_para = doc.add_paragraph()
            warning_run = warning_para.add_run("The author(s) are referenced frequently. Either reduce the number of references to the author(s), or expand the reference list to include more sources")
            DocumentGenerator.apply_red_color(warning_run)
            doc.add_paragraph()
        
        author_table = doc.add_table(rows=1, cols=3)
        author_table.style = 'Table Grid'
        
        hdr_cells = author_table.rows[0].cells
        hdr_cells[0].text = 'Author'
        hdr_cells[1].text = 'Count'
        hdr_cells[2].text = 'Percentage (%)'
        
        for author_stat in statistics['author_stats']:
            row_cells = author_table.add_row().cells
            row_cells[0].text = author_stat['author']
            row_cells[1].text = str(author_stat['count'])
            row_cells[2].text = str(author_stat['percentage'])

# –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ DOI
class DOIProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DOI"""
    
    def __init__(self):
        self.cache = doi_cache
        self.works = works
    
    def find_doi_enhanced(self, reference: str) -> Optional[str]:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ DOI —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        if self._is_section_header(reference):
            return None
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü–æ–∏—Å–∫ —è–≤–Ω–æ–≥–æ DOI
        explicit_doi = self._find_explicit_doi(reference)
        if explicit_doi:
            logger.info(f"Found explicit DOI: {explicit_doi}")
            return explicit_doi
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ–∏—Å–∫ –ø–æ –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º –≤ Crossref
        bibliographic_doi = self._find_bibliographic_doi(reference)
        if bibliographic_doi:
            logger.info(f"Found bibliographic DOI: {bibliographic_doi}")
            return bibliographic_doi
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ OpenAlex (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω)
        openalex_doi = self._find_openalex_doi(reference)
        if openalex_doi:
            logger.info(f"Found OpenAlex DOI: {openalex_doi}")
            return openalex_doi
        
        logger.warning(f"No DOI found for reference: {reference[:100]}...")
        return None
    
    def _is_section_header(self, text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Ä–∞–∑–¥–µ–ª–∞"""
        text_upper = text.upper().strip()
        section_patterns = [
            r'^NOTES?\s+AND\s+REFERENCES?$',
            r'^REFERENCES?$',
            r'^BIBLIOGRAPHY$',
            r'^LITERATURE$',
            r'^WORKS?\s+CITED$',
            r'^SOURCES?$',
            r'^CHAPTER\s+\d+$',
            r'^SECTION\s+\d+$',
            r'^PART\s+\d+$'
        ]
        
        for pattern in section_patterns:
            if re.search(pattern, text_upper):
                return True
        return False
    
    def _find_explicit_doi(self, reference: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ —è–≤–Ω–æ–≥–æ DOI –≤ —Ç–µ–∫—Å—Ç–µ"""
        doi_patterns = [
            r'https?://doi\.org/(10\.\d{4,9}/[-._;()/:A-Za-z0-9]+)',
            r'doi:\s*(10\.\d{4,9}/[-._;()/:A-Za-z0-9]+)',
            r'DOI:\s*(10\.\d{4,9}/[-._;()/:A-Za-z0-9]+)',
            r'\b(10\.\d{4,9}/[-._;()/:A-Za-z0-9]+)\b'
        ]
        
        for pattern in doi_patterns:
            match = re.search(pattern, reference, re.IGNORECASE)
            if match:
                doi = match.group(1).rstrip('.,;:')
                return doi
        
        clean_ref = reference.strip()
        if re.match(r'^(doi:|DOI:)?\s*10\.\d{4,9}/[-._;()/:A-Za-z0-9]+\s*$', clean_ref, re.IGNORECASE):
            doi_match = re.search(r'(10\.\d{4,9}/[-._;()/:A-Za-z0-9]+)', clean_ref)
            if doi_match:
                return doi_match.group(1).rstrip('.,;:')
        
        return None
    
    def _find_bibliographic_doi(self, reference: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ DOI –ø–æ –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º"""
        clean_ref = re.sub(r'\s*(https?://doi\.org/|doi:|DOI:)\s*[^\s,;]+', '', reference, flags=re.IGNORECASE)
        clean_ref = clean_ref.strip()
        
        if len(clean_ref) < 30:
            return None
        
        try:
            query = self.works.query(bibliographic=clean_ref).sort('relevance').order('desc')
            for result in query:
                if 'DOI' in result:
                    return result['DOI']
        except Exception as e:
            logger.error(f"Bibliographic search error for '{clean_ref}': {e}")
        
        return None
    
    def _find_openalex_doi(self, reference: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ DOI —á–µ—Ä–µ–∑ OpenAlex API"""
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAlex
        # OpenAlex –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API —Å —Ö–æ—Ä–æ—à–∏–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
        return None

    def extract_metadata_with_cache(self, doi: str) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        cached_metadata = self.cache.get(doi)
        if cached_metadata:
            logger.info(f"Cache hit for DOI: {doi}")
            return cached_metadata
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ API
        logger.info(f"Cache miss for DOI: {doi}, fetching from API")
        metadata = self._extract_metadata_from_api(doi)
        
        if metadata:
            self.cache.set(doi, metadata)
        
        return metadata
    
    def _extract_metadata_from_api(self, doi: str) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ Crossref API"""
        try:
            result = self.works.doi(doi)
            if not result:
                return None
            
            authors = result.get('author', [])
            author_list = []
            for author in authors:
                given_name = author.get('given', '')
                family_name = self._normalize_name(author.get('family', ''))
                author_list.append({
                    'given': given_name,
                    'family': family_name
                })
            
            title = ''
            if 'title' in result and result['title']:
                title = self._clean_text(result['title'][0])
                title = re.sub(r'</?sub>|</?i>|</?SUB>|</?I>', '', title, flags=re.IGNORECASE)
            
            journal = ''
            if 'container-title' in result and result['container-title']:
                journal = self._clean_text(result['container-title'][0])
            
            year = None
            if 'published' in result and 'date-parts' in result['published']:
                date_parts = result['published']['date-parts']
                if date_parts and date_parts[0]:
                    year = date_parts[0][0]
            
            volume = result.get('volume', '')
            issue = result.get('issue', '')
            pages = result.get('page', '')
            article_number = result.get('article-number', '')
            
            metadata = {
                'authors': author_list,
                'title': title,
                'journal': journal,
                'year': year,
                'volume': volume,
                'issue': issue,
                'pages': pages,
                'article_number': article_number,
                'doi': doi,
                'original_doi': doi
            }
            
            return metadata
            
        except Exception as e:
            logger.error(f"Error extracting metadata for DOI {doi}: {e}")
            return None
    
    def _normalize_name(self, name: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏–º—è –∞–≤—Ç–æ—Ä–∞"""
        if not name:
            return ''
        
        if '-' in name or "'" in name or '‚Äô' in name:
            parts = re.split(r'([-\'‚Äô])', name)
            normalized_parts = []
            
            for i, part in enumerate(parts):
                if part in ['-', "'", '‚Äô']:
                    normalized_parts.append(part)
                else:
                    if part:
                        normalized_parts.append(part[0].upper() + part[1:].lower() if len(part) > 1 else part.upper())
            
            return ''.join(normalized_parts)
        else:
            if len(name) > 1:
                return name[0].upper() + name[1:].lower()
            else:
                return name.upper()
    
    def _clean_text(self, text: str) -> str:
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç HTML —Ç–µ–≥–æ–≤ –∏ entities"""
        if not text:
            return ""
        
        text = re.sub(r'<[^>]+>', '', text)
        text = html.unescape(text)
        text = re.sub(r'&[^;]+;', '', text)
        return text.strip()

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
class ReferenceProcessor:
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫"""
    
    def __init__(self):
        self.doi_processor = DOIProcessor()
        self.progress_manager = ProgressManager()
        self.validator = StyleValidator()
    
    def process_references(self, references: List[str], style_config: Dict, 
                         progress_container, status_container) -> Tuple[List, io.BytesIO, int, int, Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        is_valid, validation_messages = self.validator.validate_references_count(references)
        for msg in validation_messages:
            if "error" in msg.lower():
                st.error(msg)
            else:
                st.warning(msg)
        
        if not is_valid:
            return [], io.BytesIO(), 0, 0, {}
        
        doi_list = []
        formatted_refs = []
        doi_found_count = 0
        doi_not_found_count = 0
        
        # –°–±–æ—Ä DOI –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        valid_dois = []
        reference_doi_map = {}
        
        for i, ref in enumerate(references):
            if self.doi_processor._is_section_header(ref):
                doi_list.append(f"{ref} [SECTION HEADER - SKIPPED]")
                formatted_refs.append((ref, False, None))
                continue
                
            doi = self.doi_processor.find_doi_enhanced(ref)
            if doi:
                valid_dois.append(doi)
                reference_doi_map[i] = doi
                doi_list.append(doi)
            else:
                error_msg = f"{ref}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –¥–æ–±–∞–≤—å—Ç–µ DOI –≤—Ä—É—á–Ω—É—é." if st.session_state.current_language == 'ru' else f"{ref}\nPlease check this source and insert the DOI manually."
                doi_list.append(error_msg)
                formatted_refs.append((error_msg, True, None))
                doi_not_found_count += 1
        
        # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ DOI
        if valid_dois:
            self._process_doi_batch(valid_dois, reference_doi_map, references, 
                                  formatted_refs, doi_list, style_config,
                                  progress_container, status_container)
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        doi_found_count = len([ref for ref in formatted_refs if not ref[1] and ref[2]])
        
        # –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        duplicates_info = self._find_duplicates(formatted_refs)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ TXT —Ñ–∞–π–ª–∞
        txt_buffer = self._create_txt_file(doi_list)
        
        return formatted_refs, txt_buffer, doi_found_count, doi_not_found_count, duplicates_info
    
    def _process_doi_batch(self, valid_dois, reference_doi_map, references, 
                          formatted_refs, doi_list, style_config,
                          progress_container, status_container):
        """–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ DOI"""
        status_container.info(get_text('batch_processing'))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_manager.start_processing(len(valid_dois))
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω
        progress_bar = progress_container.progress(0)
        status_display = status_container.empty()
        
        # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        metadata_results = self._extract_metadata_batch(valid_dois, progress_bar, status_display)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        doi_to_metadata = dict(zip(valid_dois, metadata_results))
        
        for i, ref in enumerate(references):
            if i in reference_doi_map:
                doi = reference_doi_map[i]
                metadata = doi_to_metadata.get(doi)
                
                if metadata:
                    formatted_ref, is_error = self._format_reference(metadata, style_config)
                    formatted_refs.append((formatted_ref, is_error, metadata))
                else:
                    error_msg = self._create_error_message(ref, st.session_state.current_language)
                    doi_list[doi_list.index(doi)] = error_msg
                    formatted_refs.append((error_msg, True, None))
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self._update_progress_display(progress_bar, status_display, len(valid_dois), len(valid_dois), 0)
    
    def _extract_metadata_batch(self, doi_list, progress_bar, status_display) -> List:
        """–ü–∞–∫–µ—Ç–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
        results = [None] * len(doi_list)
        
        with concurrent.futures.ThreadPoolExecutor(max_workers=Config.CROSSREF_WORKERS) as executor:
            future_to_index = {
                executor.submit(self.doi_processor.extract_metadata_with_cache, doi): i 
                for i, doi in enumerate(doi_list)
            }
            
            completed = 0
            for future in concurrent.futures.as_completed(future_to_index):
                index = future_to_index[future]
                try:
                    result = future.result(timeout=Config.REQUEST_TIMEOUT)
                    results[index] = result
                except Exception as e:
                    logger.error(f"Error processing DOI at index {index}: {e}")
                    results[index] = None
                
                completed += 1
                self._update_progress_display(progress_bar, status_display, completed, len(doi_list), 0)
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        failed_indices = [i for i, result in enumerate(results) if result is None]
        if failed_indices:
            logger.info(f"Retrying {len(failed_indices)} failed DOI requests")
            self._retry_failed_requests(failed_indices, doi_list, results, progress_bar, status_display)
        
        return results
    
    def _retry_failed_requests(self, failed_indices, doi_list, results, progress_bar, status_display):
        """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        completed = len(doi_list) - len(failed_indices)
        
        with concurrent.futures.ThreadPoolExecutor(max_workers=Config.CROSSREF_RETRY_WORKERS) as executor:
            retry_futures = {}
            for index in failed_indices:
                doi = doi_list[index]
                future = executor.submit(self.doi_processor.extract_metadata_with_cache, doi)
                retry_futures[future] = index
            
            for future in concurrent.futures.as_completed(retry_futures):
                index = retry_futures[future]
                try:
                    result = future.result(timeout=Config.REQUEST_TIMEOUT)
                    results[index] = result
                except Exception as e:
                    logger.error(f"Error in retry processing DOI at index {index}: {e}")
                    results[index] = None
                
                completed += 1
                self._update_progress_display(progress_bar, status_display, completed, len(doi_list), len(failed_indices))
    
    def _update_progress_display(self, progress_bar, status_display, completed, total, errors):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        progress_info = self.progress_manager.get_progress_info()
        progress_ratio = completed / total if total > 0 else 0
        progress_color = self.progress_manager.get_progress_color(progress_ratio)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar.progress(progress_ratio)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ —Å —Ü–≤–µ—Ç–æ–º
        progress_bar.markdown(f"""
            <style>
                .stProgress > div > div > div > div {{
                    background-color: {progress_color};
                }}
            </style>
        """, unsafe_allow_html=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
        status_text = f"Processed: {completed}/{total} | Errors: {errors}"
        if progress_info['time_remaining']:
            mins_remaining = int(progress_info['time_remaining'] / 60)
            status_text += f" | ETA: {mins_remaining} min"
        
        status_display.text(status_text)
    
    def _format_reference(self, metadata: Dict, style_config: Dict) -> Tuple[Any, bool]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏"""
        formatter = CitationFormatterFactory.create_formatter(style_config)
        return formatter.format_reference(metadata, False)
    
    def _find_duplicates(self, formatted_refs: List) -> Dict[int, int]:
        """–ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å—Å—ã–ª–æ–∫"""
        seen_hashes = {}
        duplicates_info = {}
        
        for i, (elements, is_error, metadata) in enumerate(formatted_refs):
            if is_error or not metadata:
                continue
                
            ref_hash = self._generate_reference_hash(metadata)
            if not ref_hash:
                continue
                
            if ref_hash in seen_hashes:
                duplicates_info[i] = seen_hashes[ref_hash]
            else:
                seen_hashes[ref_hash] = i
        
        return duplicates_info
    
    def _generate_reference_hash(self, metadata: Dict) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        if not metadata:
            return None
        
        hash_string = ""
        
        if metadata.get('authors'):
            authors_hash = "|".join(sorted([author.get('family', '').lower() for author in metadata['authors']]))
            hash_string += authors_hash + "||"
        
        title = metadata.get('title', '')[:50].lower()
        hash_string += title + "||"
        
        hash_string += (metadata.get('journal', '') + "||").lower()
        hash_string += str(metadata.get('year', '')) + "||"
        hash_string += metadata.get('volume', '') + "||"
        hash_string += metadata.get('pages', '') + "||"
        hash_string += self._normalize_doi(metadata.get('doi', ''))
        
        return hashlib.md5(hash_string.encode('utf-8')).hexdigest()
    
    def _normalize_doi(self, doi: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è DOI"""
        if not doi:
            return ""
        return re.sub(r'^(https?://doi\.org/|doi:|DOI:)', '', doi, flags=re.IGNORECASE).lower().strip()
    
    def _create_error_message(self, ref: str, language: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        if language == 'ru':
            return f"{ref}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –¥–æ–±–∞–≤—å—Ç–µ DOI –≤—Ä—É—á–Ω—É—é."
        else:
            return f"{ref}\nPlease check this source and insert the DOI manually."
    
    def _create_txt_file(self, doi_list: List[str]) -> io.BytesIO:
        """–°–æ–∑–¥–∞–Ω–∏–µ TXT —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º DOI"""
        output_txt_buffer = io.StringIO()
        for doi in doi_list:
            output_txt_buffer.write(f"{doi}\n")
        output_txt_buffer.seek(0)
        return io.BytesIO(output_txt_buffer.getvalue().encode('utf-8'))

# UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
class UIComponents:
    """–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    def __init__(self):
        self.user_prefs = UserPreferencesManager()
    
    def render_header(self):
        """–†–µ–Ω–¥–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ —Å –≤—ã–ø–∞–¥–∞—é—â–∏–º –º–µ–Ω—é"""
        col_title, col_lang, col_theme, col_view, col_menu = st.columns([2, 1.5, 1.5, 1.2, 0.8])
    
        with col_title:
            st.title(get_text('header'))
    
        with col_lang:
            self._render_language_selector()
    
        with col_theme:
            self._render_theme_selector()
    
        with col_view:
            self._render_view_selector()
    
        with col_menu:
            # –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            with st.popover("‚öôÔ∏è"):
                st.markdown("**Actions**")
                self._render_clear_button()
                st.markdown("---")
                self._render_back_button()
    
    def _render_language_selector(self):
        """–†–µ–Ω–¥–µ—Ä —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —è–∑—ã–∫–∞"""
        languages = [
            ('English', 'en'),
            ('–†—É—Å—Å–∫–∏–π', 'ru'), 
            ('Deutsch', 'de'),
            ('Espa√±ol', 'es'),
            ('Italiano', 'it'),
            ('Êó•Êú¨Ë™û', 'ja'),
            ('‰∏≠Êñá', 'zh')
        ]
        
        current_lang = st.session_state.current_language
        current_lang_name = next((name for name, code in languages if code == current_lang), 'English')
        
        selected_language = st.selectbox(
            get_text('language'),
            languages,
            format_func=lambda x: x[0],
            index=next(i for i, (_, code) in enumerate(languages) if code == current_lang),
            key="language_selector"
        )
        
        if selected_language[1] != st.session_state.current_language:
            self._save_current_state()
            st.session_state.current_language = selected_language[1]
            self._save_user_preferences()
            st.rerun()
    
    def _render_theme_selector(self):
        """–†–µ–Ω–¥–µ—Ä —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ç–µ–º—ã"""
        themes = [
            (get_text('light_theme'), 'light'),
            (get_text('dark_theme'), 'dark')
        ]
        
        selected_theme = st.radio(
            get_text('theme_selector'),
            themes,
            format_func=lambda x: x[0],
            index=0 if st.session_state.current_theme == 'light' else 1,
            key="theme_selector",
            horizontal=True
        )
        
        if selected_theme[1] != st.session_state.current_theme:
            self._save_current_state()
            st.session_state.current_theme = selected_theme[1]
            self._save_user_preferences()
            st.rerun()
    
    def _render_view_selector(self):
        """–†–µ–Ω–¥–µ—Ä –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –≤–∏–¥–∞"""
        mobile_view = st.session_state.mobile_view
        view_label = get_text('mobile_view') if mobile_view else get_text('desktop_view')
        
        if st.button(view_label, key="view_selector", use_container_width=True):
            self._save_current_state()
            st.session_state.mobile_view = not st.session_state.mobile_view
            self._save_user_preferences()
            st.rerun()
    
    def _render_clear_button(self):
        """–†–µ–Ω–¥–µ—Ä –∫–Ω–æ–ø–∫–∏ Clear —Å –∏–∫–æ–Ω–∫–æ–π"""
        if st.button("üóëÔ∏è", help="Clear all settings", key="clear_button", use_container_width=True):
            self._clear_all_settings()

    def _render_back_button(self):
        """–†–µ–Ω–¥–µ—Ä –∫–Ω–æ–ø–∫–∏ Back —Å –∏–∫–æ–Ω–∫–æ–π"""
        if st.session_state.previous_states:
            if st.button("‚Ü©Ô∏è", help="Back to previous state", key="back_button", use_container_width=True):
                self._restore_previous_state()
    
    def _save_current_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ Back"""
        if 'previous_states' not in st.session_state:
            st.session_state.previous_states = []
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        current_state = {
            'current_language': st.session_state.current_language,
            'current_theme': st.session_state.current_theme,
            'mobile_view': st.session_state.mobile_view,
            'num': st.session_state.num,
            'auth': st.session_state.auth,
            'sep': st.session_state.sep,
            'etal': st.session_state.etal,
            'doi': st.session_state.doi,
            'doilink': st.session_state.doilink,
            'page': st.session_state.page,
            'punct': st.session_state.punct,
            'journal_style': st.session_state.journal_style,
            'use_and_checkbox': st.session_state.use_and_checkbox,
            'use_ampersand_checkbox': st.session_state.use_ampersand_checkbox,
            'gost_style': st.session_state.gost_style,
            'acs_style': st.session_state.acs_style,
            'rsc_style': st.session_state.rsc_style,
            'cta_style': st.session_state.cta_style,
            'timestamp': time.time()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        for i in range(8):
            for prop in ['el', 'it', 'bd', 'pr', 'sp']:
                key = f"{prop}{i}"
                current_state[key] = st.session_state[key]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–µ–∫ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
        st.session_state.previous_states.append(current_state)
        if len(st.session_state.previous_states) > st.session_state.max_undo_steps:
            st.session_state.previous_states.pop(0)
    
    def _clear_all_settings(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self._save_current_state()
        
        # –°–±—Ä–æ—Å –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        st.session_state.num = "No numbering"
        st.session_state.auth = "AA Smith"
        st.session_state.sep = ", "
        st.session_state.etal = 0
        st.session_state.doi = "10.10/xxx"
        st.session_state.doilink = True
        st.session_state.page = "122‚Äì128"
        st.session_state.punct = ""
        st.session_state.journal_style = '{Full Journal Name}'
        st.session_state.use_and_checkbox = False
        st.session_state.use_ampersand_checkbox = False
        
        # –°–±—Ä–æ—Å —Å—Ç–∏–ª–µ–π
        st.session_state.gost_style = False
        st.session_state.acs_style = False
        st.session_state.rsc_style = False
        st.session_state.cta_style = False
        
        # –°–±—Ä–æ—Å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        for i in range(8):
            st.session_state[f"el{i}"] = ""
            st.session_state[f"it{i}"] = False
            st.session_state[f"bd{i}"] = False
            st.session_state[f"pr{i}"] = False
            st.session_state[f"sp{i}"] = ". "
        
        # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
        st.session_state.output_text_value = ""
        st.session_state.show_results = False
        st.session_state.download_data = {}
        
        st.rerun()
    
    def _restore_previous_state(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if not st.session_state.previous_states:
            st.warning("No previous state to restore")
            return
        
        previous_state = st.session_state.previous_states.pop()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        for key, value in previous_state.items():
            if key in st.session_state and key != 'timestamp':
                st.session_state[key] = value
        
        st.rerun()
    
    def _save_user_preferences(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
        ip = self.user_prefs.get_user_ip()
        preferences = {
            'language': st.session_state.current_language,
            'theme': st.session_state.current_theme,
            'mobile_view': st.session_state.mobile_view
        }
        self.user_prefs.save_preferences(ip, preferences)
    
    def load_user_preferences(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
        if not st.session_state.user_prefs_loaded:
            ip = self.user_prefs.get_user_ip()
            prefs = self.user_prefs.get_preferences(ip)
            
            st.session_state.current_language = prefs['language']
            st.session_state.current_theme = prefs['theme'] 
            st.session_state.mobile_view = prefs['mobile_view']
            st.session_state.user_prefs_loaded = True
    
    def apply_theme_styles(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π —Ç–µ–º—ã"""
        theme = Config.THEMES[st.session_state.current_theme]
        
        st.markdown(f"""
            <style>
            .block-container {{
                padding: 0.2rem;
                background-color: {theme['background']};
                color: {theme['text']};
                font-family: {theme['font']};
            }}
            .stSelectbox, .stTextInput, .stNumberInput, .stCheckbox, .stRadio, .stFileUploader, .stTextArea {{
                margin-bottom: 0.02rem;
                background-color: {theme['secondaryBackground']};
                border: 1px solid {theme['border']};
                border-radius: 0.25rem;
            }}
            .stTextArea {{ 
                height: 40px !important; 
                font-size: 0.7rem; 
                background-color: {theme['secondaryBackground']};
                color: {theme['text']};
            }}
            .stButton > button {{ 
                width: 100%; 
                padding: 0.05rem; 
                font-size: 0.7rem; 
                margin: 0.02rem; 
                background-color: {theme['primary']};
                color: white;
                border: none;
                border-radius: 0.25rem;
            }}
            h1, h2, h3 {{
                color: {theme['text']} !important;
            }}
            h1 {{ font-size: 1.0rem; margin-bottom: 0.05rem; }}
            h2 {{ font-size: 0.9rem; margin-bottom: 0.05rem; }}
            h3 {{ font-size: 0.8rem; margin-bottom: 0.02rem; }}
            label {{ 
                font-size: 0.65rem !important; 
                color: {theme['text']} !important;
            }}
            .stMarkdown {{ 
                font-size: 0.65rem; 
                color: {theme['text']};
            }}
            .stCheckbox > label {{ 
                font-size: 0.6rem; 
                color: {theme['text']};
            }}
            .stRadio > label {{ 
                font-size: 0.65rem; 
                color: {theme['text']};
            }}
            .stDownloadButton > button {{ 
                font-size: 0.7rem; 
                padding: 0.05rem; 
                margin: 0.02rem; 
                background-color: {theme['primary']};
                color: white;
                border: none;
                border-radius: 0.25rem;
            }}
            .element-row {{ margin: 0.01rem; padding: 0.01rem; }}
            .processing-header {{ font-size: 0.8rem; font-weight: bold; margin-bottom: 0.1rem; }}
            .processing-status {{ font-size: 0.7rem; margin-bottom: 0.05rem; }}
            .compact-row {{ margin-bottom: 0.1rem; }}
            .guide-text {{ font-size: 0.55rem !important; line-height: 1.1; margin-bottom: 0.1rem; }}
            .guide-title {{ font-size: 0.7rem !important; font-weight: bold; margin-bottom: 0.1rem; }}
            .guide-step {{ font-size: 0.55rem !important; line-height: 1.1; margin-bottom: 0.1rem; }}
            .guide-note {{ font-size: 0.55rem !important; font-style: italic; line-height: 1.1; margin-bottom: 0.1rem; margin-left: 0.5rem; }}
            .card {{
                background-color: {theme['cardBackground']};
                padding: 0.5rem;
                border-radius: 0.5rem;
                border: 1px solid {theme['border']};
                margin-bottom: 0.5rem;
            }}
            
            /* –ú–æ–±–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ */
            @media (max-width: 768px) {{
                .block-container {{ padding: 0.1rem; }}
                .stSelectbox, .stTextInput, .stNumberInput {{ 
                    font-size: 0.8rem !important;
                    margin-bottom: 0.1rem;
                }}
                .stButton > button {{
                    font-size: 0.8rem !important;
                    padding: 0.3rem !important;
                    margin: 0.1rem !important;
                }}
                .stCheckbox > label {{
                    font-size: 0.7rem !important;
                }}
                h1 {{ font-size: 1.1rem !important; }}
                h2 {{ font-size: 1.0rem !important; }}
                h3 {{ font-size: 0.9rem !important; }}
            }}
            
            /* –î–µ—Å–∫—Ç–æ–ø —Å—Ç–∏–ª–∏ */
            @media (min-width: 769px) {{
                .mobile-only {{ display: none; }}
            }}
            
            /* –ú–æ–±–∏–ª—å–Ω—ã–µ —Ç–æ–ª—å–∫–æ */
            @media (max-width: 768px) {{
                .desktop-only {{ display: none; }}
            }}
            </style>
        """, unsafe_allow_html=True)

    def render_style_presets(self):
        """–†–µ–Ω–¥–µ—Ä –ø—Ä–µ—Å–µ—Ç–æ–≤ —Å—Ç–∏–ª–µ–π"""
        col_preset, col_info = st.columns([3, 1])
        with col_preset:
            st.markdown(f"**{get_text('style_presets')}**")
        with col_info:
            st.markdown(f"<span title='{get_text('style_preset_tooltip')}'>‚ÑπÔ∏è</span>", unsafe_allow_html=True)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å—Ç–∏–ª–µ–π
        if st.session_state.mobile_view:
            # –ú–æ–±–∏–ª—å–Ω—ã–π –≤–∏–¥ - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            if st.session_state.current_language == 'ru':
                # –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ì–û–°–¢
                if st.button(get_text('gost_button'), use_container_width=True, key="gost_button"):
                    self._apply_gost_style()
            # –î–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
            if st.button(get_text('acs_button'), use_container_width=True, key="acs_button"):
                self._apply_acs_style()
            if st.button(get_text('rsc_button'), use_container_width=True, key="rsc_button"):
                self._apply_rsc_style()
            if st.button(get_text('cta_button'), use_container_width=True, key="cta_button"):
                self._apply_cta_style()
        else:
            # –î–µ—Å–∫—Ç–æ–ø –≤–∏–¥ - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            if st.session_state.current_language == 'ru':
                # –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ 4 –∫–Ω–æ–ø–∫–∏
                col_gost, col_acs, col_rsc, col_cta = st.columns(4)
                
                with col_gost:
                    if st.button(get_text('gost_button'), use_container_width=True, key="gost_button"):
                        self._apply_gost_style()
                
                with col_acs:
                    if st.button(get_text('acs_button'), use_container_width=True, key="acs_button"):
                        self._apply_acs_style()
                
                with col_rsc:
                    if st.button(get_text('rsc_button'), use_container_width=True, key="rsc_button"):
                        self._apply_rsc_style()
                
                with col_cta:
                    if st.button(get_text('cta_button'), use_container_width=True, key="cta_button"):
                        self._apply_cta_style()
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 3 –∫–Ω–æ–ø–∫–∏ (–±–µ–∑ –ì–û–°–¢)
                col_acs, col_rsc, col_cta = st.columns(3)
                
                with col_acs:
                    if st.button(get_text('acs_button'), use_container_width=True, key="acs_button"):
                        self._apply_acs_style()
                
                with col_rsc:
                    if st.button(get_text('rsc_button'), use_container_width=True, key="rsc_button"):
                        self._apply_rsc_style()
                
                with col_cta:
                    if st.button(get_text('cta_button'), use_container_width=True, key="cta_button"):
                        self._apply_cta_style()
    
    def _apply_gost_style(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è –ì–û–°–¢ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞)"""
        def apply_gost_callback():
            self._save_current_state()
            st.session_state.num = "No numbering"
            st.session_state.auth = "Smith AA"  # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∞–≤—Ç–æ—Ä–æ–≤
            st.session_state.sep = ", "
            st.session_state.etal = 0
            st.session_state.use_and_checkbox = False
            st.session_state.use_ampersand_checkbox = False
            st.session_state.doi = "https://dx.doi.org/10.10/xxx"
            st.session_state.doilink = True
            st.session_state.page = "122-128"  # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–∞–Ω–∏—Ü
            st.session_state.punct = ""
            st.session_state.journal_style = "{Full Journal Name}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            
            for i in range(8):
                st.session_state[f"el{i}"] = ""
                st.session_state[f"it{i}"] = False
                st.session_state[f"bd{i}"] = False
                st.session_state[f"pr{i}"] = False
                st.session_state[f"sp{i}"] = ". "
            
            st.session_state.gost_style = True
            st.session_state.acs_style = False
            st.session_state.rsc_style = False
            st.session_state.cta_style = False
            st.session_state.style_applied = True
        
        # –í—ã–∑—ã–≤–∞–µ–º callback –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        apply_gost_callback()
        st.rerun()
    
    def _apply_acs_style(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è ACS"""
        def apply_acs_callback():
            self._save_current_state()
            st.session_state.num = "No numbering"
            st.session_state.auth = "Smith, A.A."
            st.session_state.sep = "; "
            st.session_state.etal = 0
            st.session_state.use_and_checkbox = False
            st.session_state.use_ampersand_checkbox = False
            st.session_state.doi = "10.10/xxx"
            st.session_state.doilink = True
            st.session_state.page = "122‚Äì128"
            st.session_state.punct = "."
            st.session_state.journal_style = "{J. Abbr.}"
            
            for i in range(8):
                st.session_state[f"el{i}"] = ""
                st.session_state[f"it{i}"] = False
                st.session_state[f"bd{i}"] = False
                st.session_state[f"pr{i}"] = False
                st.session_state[f"sp{i}"] = ". "
            
            st.session_state.gost_style = False
            st.session_state.acs_style = True
            st.session_state.rsc_style = False
            st.session_state.cta_style = False
            st.session_state.style_applied = True
        
        apply_acs_callback()
        st.rerun()
    
    def _apply_rsc_style(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è RSC"""
        def apply_rsc_callback():
            self._save_current_state()
            st.session_state.num = "No numbering"
            st.session_state.auth = "A.A. Smith"
            st.session_state.sep = ", "
            st.session_state.etal = 0
            st.session_state.use_and_checkbox = True
            st.session_state.use_ampersand_checkbox = False
            st.session_state.doi = "10.10/xxx"
            st.session_state.doilink = True
            st.session_state.page = "122"
            st.session_state.punct = "."
            st.session_state.journal_style = "{J. Abbr.}"
            
            for i in range(8):
                st.session_state[f"el{i}"] = ""
                st.session_state[f"it{i}"] = False
                st.session_state[f"bd{i}"] = False
                st.session_state[f"pr{i}"] = False
                st.session_state[f"sp{i}"] = ". "
            
            st.session_state.gost_style = False
            st.session_state.acs_style = False
            st.session_state.rsc_style = True
            st.session_state.cta_style = False
            st.session_state.style_applied = True
        
        apply_rsc_callback()
        st.rerun()
    
    def _apply_cta_style(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è CTA"""
        def apply_cta_callback():
            self._save_current_state()
            st.session_state.num = "No numbering"
            st.session_state.auth = "Smith AA"
            st.session_state.sep = ", "
            st.session_state.etal = 0
            st.session_state.use_and_checkbox = False
            st.session_state.use_ampersand_checkbox = False
            st.session_state.doi = "doi:10.10/xxx"
            st.session_state.doilink = True
            st.session_state.page = "122‚Äì8"
            st.session_state.punct = ""
            st.session_state.journal_style = "{J Abbr}"
            
            for i in range(8):
                st.session_state[f"el{i}"] = ""
                st.session_state[f"it{i}"] = False
                st.session_state[f"bd{i}"] = False
                st.session_state[f"pr{i}"] = False
                st.session_state[f"sp{i}"] = ". "
            
            st.session_state.gost_style = False
            st.session_state.acs_style = False
            st.session_state.rsc_style = False
            st.session_state.cta_style = True
            st.session_state.style_applied = True
        
        apply_cta_callback()
        st.rerun()
    
    def render_general_settings(self):
        """–†–µ–Ω–¥–µ—Ä –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if st.session_state.mobile_view:
            # –ú–æ–±–∏–ª—å–Ω—ã–π –≤–∏–¥ - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            numbering_style = st.selectbox(
                get_text('numbering_style'), 
                Config.NUMBERING_STYLES, 
                key="num", 
                index=Config.NUMBERING_STYLES.index(st.session_state.num)
            )
            
            author_format = st.selectbox(
                get_text('author_format'), 
                Config.AUTHOR_FORMATS, 
                key="auth", 
                index=Config.AUTHOR_FORMATS.index(st.session_state.auth)
            )
            
            col_sep_etal = st.columns(2)
            with col_sep_etal[0]:
                author_separator = st.selectbox(
                    get_text('author_separator'), 
                    [", ", "; "], 
                    key="sep", 
                    index=[", ", "; "].index(st.session_state.sep)
                )
            with col_sep_etal[1]:
                et_al_limit = st.number_input(
                    get_text('et_al_limit'), 
                    min_value=0, 
                    step=1, 
                    key="etal", 
                    value=st.session_state.etal
                )
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...
        else:
            # –î–µ—Å–∫—Ç–æ–ø –≤–∏–¥ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            numbering_style = st.selectbox(
                get_text('numbering_style'), 
                Config.NUMBERING_STYLES, 
                key="num", 
                index=Config.NUMBERING_STYLES.index(st.session_state.num)
            )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–æ–≤
            col_authors = st.columns([1, 1, 1])
            with col_authors[0]:
                author_format = st.selectbox(
                    get_text('author_format'), 
                    Config.AUTHOR_FORMATS, 
                    key="auth", 
                    index=Config.AUTHOR_FORMATS.index(st.session_state.auth)
                )
            with col_authors[1]:
                author_separator = st.selectbox(
                    get_text('author_separator'), 
                    [", ", "; "], 
                    key="sep", 
                    index=[", ", "; "].index(st.session_state.sep)
                )
            with col_authors[2]:
                et_al_limit = st.number_input(
                    get_text('et_al_limit'), 
                    min_value=0, 
                    step=1, 
                    key="etal", 
                    value=st.session_state.etal
                )
        
        # –û–±—â–∏–µ –¥–ª—è –æ–±–æ–∏—Ö –≤–∏–¥–æ–≤
        col_and_amp = st.columns(2)
        with col_and_amp[0]:
            use_and_checkbox = st.checkbox(
                get_text('use_and'), 
                key="use_and_checkbox", 
                value=st.session_state.use_and_checkbox,
                disabled=st.session_state.use_ampersand_checkbox
            )
        with col_and_amp[1]:
            use_ampersand_checkbox = st.checkbox(
                get_text('use_ampersand'), 
                key="use_ampersand_checkbox", 
                value=st.session_state.use_ampersand_checkbox,
                disabled=st.session_state.use_and_checkbox
            )
        
        # –°—Ç–∏–ª—å –∂—É—Ä–Ω–∞–ª–∞
        journal_style = st.selectbox(
            get_text('journal_style'),
            Config.JOURNAL_STYLES,
            key="journal_style",
            index=Config.JOURNAL_STYLES.index(st.session_state.journal_style),
            format_func=lambda x: {
                "{Full Journal Name}": get_text('full_journal_name'),
                "{J. Abbr.}": get_text('journal_abbr_with_dots'),
                "{J Abbr}": get_text('journal_abbr_no_dots')
            }[x]
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
        current_page = st.session_state.page
        page_index = 3
        if current_page in Config.PAGE_FORMATS:
            page_index = Config.PAGE_FORMATS.index(current_page)
        
        page_format = st.selectbox(
            get_text('page_format'), 
            Config.PAGE_FORMATS, 
            key="page", 
            index=page_index
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ DOI
        if st.session_state.mobile_view:
            doi_format = st.selectbox(
                get_text('doi_format'), 
                Config.DOI_FORMATS, 
                key="doi", 
                index=Config.DOI_FORMATS.index(st.session_state.doi)
            )
            doi_hyperlink = st.checkbox(
                get_text('doi_hyperlink'), 
                key="doilink", 
                value=st.session_state.doilink
            )
        else:
            col_doi = st.columns([2, 1])
            with col_doi[0]:
                doi_format = st.selectbox(
                    get_text('doi_format'), 
                    Config.DOI_FORMATS, 
                    key="doi", 
                    index=Config.DOI_FORMATS.index(st.session_state.doi)
                )
            with col_doi[1]:
                doi_hyperlink = st.checkbox(
                    get_text('doi_hyperlink'), 
                    key="doilink", 
                    value=st.session_state.doilink
                )
        
        # –ö–æ–Ω–µ—á–Ω–∞—è –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è
        final_punctuation = st.selectbox(
            get_text('final_punctuation'), 
            ["", "."], 
            key="punct", 
            index=["", "."].index(st.session_state.punct)
        )
    
    def render_element_configuration(self):
        """–†–µ–Ω–¥–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        element_configs = []
        used_elements = set()
        
        st.markdown(
            f"<small>{get_text('element')} | {get_text('italic')} | {get_text('bold')} | {get_text('parentheses')} | {get_text('separator')}</small>", 
            unsafe_allow_html=True
        )
        
        for i in range(8):
            if st.session_state.mobile_view:
                # –ú–æ–±–∏–ª—å–Ω—ã–π –≤–∏–¥ - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                element = st.selectbox(
                    f"Element {i+1}", 
                    Config.AVAILABLE_ELEMENTS, 
                    key=f"el{i}", 
                    index=Config.AVAILABLE_ELEMENTS.index(st.session_state[f"el{i}"]) if st.session_state[f"el{i}"] in Config.AVAILABLE_ELEMENTS else 0
                )
                
                col_mobile = st.columns(4)
                with col_mobile[0]:
                    italic = st.checkbox(
                        get_text('italic'), 
                        key=f"it{i}", 
                        value=st.session_state[f"it{i}"]
                    )
                with col_mobile[1]:
                    bold = st.checkbox(
                        get_text('bold'), 
                        key=f"bd{i}", 
                        value=st.session_state[f"bd{i}"]
                    )
                with col_mobile[2]:
                    parentheses = st.checkbox(
                        get_text('parentheses'), 
                        key=f"pr{i}", 
                        value=st.session_state[f"pr{i}"]
                    )
                with col_mobile[3]:
                    separator = st.text_input(
                        get_text('separator'), 
                        value=st.session_state[f"sp{i}"], 
                        key=f"sp{i}"
                    )
            else:
                # –î–µ—Å–∫—Ç–æ–ø –≤–∏–¥ - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                cols = st.columns([2, 1, 1, 1, 2])
                
                with cols[0]:
                    element = st.selectbox(
                        "", 
                        Config.AVAILABLE_ELEMENTS, 
                        key=f"el{i}", 
                        label_visibility="collapsed",
                        index=Config.AVAILABLE_ELEMENTS.index(st.session_state[f"el{i}"]) if st.session_state[f"el{i}"] in Config.AVAILABLE_ELEMENTS else 0
                    )
                
                with cols[1]:
                    italic = st.checkbox(
                        "", 
                        key=f"it{i}", 
                        help=get_text('italic'), 
                        value=st.session_state[f"it{i}"]
                    )
                
                with cols[2]:
                    bold = st.checkbox(
                        "", 
                        key=f"bd{i}", 
                        help=get_text('bold'), 
                        value=st.session_state[f"bd{i}"]
                    )
                
                with cols[3]:
                    parentheses = st.checkbox(
                        "", 
                        key=f"pr{i}", 
                        help=get_text('parentheses'), 
                        value=st.session_state[f"pr{i}"]
                    )
                
                with cols[4]:
                    separator = st.text_input(
                        "", 
                        value=st.session_state[f"sp{i}"], 
                        key=f"sp{i}", 
                        label_visibility="collapsed"
                    )
            
            if element and element not in used_elements:
                element_configs.append((
                    element, 
                    {
                        'italic': italic, 
                        'bold': bold, 
                        'parentheses': parentheses, 
                        'separator': separator
                    }
                ))
                used_elements.add(element)
        
        return element_configs
    
    def render_style_preview(self, style_config: Dict):
        """–†–µ–Ω–¥–µ—Ä –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∏–ª—è"""
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        current_time = time.time()
        if current_time - st.session_state.get('last_style_update', 0) > 1:
            st.session_state.last_style_update = current_time
            
            preview_metadata = self._get_preview_metadata(style_config)
            if preview_metadata:
                preview_ref, _ = format_reference(preview_metadata, style_config, for_preview=True)
                preview_with_numbering = self._add_numbering(preview_ref, style_config)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                preview_html = self._format_preview_html(preview_with_numbering, style_config)
                st.markdown(f"<small>{get_text('example')} {preview_html}</small>", unsafe_allow_html=True)
    
    def _get_preview_metadata(self, style_config: Dict) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        if style_config.get('gost_style', False):
            return {
                'authors': [{'given': 'John A.', 'family': 'Smith'}, {'given': 'Alice B.', 'family': 'Doe'}],
                'title': 'Article Title',
                'journal': 'Journal of the American Chemical Society',
                'year': 2020,
                'volume': '15',
                'issue': '3',
                'pages': '122-128',
                'article_number': '',
                'doi': '10.1000/xyz123'
            }
        elif style_config.get('acs_style', False):
            return {
                'authors': [{'given': 'John A.', 'family': 'Smith'}, {'given': 'Alice B.', 'family': 'Doe'}],
                'title': 'Article Title',
                'journal': 'Journal of the American Chemical Society',
                'year': 2020,
                'volume': '15',
                'issue': '3',
                'pages': '122-128',
                'article_number': '',
                'doi': '10.1000/xyz123'
            }
        elif style_config.get('rsc_style', False):
            return {
                'authors': [{'given': 'John A.', 'family': 'Smith'}, {'given': 'Alice B.', 'family': 'Doe'}],
                'title': 'Article Title',
                'journal': 'Chemical Communications',
                'year': 2020,
                'volume': '15',
                'issue': '3',
                'pages': '122-128',
                'article_number': '',
                'doi': '10.1000/xyz123'
            }
        elif style_config.get('cta_style', False):
            return {
                'authors': [
                    {'given': 'Fei', 'family': 'He'}, 
                    {'given': 'Feng', 'family': 'Ma'},
                    {'given': 'Juan', 'family': 'Li'},
                    {'given': 'Tao', 'family': 'Li'},
                    {'given': 'Guangshe', 'family': 'Li'}
                ],
                'title': 'Effect of calcination temperature on the structural properties and photocatalytic activities of solvothermal synthesized TiO2 hollow nanoparticles',
                'journal': 'Ceramics International',
                'year': 2014,
                'volume': '40',
                'issue': '5',
                'pages': '6441-6446',
                'article_number': '',
                'doi': '10.1016/j.ceramint.2013.11.094'
            }
        elif style_config.get('elements'):
            return {
                'authors': [{'given': 'John A.', 'family': 'Smith'}, {'given': 'Alice B.', 'family': 'Doe'}],
                'title': 'Article Title',
                'journal': 'Journal of the American Chemical Society',
                'year': 2020,
                'volume': '15',
                'issue': '3',
                'pages': '122-128',
                'article_number': 'e12345',
                'doi': '10.1000/xyz123'
            }
        else:
            return None
    
    def _add_numbering(self, preview_ref: str, style_config: Dict) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É"""
        numbering = style_config['numbering_style']
        if numbering == "No numbering":
            return preview_ref
        elif numbering == "1":
            return f"1 {preview_ref}"
        elif numbering == "1.":
            return f"1. {preview_ref}"
        elif numbering == "1)":
            return f"1) {preview_ref}"
        elif numbering == "(1)":
            return f"(1) {preview_ref}"
        elif numbering == "[1]":
            return f"[1] {preview_ref}"
        else:
            return f"1. {preview_ref}"
    
    def _format_preview_html(self, preview_text: str, style_config: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        preview_html = preview_text
        
        if style_config.get('acs_style', False):
            preview_html = preview_html.replace("J. Am. Chem. Soc.", "<i>J. Am. Chem. Soc.</i>")
            preview_html = preview_html.replace("2020", "<b>2020</b>")
            preview_html = preview_html.replace("15", "<i>15</i>")
        elif style_config.get('rsc_style', False):
            preview_html = preview_html.replace("Chem. Commun.", "<i>Chem. Commun.</i>")
            preview_html = preview_html.replace("15", "<b>15</b>")
        
        return preview_html

    def render_data_input(self):
        """–†–µ–Ω–¥–µ—Ä –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö"""
        input_method = st.radio(
            get_text('input_method'), 
            ['DOCX', 'Text' if st.session_state.current_language == 'en' else '–¢–µ–∫—Å—Ç'], 
            horizontal=True, 
            key="input_method"
        )
        
        if input_method == 'DOCX':
            uploaded_file = st.file_uploader(
                get_text('select_docx'), 
                type=['docx'], 
                label_visibility="collapsed", 
                key="docx_uploader"
            )
            return uploaded_file
        else:
            references_input = st.text_area(
                get_text('references'), 
                placeholder=get_text('enter_references'), 
                height=40, 
                label_visibility="collapsed", 
                key="references_input"
            )
            return references_input
    
    def render_data_output(self):
        """–†–µ–Ω–¥–µ—Ä –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö"""
        output_method = st.radio(
            get_text('output_method'), 
            ['DOCX', 'Text' if st.session_state.current_language == 'en' else '–¢–µ–∫—Å—Ç'], 
            horizontal=True, 
            key="output_method"
        )
        
        if output_method == 'Text' if st.session_state.current_language == 'en' else '–¢–µ–∫—Å—Ç':
            output_text_value = st.session_state.output_text_value if st.session_state.show_results else ""
            st.text_area(
                get_text('results'), 
                value=output_text_value, 
                height=40, 
                disabled=True, 
                label_visibility="collapsed", 
                key="output_text"
            )
        
        return output_method

    def render_guide(self):
        """–†–µ–Ω–¥–µ—Ä —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞"""
        st.markdown(f"<div class='guide-title'>{get_text('short_guide_title')}</div>", unsafe_allow_html=True)
        st.markdown(f"<div class='guide-step'>{get_text('step_1')}</div>", unsafe_allow_html=True)
        st.markdown(f"<div class='guide-note'>{get_text('step_1_note')}</div>", unsafe_allow_html=True)
        st.markdown(f"<div class='guide-step'>{get_text('step_2')}</div>", unsafe_allow_html=True)
        st.markdown(f"<div class='guide-step'>{get_text('step_3')}</div>", unsafe_allow_html=True)
        st.markdown(f"<div class='guide-step'>{get_text('step_4')}</div>", unsafe_allow_html=True)
        st.markdown(f"<div class='guide-step'>{get_text('step_5')}</div>", unsafe_allow_html=True)
        st.markdown(f"<div class='guide-note'>{get_text('step_5_note')}</div>", unsafe_allow_html=True)
        st.markdown(f"<div class='guide-step'>{get_text('step_6')}</div>", unsafe_allow_html=True)

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class CitationStyleApp:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.processor = ReferenceProcessor()
        self.validator = StyleValidator()
        self.ui = UIComponents()
        init_session_state()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        st.set_page_config(layout="wide")
    
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        self.ui.load_user_preferences()
    
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        self._handle_imported_style()
    
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π —Ç–µ–º—ã
        self.ui.apply_theme_styles()
        
        # –†–µ–Ω–¥–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
        self.ui.render_header()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∏–¥–∞
        if st.session_state.mobile_view:
            self._render_mobile_layout()
        else:
            self._render_desktop_layout()
    
    def _handle_imported_style(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å –∏ –Ω—É–∂–Ω–æ –ª–∏ –µ–≥–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å
        if (st.session_state.get('imported_style') and 
            st.session_state.get('apply_imported_style') and 
            not st.session_state.get('style_import_processed')):

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å
            self._apply_imported_style(st.session_state.imported_style)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
            st.session_state.apply_imported_style = False
            st.session_state.imported_style = None
            st.session_state.style_import_processed = True
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            st.rerun()
    
    def _render_mobile_layout(self):
        """–†–µ–Ω–¥–µ—Ä –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–∞–∫–µ—Ç–∞"""
        with st.container():
            # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            st.subheader(get_text('general_settings'))
            self.ui.render_style_presets()
            self.ui.render_general_settings()
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            st.subheader(get_text('element_config'))
            element_configs = self.ui.render_element_configuration()
            
            # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
            st.subheader(get_text('style_preview'))
            style_config = self._get_style_config(element_configs)
            self.ui.render_style_preview(style_config)
            
            # –í–≤–æ–¥/–≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
            st.subheader(get_text('data_input'))
            input_data = self.ui.render_data_input()
            
            st.subheader(get_text('data_output'))
            output_method = self.ui.render_data_output()
            
            # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if st.button(get_text('process'), use_container_width=True, key="process_button"):
                self._process_data(input_data, style_config, output_method)
            
            # –ö–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            self._render_download_buttons(output_method)
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è–º–∏
            self._render_style_management(style_config)
            
            # –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
            st.markdown("---")
            self.ui.render_guide()
    
    def _render_desktop_layout(self):
        """–†–µ–Ω–¥–µ—Ä –¥–µ—Å–∫—Ç–æ–ø –º–∞–∫–µ—Ç–∞"""
        col1, col2, col3 = st.columns([1, 1, 1])
        
        with col1:
            self._render_general_settings_column()
        
        with col2:
            self._render_element_config_column()
        
        with col3:
            self._render_preview_and_io_column()
    
    def _render_general_settings_column(self):
        """–†–µ–Ω–¥–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ —Å –æ–±—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        st.subheader(get_text('general_settings'))
        self.ui.render_style_presets()
        self.ui.render_general_settings()
    
    def _render_element_config_column(self):
        """–†–µ–Ω–¥–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        st.subheader(get_text('element_config'))
        element_configs = self.ui.render_element_configuration()
        
        # –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
        st.markdown("---")
        self.ui.render_guide()
        
        return element_configs
    
    def _render_preview_and_io_column(self):
        """–†–µ–Ω–¥–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –∏ –≤–≤–æ–¥–æ–º/–≤—ã–≤–æ–¥–æ–º"""
        # –°–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–∏–ª—è
        style_config = self._get_style_config()
        
        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        st.subheader(get_text('style_preview'))
        self.ui.render_style_preview(style_config)
        
        # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        st.subheader(get_text('data_input'))
        input_data = self.ui.render_data_input()
        
        # –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        st.subheader(get_text('data_output'))
        output_method = self.ui.render_data_output()
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if st.button(get_text('process'), use_container_width=True, key="process_button"):
            self._process_data(input_data, style_config, output_method)
        
        # –ö–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        self._render_download_buttons(output_method)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è–º–∏
        self._render_style_management(style_config)
    
    def _get_style_config(self, element_configs=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–∏–ª—è"""
        if element_configs is None:
            element_configs = []
            used_elements = set()
            
            for i in range(8):
                element = st.session_state[f"el{i}"]
                if element and element not in used_elements:
                    element_configs.append((
                        element, 
                        {
                            'italic': st.session_state[f"it{i}"],
                            'bold': st.session_state[f"bd{i}"],
                            'parentheses': st.session_state[f"pr{i}"],
                            'separator': st.session_state[f"sp{i}"]
                        }
                    ))
                    used_elements.add(element)
        
        return {
            'author_format': st.session_state.auth,
            'author_separator': st.session_state.sep,
            'et_al_limit': st.session_state.etal if st.session_state.etal > 0 else None,
            'use_and_bool': st.session_state.use_and_checkbox,
            'use_ampersand_bool': st.session_state.use_ampersand_checkbox,
            'doi_format': st.session_state.doi,
            'doi_hyperlink': st.session_state.doilink,
            'page_format': st.session_state.page,
            'final_punctuation': st.session_state.punct,
            'numbering_style': st.session_state.num,
            'journal_style': st.session_state.journal_style,
            'elements': element_configs,
            'gost_style': st.session_state.get('gost_style', False),
            'acs_style': st.session_state.get('acs_style', False),
            'rsc_style': st.session_state.get('rsc_style', False),
            'cta_style': st.session_state.get('cta_style', False)
        }
    
    def _process_data(self, input_data, style_config, output_method):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∏–ª—è
        is_valid, validation_messages = self.validator.validate_style_config(style_config)
        for msg in validation_messages:
            if "error" in msg.lower():
                st.error(msg)
                return
            else:
                st.warning(msg)
        
        if not is_valid:
            st.error(get_text('validation_error_no_elements'))
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–≤–æ–¥–∞
        try:
            if isinstance(input_data, str):  # –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
                self._process_text_input(input_data, style_config, output_method)
            else:  # DOCX –≤–≤–æ–¥
                self._process_docx_input(input_data, style_config, output_method)
        except Exception as e:
            logger.error(f"Processing error: {e}")
            st.error(f"Processing error: {str(e)}")
    
    def _process_text_input(self, references_input, style_config, output_method):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
        if not references_input.strip():
            st.error(get_text('enter_references_error'))
            return
        
        references = [ref.strip() for ref in references_input.split('\n') if ref.strip()]
        st.write(f"**{get_text('found_references_text').format(len(references))}**")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_container = st.empty()
        status_container = st.empty()
        
        with st.spinner(get_text('processing')):
            formatted_refs, txt_bytes, doi_found_count, doi_not_found_count, duplicates_info = (
                self.processor.process_references(references, style_config, progress_container, status_container)
            )
            
            statistics = generate_statistics(formatted_refs)
            output_doc_buffer = DocumentGenerator.generate_document(
                formatted_refs, statistics, style_config, duplicates_info
            )
            
            self._handle_output(formatted_refs, txt_bytes, output_doc_buffer, 
                              doi_found_count, doi_not_found_count, output_method)
    
    def _process_docx_input(self, uploaded_file, style_config, output_method):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ DOCX –≤–≤–æ–¥–∞"""
        if not uploaded_file:
            st.error(get_text('upload_file'))
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_container = st.empty()
        status_container = st.empty()
        
        with st.spinner(get_text('processing')):
            doc = Document(uploaded_file)
            references = [para.text.strip() for para in doc.paragraphs if para.text.strip()]
            st.write(f"**{get_text('found_references').format(len(references))}**")
            
            formatted_refs, txt_bytes, output_doc_buffer, doi_found_count, doi_not_found_count, statistics = (
                self._process_docx_references(references, style_config, progress_container, status_container)
            )
            
            self._handle_output(formatted_refs, txt_bytes, output_doc_buffer,
                              doi_found_count, doi_not_found_count, output_method)
    
    def _process_docx_references(self, references, style_config, progress_container, status_container):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ –∏–∑ DOCX"""
        formatted_refs, txt_bytes, doi_found_count, doi_not_found_count, duplicates_info = (
            self.processor.process_references(references, style_config, progress_container, status_container)
        )
        
        statistics = generate_statistics(formatted_refs)
        output_doc_buffer = DocumentGenerator.generate_document(
            formatted_refs, statistics, style_config, duplicates_info
        )
        
        return formatted_refs, txt_bytes, output_doc_buffer, doi_found_count, doi_not_found_count, statistics
    
    def _handle_output(self, formatted_refs, txt_bytes, output_doc_buffer, 
                      doi_found_count, doi_not_found_count, output_method):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞"""
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.write(f"**{get_text('statistics').format(doi_found_count, doi_not_found_count)}**")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
        if output_method == 'Text' if st.session_state.current_language == 'en' else '–¢–µ–∫—Å—Ç':
            output_text_value = self._format_text_output(formatted_refs, st.session_state.num)
            st.session_state.output_text_value = output_text_value
            st.session_state.show_results = True
        else:
            st.session_state.output_text_value = ""
            st.session_state.show_results = False
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        st.session_state.download_data = {
            'txt_bytes': txt_bytes,
            'output_doc_buffer': output_doc_buffer
        }
        
        st.rerun()
    
    def _format_text_output(self, formatted_refs, numbering_style):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        output_text_value = ""
        for i, (elements, is_error, metadata) in enumerate(formatted_refs):
            prefix = self._get_numbering_prefix(i, numbering_style)
            
            if is_error:
                output_text_value += f"{prefix}{elements}\n"
            else:
                if isinstance(elements, str):
                    output_text_value += f"{prefix}{elements}\n"
                else:
                    ref_str = ""
                    for j, element_data in enumerate(elements):
                        if len(element_data) == 6:
                            value, _, _, separator, _, _ = element_data
                            ref_str += value
                            if separator and j < len(elements) - 1:
                                ref_str += separator
                        else:
                            ref_str += str(element_data)
                    
                    output_text_value += f"{prefix}{ref_str}\n"
        
        return output_text_value
    
    def _get_numbering_prefix(self, index, numbering_style):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –Ω—É–º–µ—Ä–∞—Ü–∏–∏"""
        if numbering_style == "No numbering":
            return ""
        elif numbering_style == "1":
            return f"{index + 1} "
        elif numbering_style == "1.":
            return f"{index + 1}. "
        elif numbering_style == "1)":
            return f"{index + 1}) "
        elif numbering_style == "(1)":
            return f"({index + 1}) "
        elif numbering_style == "[1]":
            return f"[{index + 1}] "
        else:
            return f"{index + 1}. "
    
    def _render_download_buttons(self, output_method):
        """–†–µ–Ω–¥–µ—Ä –∫–Ω–æ–ø–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        if st.session_state.download_data:
            if st.session_state.mobile_view:
                # –ú–æ–±–∏–ª—å–Ω—ã–π –≤–∏–¥ - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                st.download_button(
                    label=get_text('doi_txt'),
                    data=st.session_state.download_data['txt_bytes'],
                    file_name='doi_list.txt',
                    mime='text/plain',
                    key="doi_download",
                    use_container_width=True
                )
                
                if output_method == 'DOCX' and st.session_state.download_data.get('output_doc_buffer'):
                    st.download_button(
                        label=get_text('references_docx'),
                        data=st.session_state.download_data['output_doc_buffer'],
                        file_name='Reformatted references.docx',
                        mime='application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                        key="docx_download",
                        use_container_width=True
                    )
            else:
                # –î–µ—Å–∫—Ç–æ–ø –≤–∏–¥ - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                col_download = st.columns(2)
                with col_download[0]:
                    st.download_button(
                        label=get_text('doi_txt'),
                        data=st.session_state.download_data['txt_bytes'],
                        file_name='doi_list.txt',
                        mime='text/plain',
                        key="doi_download",
                        use_container_width=True
                    )
                
                with col_download[1]:
                    if output_method == 'DOCX' and st.session_state.download_data.get('output_doc_buffer'):
                        st.download_button(
                            label=get_text('references_docx'),
                            data=st.session_state.download_data['output_doc_buffer'],
                            file_name='Reformatted references.docx',
                            mime='application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                            key="docx_download",
                            use_container_width=True
                        )
    
    def _render_style_management(self, style_config):
        """–†–µ–Ω–¥–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è–º–∏"""
        st.subheader("üíæ Style Management")
        
        # –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∏–ª—è
        col_export = st.columns([2, 1])
        with col_export[0]:
            export_file_name = st.text_input(
                get_text('export_file_name'), 
                value="my_citation_style", 
                placeholder="Enter file name", 
                key="export_name"
            )
        
        with col_export[1]:
            export_data = self._export_style(style_config, export_file_name)
            if export_data:
                st.download_button(
                    label=get_text('export_style'),
                    data=export_data,
                    file_name=f"{export_file_name}.json",
                    mime="application/json",
                    use_container_width=True,
                    key="export_button"
                )
        
        # –ò–º–ø–æ—Ä—Ç —Å—Ç–∏–ª—è
        imported_file = st.file_uploader(
            get_text('import_file'), 
            type=['json'], 
            label_visibility="collapsed", 
            key="style_importer"
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if imported_file is not None:
            current_file_hash = hashlib.md5(imported_file.getvalue()).hexdigest()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª—Å—è –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            if (st.session_state.last_imported_file_hash != current_file_hash or 
                not st.session_state.style_import_processed):
                
                imported_style = self._import_style(imported_file)
                if imported_style:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à —Ñ–∞–π–ª–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
                    st.session_state.last_imported_file_hash = current_file_hash
                    st.session_state.imported_style = imported_style
                    st.session_state.apply_imported_style = True
                    st.session_state.style_import_processed = False
                    
                    st.success(get_text('import_success'))
                    st.rerun()
    
    def _render_cache_management(self):
        """–†–µ–Ω–¥–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º"""
        with st.expander("Cache Management"):
            col_cache = st.columns(2)
            with col_cache[0]:
                if st.button("Initialize Cache", use_container_width=True):
                    doi_cache.clear_old_entries()
                    st.success(get_text('cache_initialized'))
            with col_cache[1]:
                if st.button("Clear Cache", use_container_width=True):
                    try:
                        os.remove(Config.DB_PATH)
                        st.success(get_text('cache_cleared'))
                    except Exception as e:
                        st.error(f"Error clearing cache: {e}")
    
    def _export_style(self, style_config, file_name):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∏–ª—è"""
        try:
            export_data = {
                'version': '1.0',
                'export_date': str(datetime.now()),
                'style_config': style_config
            }
            json_data = json.dumps(export_data, indent=2, ensure_ascii=False)
            return json_data.encode('utf-8')
        except Exception as e:
            st.error(f"Export error: {str(e)}")
            return None
    
    def _import_style(self, uploaded_file):
        """–ò–º–ø–æ—Ä—Ç —Å—Ç–∏–ª—è"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ñ–∞–π–ª–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
            uploaded_file.seek(0)
            content = uploaded_file.read().decode('utf-8')
            import_data = json.loads(content)
        
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤
            if 'style_config' in import_data:
                return import_data['style_config']
            elif 'version' in import_data:
                return import_data.get('style_config', import_data)
            else:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä—è–º–æ–π style_config
                return import_data
            
        except Exception as e:
            st.error(f"{get_text('import_error')}: {str(e)}")
            return None

    def _apply_imported_style(self, imported_style):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å–µ—Å—Å–∏–∏"""
        if not imported_style:
            return
    
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        def apply_style_callback():
            # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if 'numbering_style' in imported_style:
                st.session_state.num = imported_style['numbering_style']
            if 'author_format' in imported_style:
                st.session_state.auth = imported_style['author_format']
            if 'author_separator' in imported_style:
                st.session_state.sep = imported_style['author_separator']
            if 'et_al_limit' in imported_style:
                st.session_state.etal = imported_style['et_al_limit'] or 0
            if 'use_and_bool' in imported_style:
                st.session_state.use_and_checkbox = imported_style['use_and_bool']
            if 'use_ampersand_bool' in imported_style:
                st.session_state.use_ampersand_checkbox = imported_style['use_ampersand_bool']
            if 'doi_format' in imported_style:
                st.session_state.doi = imported_style['doi_format']
            if 'doi_hyperlink' in imported_style:
                st.session_state.doilink = imported_style['doi_hyperlink']
            if 'page_format' in imported_style:
                st.session_state.page = imported_style['page_format']
            if 'final_punctuation' in imported_style:
                st.session_state.punct = imported_style['final_punctuation']
            if 'journal_style' in imported_style:
                st.session_state.journal_style = imported_style['journal_style']
        
            # –°–±—Ä–æ—Å –ø—Ä–µ—Å–µ—Ç–æ–≤ —Å—Ç–∏–ª–µ–π
            st.session_state.gost_style = imported_style.get('gost_style', False)
            st.session_state.acs_style = imported_style.get('acs_style', False)
            st.session_state.rsc_style = imported_style.get('rsc_style', False)
            st.session_state.cta_style = imported_style.get('cta_style', False)
        
            # –û—á–∏—Å—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            for i in range(8):
                st.session_state[f"el{i}"] = ""
                st.session_state[f"it{i}"] = False
                st.session_state[f"bd{i}"] = False
                st.session_state[f"pr{i}"] = False
                st.session_state[f"sp{i}"] = ". "
        
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è
            elements = imported_style.get('elements', [])
            for i, (element, config) in enumerate(elements):
                if i < 8:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 8 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
                    st.session_state[f"el{i}"] = element
                    st.session_state[f"it{i}"] = config.get('italic', False)
                    st.session_state[f"bd{i}"] = config.get('bold', False)
                    st.session_state[f"pr{i}"] = config.get('parentheses', False)
                    st.session_state[f"sp{i}"] = config.get('separator', ". ")
        
            st.session_state.style_applied = True
            st.session_state.style_import_processed = True
        
        # –í—ã–∑—ã–≤–∞–µ–º callback
        apply_style_callback()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def clean_text(text):
    return DOIProcessor()._clean_text(text)

def normalize_name(name):
    return DOIProcessor()._normalize_name(name)

def is_section_header(text):
    return DOIProcessor()._is_section_header(text)

def find_doi(reference):
    return DOIProcessor().find_doi_enhanced(reference)

def normalize_doi(doi):
    processor = ReferenceProcessor()
    return processor._normalize_doi(doi)

def generate_reference_hash(metadata):
    processor = ReferenceProcessor()
    return processor._generate_reference_hash(metadata)

def extract_metadata_batch(doi_list, progress_callback=None):
    processor = ReferenceProcessor()
    return [processor.doi_processor.extract_metadata_with_cache(doi) for doi in doi_list]

def extract_metadata_sync(doi):
    processor = ReferenceProcessor()
    return processor.doi_processor.extract_metadata_with_cache(doi)

def format_reference(metadata, style_config, for_preview=False):
    formatter = CitationFormatterFactory.create_formatter(style_config)
    return formatter.format_reference(metadata, for_preview)

def find_duplicate_references(formatted_refs):
    processor = ReferenceProcessor()
    return processor._find_duplicates(formatted_refs)

def generate_statistics(formatted_refs):
    journals = []
    years = []
    authors = []
    
    current_year = datetime.now().year
    
    for _, _, metadata in formatted_refs:
        if not metadata:
            continue
            
        if metadata.get('journal'):
            journals.append(metadata['journal'])
        
        if metadata.get('year'):
            years.append(metadata['year'])
        
        if metadata.get('authors'):
            for author in metadata['authors']:
                given = author.get('given', '')
                family = author.get('family', '')
                if family:
                    first_initial = given[0] if given else ''
                    author_formatted = f"{family} {first_initial}." if first_initial else family
                    authors.append(author_formatted)
    
    unique_dois = set()
    for _, _, metadata in formatted_refs:
        if metadata and metadata.get('doi'):
            unique_dois.add(metadata['doi'])
    
    total_unique_dois = len(unique_dois)
    
    journal_counter = Counter(journals)
    journal_stats = []
    for journal, count in journal_counter.most_common(20):
        percentage = (count / total_unique_dois) * 100 if total_unique_dois > 0 else 0
        journal_stats.append({
            'journal': journal,
            'count': count,
            'percentage': round(percentage, 2)
        })
    
    year_counter = Counter(years)
    year_stats = []
    for year in range(current_year, 2009, -1):
        if year in year_counter:
            count = year_counter[year]
            percentage = (count / total_unique_dois) * 100 if total_unique_dois > 0 else 0
            year_stats.append({
                'year': year,
                'count': count,
                'percentage': round(percentage, 2)
            })
    
    recent_years = [current_year - i for i in range(4)]
    recent_count = sum(year_counter.get(year, 0) for year in recent_years)
    recent_percentage = (recent_count / total_unique_dois) * 100 if total_unique_dois > 0 else 0
    needs_more_recent_references = recent_percentage < 20
    
    author_counter = Counter(authors)
    author_stats = []
    for author, count in author_counter.most_common(20):
        percentage = (count / total_unique_dois) * 100 if total_unique_dois > 0 else 0
        author_stats.append({
            'author': author,
            'count': count,
            'percentage': round(percentage, 2)
        })
    
    has_frequent_author = any(stats['percentage'] > 30 for stats in author_stats)
    
    return {
        'journal_stats': journal_stats,
        'year_stats': year_stats,
        'author_stats': author_stats,
        'total_unique_dois': total_unique_dois,
        'needs_more_recent_references': needs_more_recent_references,
        'has_frequent_author': has_frequent_author
    }

def process_references_with_progress(references, style_config, progress_container, status_container):
    processor = ReferenceProcessor()
    return processor.process_references(references, style_config, progress_container, status_container)

def process_docx(input_file, style_config, progress_container, status_container):
    processor = ReferenceProcessor()
    doc = Document(input_file)
    references = [para.text.strip() for para in doc.paragraphs if para.text.strip()]
    return processor.process_references(references, style_config, progress_container, status_container)

def export_style(style_config, file_name):
    app = CitationStyleApp()
    return app._export_style(style_config, file_name)

def import_style(uploaded_file):
    app = CitationStyleApp()
    return app._import_style(uploaded_file)

def apply_imported_style(imported_style):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    app = CitationStyleApp()
    app._apply_imported_style(imported_style)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = CitationStyleApp()
    app.run()

if __name__ == "__main__":
    main()

