import os
import csv
import streamlit as st
import re
import json
from datetime import datetime, timedelta
from crossref.restful import Works
from docx import Document
from docx.oxml.ns import qn
from docx.shared import RGBColor, Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
import io
from tqdm import tqdm
from docx.oxml import OxmlElement
import base64
import html
import concurrent.futures
from typing import List, Dict, Tuple, Set
import hashlib
import time
from collections import Counter
import diskcache
from pathlib import Path

works = Works()

# –ü–æ–ª–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤
TRANSLATIONS = {
    'en': {
        'header': 'üé® Citation Style Constructor',
        'general_settings': '‚öôÔ∏è General Settings',
        'element_config': 'üìë Element Configuration',
        'style_preview': 'üëÄ Style Preview',
        'data_input': 'üìÅ Data Input',
        'data_output': 'üì§ Data Output',
        'numbering_style': 'Numbering:',
        'author_format': 'Authors:',
        'author_separator': 'Separator:',
        'et_al_limit': 'Et al after:',
        'use_and': "'and'",
        'use_ampersand': "'&'",
        'doi_format': 'DOI format:',
        'doi_hyperlink': 'DOI as hyperlink',
        'page_format': 'Pages:',
        'final_punctuation': 'Final punctuation:',
        'element': 'Element',
        'italic': 'Italic',
        'bold': 'Bold',
        'parentheses': 'Parentheses',
        'separator': 'Separator',
        'input_method': 'Input:',
        'output_method': 'Output:',
        'select_docx': 'Select DOCX',
        'enter_references': 'Enter references (one per line)',
        'references': 'References:',
        'results': 'Results:',
        'process': 'üöÄ Process',
        'example': 'Example:',
        'error_select_element': 'Select at least one element!',
        'processing': '‚è≥ Processing...',
        'upload_file': 'Upload a file!',
        'enter_references_error': 'Enter references!',
        'select_docx_output': 'Select DOCX output to download!',
        'doi_txt': 'üìÑ DOI (TXT)',
        'references_docx': 'üìã References (DOCX)',
        'references_html': 'üåê References (HTML)',
        'found_references': 'Found {} references.',
        'found_references_text': 'Found {} references in text.',
        'statistics': 'Statistics: {} DOI found, {} not found.',
        'language': 'Language:',
        'gost_style': 'Apply GOST Style',
        'export_style': 'üì§ Export Style',
        'import_style': 'üì• Import Style',
        'export_file_name': 'File name:',
        'import_file': 'Select style file:',
        'export_success': 'Style exported successfully!',
        'import_success': 'Style imported successfully!',
        'import_error': 'Error importing style file!',
        'processing_status': 'Processing references...',
        'current_reference': 'Current: {}',
        'processed_stats': 'Processed: {}/{} | Found: {} | Errors: {}',
        'time_remaining': 'Estimated time remaining: {}',
        'duplicate_reference': 'üîÑ Repeated Reference (See #{})',
        'batch_processing': 'Batch processing DOI...',
        'extracting_metadata': 'Extracting metadata...',
        'checking_duplicates': 'Checking for duplicates...',
        'retrying_failed': 'Retrying failed DOI requests...',
        'bibliographic_search': 'Searching by bibliographic data...',
        'style_presets': 'Style Presets',
        'journal_templates': 'Journal Templates',
        'gost_button': 'GOST',
        'acs_button': 'ACS (MDPI)',
        'rsc_button': 'RSC',
        'cta_button': 'CTA',
        'style_preset_tooltip': 'Here are some styles maintained by individual publishers. For major publishers (Elsevier, Springer Nature, and Wiley), styles vary from journal to journal. To create (or reformat) references for a specific journal, use the Citation Style Constructor.',
        'journal_style': 'Journal style:',
        'full_journal_name': 'Full Journal Name',
        'journal_abbr_with_dots': 'J. Abbr.',
        'journal_abbr_no_dots': 'J Abbr',
        'select_journal_template': 'Select Journal Template',
        'custom_style': 'Custom Style',
        'cache_status': 'Cache: {} items',
        'clear_cache': 'Clear Cache',
        'html_output_options': 'HTML Output Options',
        'html_style': 'HTML Style:',
        'html_simple': 'Simple List',
        'html_numbered': 'Numbered List',
        'html_with_links': 'List with Links',
        'html_bootstrap': 'Bootstrap Styled',
        'mobile_optimized': 'Mobile Optimized View'
    },
    'ru': {
        'header': 'üé® –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—Ç–∏–ª–µ–π —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        'general_settings': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        'element_config': 'üìë –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
        'style_preview': 'üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä',
        'data_input': 'üìÅ –í–≤–æ–¥',
        'data_output': 'üì§ –í—ã–≤–æ–¥',
        'numbering_style': '–ù—É–º–µ—Ä–∞—Ü–∏—è:',
        'author_format': '–ê–≤—Ç–æ—Ä—ã:',
        'author_separator': '–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å:',
        'et_al_limit': 'Et al –ø–æ—Å–ª–µ:',
        'use_and': "'–∏'",
        'use_ampersand': "'&'",
        'doi_format': '–§–æ—Ä–º–∞—Ç DOI:',
        'doi_hyperlink': 'DOI –∫–∞–∫ —Å—Å—ã–ª–∫–∞',
        'page_format': '–°—Ç—Ä–∞–Ω–∏—Ü—ã:',
        'final_punctuation': '–ö–æ–Ω–µ—á–Ω–∞—è –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è:',
        'element': '–≠–ª–µ–º–µ–Ω—Ç',
        'italic': '–ö—É—Ä—Å–∏–≤',
        'bold': '–ñ–∏—Ä–Ω—ã–π',
        'parentheses': '–°–∫–æ–±–∫–∏',
        'separator': '–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å',
        'input_method': '–í–≤–æ–¥:',
        'output_method': '–í—ã–≤–æ–¥:',
        'select_docx': '–í—ã–±–µ—Ä–∏—Ç–µ DOCX',
        'enter_references': '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)',
        'references': '–°—Å—ã–ª–∫–∏:',
        'results': '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:',
        'process': 'üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å',
        'example': '–ü—Ä–∏–º–µ—Ä:',
        'error_select_element': '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç!',
        'processing': '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...',
        'upload_file': '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª!',
        'enter_references_error': '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏!',
        'select_docx_output': '–í—ã–±–µ—Ä–∏—Ç–µ DOCX –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!',
        'doi_txt': 'üìÑ DOI (TXT)',
        'references_docx': 'üìã –°—Å—ã–ª–∫–∏ (DOCX)',
        'references_html': 'üåê –°—Å—ã–ª–∫–∏ (HTML)',
        'found_references': '–ù–∞–π–¥–µ–Ω–æ {} —Å—Å—ã–ª–æ–∫.',
        'found_references_text': '–ù–∞–π–¥–µ–Ω–æ {} —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ.',
        'statistics': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {} DOI –Ω–∞–π–¥–µ–Ω–æ, {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.',
        'language': '–Ø–∑—ã–∫:',
        'gost_style': '–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å –ì–û–°–¢',
        'export_style': 'üì§ –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∏–ª—è',
        'import_style': 'üì• –ò–º–ø–æ—Ä—Ç —Å—Ç–∏–ª—è',
        'export_file_name': '–ò–º—è —Ñ–∞–π–ª–∞:',
        'import_file': '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å—Ç–∏–ª—è:',
        'export_success': '–°—Ç–∏–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!',
        'import_success': '–°—Ç–∏–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!',
        'import_error': '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞ —Å—Ç–∏–ª—è!',
        'processing_status': '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫...',
        'current_reference': '–¢–µ–∫—É—â–∞—è: {}',
        'processed_stats': '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {}/{} | –ù–∞–π–¥–µ–Ω–æ: {} | –û—à–∏–±–∫–∏: {}',
        'time_remaining': '–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {}',
        'duplicate_reference': 'üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ (–°–º. #{})',
        'batch_processing': '–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ DOI...',
        'extracting_metadata': '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...',
        'checking_duplicates': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã...',
        'retrying_failed': '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö DOI...',
        'bibliographic_search': '–ü–æ–∏—Å–∫ –ø–æ –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º...',
        'style_presets': '–ì–æ—Ç–æ–≤—ã–µ —Å—Ç–∏–ª–∏',
        'journal_templates': '–®–∞–±–ª–æ–Ω—ã –∂—É—Ä–Ω–∞–ª–æ–≤',
        'gost_button': '–ì–û–°–¢',
        'acs_button': 'ACS (MDPI)',
        'rsc_button': 'RSC',
        'cta_button': 'CTA',
        'style_preset_tooltip': '–ó–¥–µ—Å—å —É–∫–∞–∑–∞–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∏–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–¥–Ω–æ–≥–æ –∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞. –î–ª—è —Ä—è–¥–∞ –∫—Ä—É–ø–Ω—ã—Ö –∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤ (Esevier, Springer Nature, Wiley) —Å—Ç–∏–ª—å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∂—É—Ä–Ω–∞–ª–∞ –∫ –∂—É—Ä–Ω–∞–ª—É. –î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è) —Å—Å—ã–ª–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º —Å—Å—ã–ª–æ–∫.',
        'journal_style': '–°—Ç–∏–ª—å –∂—É—Ä–Ω–∞–ª–∞:',
        'full_journal_name': '–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞',
        'journal_abbr_with_dots': 'J. Abbr.',
        'journal_abbr_no_dots': 'J Abbr',
        'select_journal_template': '–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –∂—É—Ä–Ω–∞–ª–∞',
        'custom_style': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ç–∏–ª—å',
        'cache_status': '–ö—ç—à: {} —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
        'clear_cache': '–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à',
        'html_output_options': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ HTML –≤—ã–≤–æ–¥–∞',
        'html_style': '–°—Ç–∏–ª—å HTML:',
        'html_simple': '–ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫',
        'html_numbered': '–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫',
        'html_with_links': '–°–ø–∏—Å–æ–∫ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏',
        'html_bootstrap': 'Bootstrap —Å—Ç–∏–ª—å',
        'mobile_optimized': '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö'
    }
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞
CACHE_DIR = Path("./.citation_cache")
CACHE_DIR.mkdir(exist_ok=True)
cache = diskcache.Cache(str(CACHE_DIR))

# –ñ—É—Ä–Ω–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
JOURNAL_TEMPLATES = {
    'custom': {
        'name': 'Custom Style',
        'description': 'User-defined custom style',
        'config': {}
    },
    'nature': {
        'name': 'Nature',
        'description': 'Nature journal style',
        'config': {
            'author_format': 'A.A. Smith',
            'author_separator': ', ',
            'et_al_limit': 5,
            'doi_format': '10.10/xxx',
            'doi_hyperlink': True,
            'page_format': '122‚Äì128',
            'final_punctuation': '.',
            'numbering_style': '[1]',
            'journal_style': '{J. Abbr.}',
            'elements': [
                ('Authors', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('Title', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ' '}),
                ('Journal', {'italic': True, 'bold': False, 'parentheses': False, 'separator': ' '}),
                ('Year', {'italic': False, 'bold': False, 'parentheses': True, 'separator': ', '}),
                ('Volume', {'italic': True, 'bold': False, 'parentheses': False, 'separator': ', '}),
                ('Pages', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('DOI', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ''})
            ]
        }
    },
    'science': {
        'name': 'Science',
        'description': 'Science journal style',
        'config': {
            'author_format': 'A.A. Smith',
            'author_separator': ', ',
            'et_al_limit': 10,
            'doi_format': '10.10/xxx',
            'doi_hyperlink': True,
            'page_format': '122-128',
            'final_punctuation': '.',
            'numbering_style': '1.',
            'journal_style': '{J. Abbr.}',
            'elements': [
                ('Authors', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('Title', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('Journal', {'italic': True, 'bold': False, 'parentheses': False, 'separator': ' '}),
                ('Year', {'italic': False, 'bold': False, 'parentheses': True, 'separator': ';'}),
                ('Volume', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ': '}),
                ('Pages', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('DOI', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ''})
            ]
        }
    },
    'cell': {
        'name': 'Cell',
        'description': 'Cell Press journal style',
        'config': {
            'author_format': 'Smith AA',
            'author_separator': ', ',
            'et_al_limit': 5,
            'doi_format': 'https://dx.doi.org/10.10/xxx',
            'doi_hyperlink': True,
            'page_format': '122-128',
            'final_punctuation': '.',
            'numbering_style': '1.',
            'journal_style': '{J. Abbr.}',
            'elements': [
                ('Authors', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('Title', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('Journal', {'italic': True, 'bold': False, 'parentheses': False, 'separator': ' '}),
                ('Year', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ';'}),
                ('Volume', {'italic': False, 'bold': True, 'parentheses': False, 'separator': ': '}),
                ('Pages', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('DOI', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ''})
            ]
        }
    },
    'elsevier': {
        'name': 'Elsevier',
        'description': 'Elsevier journal style (common)',
        'config': {
            'author_format': 'Smith, A.A.',
            'author_separator': ', ',
            'et_al_limit': 5,
            'doi_format': 'doi:10.10/xxx',
            'doi_hyperlink': True,
            'page_format': '122-128',
            'final_punctuation': '.',
            'numbering_style': '[1]',
            'journal_style': '{J. Abbr.}',
            'elements': [
                ('Authors', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('Title', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('Journal', {'italic': True, 'bold': False, 'parentheses': False, 'separator': ' '}),
                ('Year', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ';'}),
                ('Volume', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ' '}),
                ('Pages', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('DOI', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ''})
            ]
        }
    },
    'springer': {
        'name': 'Springer',
        'description': 'Springer Nature journal style',
        'config': {
            'author_format': 'Smith AA',
            'author_separator': ', ',
            'et_al_limit': 5,
            'doi_format': 'https://dx.doi.org/10.10/xxx',
            'doi_hyperlink': True,
            'page_format': '122‚Äì128',
            'final_punctuation': '.',
            'numbering_style': '1.',
            'journal_style': '{J. Abbr.}',
            'elements': [
                ('Authors', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('Title', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('Journal', {'italic': True, 'bold': False, 'parentheses': False, 'separator': ' '}),
                ('Year', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ', '}),
                ('Volume', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '('}),
                ('Issue', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ')'}),
                ('Pages', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('DOI', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ''})
            ]
        }
    },
    'wiley': {
        'name': 'Wiley',
        'description': 'Wiley journal style',
        'config': {
            'author_format': 'A.A. Smith',
            'author_separator': ', ',
            'et_al_limit': 5,
            'doi_format': 'doi:10.10/xxx',
            'doi_hyperlink': True,
            'page_format': '122‚Äì128',
            'final_punctuation': '.',
            'numbering_style': '1.',
            'journal_style': '{J. Abbr.}',
            'elements': [
                ('Authors', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('Title', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('Journal', {'italic': True, 'bold': False, 'parentheses': False, 'separator': ' '}),
                ('Year', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ';'}),
                ('Volume', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ': '}),
                ('Pages', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('DOI', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ''})
            ]
        }
    },
    'ieee': {
        'name': 'IEEE',
        'description': 'IEEE conference and journal style',
        'config': {
            'author_format': 'A. A. Smith',
            'author_separator': ', ',
            'et_al_limit': 3,
            'doi_format': '10.10/xxx',
            'doi_hyperlink': True,
            'page_format': '122-128',
            'final_punctuation': '.',
            'numbering_style': '[1]',
            'journal_style': '{J. Abbr.}',
            'elements': [
                ('Authors', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ', '}),
                ('Title', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ', '}),
                ('Journal', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ', vol. '}),
                ('Volume', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ', '}),
                ('Pages', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ', '}),
                ('Year', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('DOI', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ''})
            ]
        }
    },
    'ama': {
        'name': 'AMA',
        'description': 'American Medical Association style',
        'config': {
            'author_format': 'Smith AA',
            'author_separator': ', ',
            'et_al_limit': 6,
            'doi_format': 'doi:10.10/xxx',
            'doi_hyperlink': True,
            'page_format': '122-128.',
            'final_punctuation': '.',
            'numbering_style': '1.',
            'journal_style': '{J. Abbr.}',
            'elements': [
                ('Authors', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('Title', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('Journal', {'italic': True, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('Year', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ';'}),
                ('Volume', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '('}),
                ('Issue', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ')'}),
                ('Pages', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('DOI', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ''})
            ]
        }
    },
    'apa': {
        'name': 'APA',
        'description': 'American Psychological Association style',
        'config': {
            'author_format': 'Smith, A. A.',
            'author_separator': ', ',
            'et_al_limit': 7,
            'doi_format': 'https://doi.org/10.10/xxx',
            'doi_hyperlink': True,
            'page_format': '122-128',
            'final_punctuation': '.',
            'numbering_style': '1.',
            'journal_style': '{Full Journal Name}',
            'elements': [
                ('Authors', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ' '}),
                ('Year', {'italic': False, 'bold': False, 'parentheses': True, 'separator': '). '}),
                ('Title', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('Journal', {'italic': True, 'bold': False, 'parentheses': False, 'separator': ', '}),
                ('Volume', {'italic': True, 'bold': False, 'parentheses': False, 'separator': '('}),
                ('Issue', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ')'}),
                ('Pages', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('DOI', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ''})
            ]
        }
    },
    'mla': {
        'name': 'MLA',
        'description': 'Modern Language Association style',
        'config': {
            'author_format': 'Smith, John A.',
            'author_separator': ', and ',
            'et_al_limit': 3,
            'doi_format': 'doi:10.10/xxx',
            'doi_hyperlink': True,
            'page_format': '122-28',
            'final_punctuation': '.',
            'numbering_style': '1.',
            'journal_style': '{Full Journal Name}',
            'elements': [
                ('Authors', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ' '}),
                ('Title', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ' '}),
                ('Journal', {'italic': True, 'bold': False, 'parentheses': False, 'separator': ', '}),
                ('Volume', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '.'}),
                ('Issue', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ' '}),
                ('Year', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ', '}),
                ('Pages', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('DOI', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ''})
            ]
        }
    },
    'chicago': {
        'name': 'Chicago',
        'description': 'Chicago Manual of Style',
        'config': {
            'author_format': 'Smith, John A.',
            'author_separator': ', and ',
            'et_al_limit': 4,
            'doi_format': 'https://doi.org/10.10/xxx',
            'doi_hyperlink': True,
            'page_format': '122-28',
            'final_punctuation': '.',
            'numbering_style': '1.',
            'journal_style': '{Full Journal Name}',
            'elements': [
                ('Authors', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ' '}),
                ('Title', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ' '}),
                ('Journal', {'italic': True, 'bold': False, 'parentheses': False, 'separator': ' '}),
                ('Volume', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ','}),
                ('Issue', {'italic': False, 'bold': False, 'parentheses': True, 'separator': ' '}),
                ('Year', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ': '}),
                ('Pages', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('DOI', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ''})
            ]
        }
    },
    'harvard': {
        'name': 'Harvard',
        'description': 'Harvard referencing style',
        'config': {
            'author_format': 'Smith, J.A.',
            'author_separator': ', ',
            'et_al_limit': 3,
            'doi_format': 'Available at: https://doi.org/10.10/xxx',
            'doi_hyperlink': True,
            'page_format': 'pp.122-128',
            'final_punctuation': '.',
            'numbering_style': '1.',
            'journal_style': '{Full Journal Name}',
            'elements': [
                ('Authors', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ' '}),
                ('Year', {'italic': False, 'bold': False, 'parentheses': True, 'separator': ') '}),
                ('Title', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('Journal', {'italic': True, 'bold': False, 'parentheses': False, 'separator': ', '}),
                ('Volume', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '('}),
                ('Issue', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ')'}),
                ('Pages', {'italic': False, 'bold': False, 'parentheses': False, 'separator': '. '}),
                ('DOI', {'italic': False, 'bold': False, 'parentheses': False, 'separator': ''})
            ]
        }
    }
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
if 'current_language' not in st.session_state:
    st.session_state.current_language = 'en'

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è –∏ —Ñ–ª–∞–≥–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
if 'imported_style' not in st.session_state:
    st.session_state.imported_style = None
if 'style_applied' not in st.session_state:
    st.session_state.style_applied = False

# –§–ª–∞–≥ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞
if 'apply_imported_style' not in st.session_state:
    st.session_state.apply_imported_style = False

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
if 'output_text_value' not in st.session_state:
    st.session_state.output_text_value = ""
if 'show_results' not in st.session_state:
    st.session_state.show_results = False
if 'download_data' not in st.session_state:
    st.session_state.download_data = {}

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤ and/&
if 'use_and_checkbox' not in st.session_state:
    st.session_state.use_and_checkbox = False
if 'use_ampersand_checkbox' not in st.session_state:
    st.session_state.use_ampersand_checkbox = False

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è –∂—É—Ä–Ω–∞–ª–∞
if 'journal_style' not in st.session_state:
    st.session_state.journal_style = '{Full Journal Name}'

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –∂—É—Ä–Ω–∞–ª–∞
if 'selected_journal_template' not in st.session_state:
    st.session_state.selected_journal_template = 'custom'

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è HTML —Å—Ç–∏–ª—è
if 'html_style' not in st.session_state:
    st.session_state.html_style = 'simple'

class JournalAbbreviation:
    def __init__(self):
        self.ltwa_data = {}
        self.load_ltwa_data()
        # –°–ø–∏—Å–æ–∫ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –ø–∏—à—É—Ç—Å—è —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
        self.uppercase_abbreviations = {
            'acs', 'ecs', 'rsc', 'ieee', 'iet', 'acm', 'aims', 'bmc', 'bmj', 'npj'
        }
    
    def load_ltwa_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ ltwa.csv"""
        try:
            csv_path = os.path.join(os.path.dirname(__file__), 'ltwa.csv')
            with open(csv_path, 'r', encoding='utf-8') as f:
                reader = csv.reader(f, delimiter='\t')
                next(reader)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                for row in reader:
                    if len(row) >= 2:
                        word = row[0].strip()
                        abbreviation = row[1].strip() if row[1].strip() else None
                        self.ltwa_data[word] = abbreviation
        except FileNotFoundError:
            print("–§–∞–π–ª ltwa.csv –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ltwa.csv: {e}")
    
    def abbreviate_word(self, word: str) -> str:
        """–°–æ–∫—Ä–∞—â–∞–µ—Ç –æ–¥–Ω–æ —Å–ª–æ–≤–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö LTWA"""
        word_lower = word.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if word_lower in self.ltwa_data:
            abbr = self.ltwa_data[word_lower]
            return abbr if abbr else word
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –¥–µ—Ñ–∏—Å–æ–º (–∫–æ—Ä–Ω–µ–≤—ã–µ —Å–ª–æ–≤–∞)
        for ltwa_word, abbr in self.ltwa_data.items():
            if ltwa_word.endswith('-') and word_lower.startswith(ltwa_word[:-1]):
                return abbr if abbr else word
        
        return word
    
    def abbreviate_journal_name(self, journal_name: str, style: str = "{J. Abbr.}") -> str:
        """–°–æ–∫—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º"""
        if not journal_name:
            return ""
        
        # –£–¥–∞–ª—è–µ–º –∞—Ä—Ç–∏–∫–ª–∏, –ø—Ä–µ–¥–ª–æ–≥–∏ –∏ –¥–≤–æ–µ—Ç–æ—á–∏—è
        words_to_remove = {'a', 'an', 'the', 'of', 'in', 'and', '&'}
        words = [word for word in journal_name.split() if word.lower() not in words_to_remove]
        
        # –£–¥–∞–ª—è–µ–º –¥–≤–æ–µ—Ç–æ—á–∏—è –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
        words = [word.replace(':', '') for word in words]
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫–ª–µ–π –∏ –ø—Ä–µ–¥–ª–æ–≥–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ - –Ω–µ —Å–æ–∫—Ä–∞—â–∞–µ–º
        if len(words) <= 1:
            return journal_name
        
        # –°–æ–∫—Ä–∞—â–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ
        abbreviated_words = []
        for i, word in enumerate(words):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã
            original_first_char = word[0]
            abbreviated = self.abbreviate_word(word.lower())
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä
            if abbreviated and original_first_char.isupper():
                abbreviated = abbreviated[0].upper() + abbreviated[1:]
            
            # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–æ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–æ–π, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
            if i == 0 and abbreviated.lower() in self.uppercase_abbreviations:
                abbreviated = abbreviated.upper()
            
            abbreviated_words.append(abbreviated)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∏–ª—è
        if style == "{J. Abbr.}":
            # –ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–æ—á–∫–∞–º–∏
            result = " ".join(abbreviated_words)
        elif style == "{J Abbr}":
            # –ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ –±–µ–∑ —Ç–æ—á–µ–∫
            result = " ".join(abbr.replace('.', '') for abbr in abbreviated_words)
        else:
            # –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            result = journal_name
        
        # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ —Ç–æ—á–∫–∏
        result = re.sub(r'\.\.+', '.', result)
        
        return result

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
journal_abbrev = JournalAbbreviation()

def get_text(key):
    return TRANSLATIONS[st.session_state.current_language].get(key, key)

def get_cache_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
    return len(cache)

def clear_cache():
    """–û—á–∏—â–∞–µ—Ç –∫—ç—à"""
    cache.clear()

def get_cached_metadata(doi):
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏—Ö"""
    cache_key = f"doi_{doi}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cached_data = cache.get(cache_key)
    if cached_data:
        return cached_data
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    metadata = extract_metadata_sync(doi)
    if metadata:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –Ω–∞ 48 —á–∞—Å–æ–≤
        cache.set(cache_key, metadata, expire=48*60*60)
    
    return metadata

def clean_text(text):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç HTML —Ç–µ–≥–æ–≤ –∏ entities"""
    if not text:
        return ""
    
    # –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏, –≤–∫–ª—é—á–∞—è sub –∏ sup
    text = re.sub(r'<[^>]+>', '', text)
    
    # –ó–∞—Ç–µ–º –¥–µ–∫–æ–¥–∏—Ä—É–µ–º HTML entities
    text = html.unescape(text)
    
    # –£–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è XML/HTML entities
    text = re.sub(r'&[^;]+;', '', text)
    
    return text.strip()

def normalize_name(name):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏–º—è –∞–≤—Ç–æ—Ä–∞ —Å —É—á–µ—Ç–æ–º —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —Ñ–∞–º–∏–ª–∏–π"""
    if not name:
        return ''
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —Ñ–∞–º–∏–ª–∏–∏ —Å –¥–µ—Ñ–∏—Å–∞–º–∏, –∞–ø–æ—Å—Ç—Ä–æ—Ñ–∞–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
    if '-' in name or "'" in name or '‚Äô' in name:
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –¥–µ—Ñ–∏—Å–∞–º –∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ–∞–º
        parts = re.split(r'([-\'‚Äô])', name)
        normalized_parts = []
        
        for i, part in enumerate(parts):
            if part in ['-', "'", '‚Äô']:
                normalized_parts.append(part)
            else:
                if part:
                    # –ö–∞–∂–¥—É—é —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –ø–∏—à–µ–º —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
                    normalized_parts.append(part[0].upper() + part[1:].lower() if len(part) > 1 else part.upper())
        
        return ''.join(normalized_parts)
    else:
        # –û–±—ã—á–Ω–æ–µ –∏–º—è
        if len(name) > 1:
            return name[0].upper() + name[1:].lower()
        else:
            return name.upper()

def is_section_header(text):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Ä–∞–∑–¥–µ–ª–∞"""
    text_upper = text.upper().strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    section_patterns = [
        r'^NOTES?\s+AND\s+REFERENCES?$',
        r'^REFERENCES?$',
        r'^BIBLIOGRAPHY$',
        r'^LITERATURE$',
        r'^WORKS?\s+CITED$',
        r'^SOURCES?$',
        r'^CHAPTER\s+\d+$',
        r'^SECTION\s+\d+$',
        r'^PART\s+\d+$'
    ]
    
    for pattern in section_patterns:
        if re.search(pattern, text_upper):
            return True
    
    # –£–±–∏—Ä–∞–µ–º —Å–ª–∏—à–∫–æ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
    # DOI –º–æ–≥—É—Ç –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏, –Ω–æ —ç—Ç–æ –Ω–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    return False

def find_doi(reference):
    """–ù–∞—Ö–æ–¥–∏—Ç DOI –≤ —Å—Ç—Ä–æ–∫–µ —Å—Å—ã–ª–∫–∏"""
    if is_section_header(reference):
        return None
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ DOI
    doi_patterns = [
        r'https?://doi\.org/(10\.\d{4,9}/[-._;()/:A-Za-z0-9]+)',  # https://doi.org/10.xxx/xxx
        r'doi:\s*(10\.\d{4,9}/[-._;()/:A-Za-z0-9]+)',             # doi:10.xxx/xxx
        r'DOI:\s*(10\.\d{4,9}/[-._;()/:A-Za-z0-9]+)',             # DOI:10.xxx/xxx
        r'\b(10\.\d{4,9}/[-._;()/:A-Za-z0-9]+)\b'                 # 10.xxx/xxx (–ø—Ä–æ—Å—Ç–æ DOI)
    ]
    
    for pattern in doi_patterns:
        match = re.search(pattern, reference, re.IGNORECASE)
        if match:
            doi = match.group(1)
            # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—á–Ω—ã–µ —Ç–æ—á–∫–∏ –∏ –∑–∞–ø—è—Ç—ã–µ
            doi = doi.rstrip('.,;:')
            return doi
    
    # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ DOI (–±–µ–∑ –¥—Ä—É–≥–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
    clean_ref = reference.strip()
    if re.match(r'^(doi:|DOI:)?\s*10\.\d{4,9}/[-._;()/:A-Za-z0-9]+\s*$', clean_ref, re.IGNORECASE):
        doi_match = re.search(r'(10\.\d{4,9}/[-._;()/:A-Za-z0-9]+)', clean_ref)
        if doi_match:
            doi = doi_match.group(1).rstrip('.,;:')
            return doi
    
    # –í–ê–ñ–ù–´–ô –ë–õ–û–ö: –ï—Å–ª–∏ DOI –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —è–≤–Ω–æ–º –≤–∏–¥–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º
    clean_ref = re.sub(r'\s*(https?://doi\.org/|doi:|DOI:)\s*[^\s,;]+', '', reference, flags=re.IGNORECASE)
    clean_ref = clean_ref.strip()
    
    if len(clean_ref) < 30:
        return None
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Crossref API –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º
        query = works.query(bibliographic=clean_ref).sort('relevance').order('desc')
        for result in query:
            if 'DOI' in result:
                return result['DOI']
    except Exception as e:
        print(f"Error in bibliographic search for '{clean_ref}': {e}")
        return None
    
    return None

def normalize_doi(doi):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç DOI –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É"""
    if not doi:
        return ""
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    doi = re.sub(r'^(https?://doi\.org/|doi:|DOI:)', '', doi, flags=re.IGNORECASE)
    return doi.lower().strip()

def generate_reference_hash(metadata):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö–µ—à –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å—Å—ã–ª–æ–∫"""
    if not metadata:
        return None
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
    hash_string = ""
    
    # –ê–≤—Ç–æ—Ä—ã (—Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏–∏ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
    if metadata.get('authors'):
        authors_hash = "|".join(sorted([author.get('family', '').lower() for author in metadata['authors']]))
        hash_string += authors_hash + "||"
    
    # –ù–∞–∑–≤–∞–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
    title = metadata.get('title', '')[:50].lower()
    hash_string += title + "||"
    
    # –ñ—É—Ä–Ω–∞–ª –∏ –≥–æ–¥
    hash_string += (metadata.get('journal', '') + "||").lower()
    hash_string += str(metadata.get('year', '')) + "||"
    
    # –¢–æ–º –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    hash_string += metadata.get('volume', '') + "||"
    hash_string += metadata.get('pages', '') + "||"
    
    # DOI (–µ—Å–ª–∏ –µ—Å—Ç—å)
    hash_string += normalize_doi(metadata.get('doi', ''))
    
    # –°–æ–∑–¥–∞–µ–º MD5 —Ö–µ—à
    return hashlib.md5(hash_string.encode('utf-8')).hexdigest()

def extract_metadata_batch(doi_list, progress_callback=None):
    """–ü–∞–∫–µ—Ç–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Crossref API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    if not doi_list:
        return []
    
    results = [None] * len(doi_list)
    
    # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –ø–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å ThreadPoolExecutor
    with concurrent.futures.ThreadPoolExecutor(max_workers=3) as executor:
        future_to_index = {executor.submit(get_cached_metadata, doi): i for i, doi in enumerate(doi_list)}
        
        completed = 0
        for future in concurrent.futures.as_completed(future_to_index):
            index = future_to_index[future]
            try:
                result = future.result()
                results[index] = result
            except Exception as e:
                print(f"Error processing DOI at index {index}: {e}")
                results[index] = None
            
            completed += 1
            if progress_callback:
                progress_callback(completed, len(doi_list))
    
    # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –ø–æ–≤—Ç–æ—Ä –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    failed_indices = [i for i, result in enumerate(results) if result is None]
    if failed_indices:
        print(f"Retrying {len(failed_indices)} failed DOI requests...")
        
        if progress_callback:
            progress_callback(len(doi_list) - len(failed_indices), len(doi_list), retry_mode=True)
        
        # –ë–æ–ª–µ–µ –º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ—Ç–æ–∫–æ–≤
        with concurrent.futures.ThreadPoolExecutor(max_workers=2) as executor:
            retry_futures = {}
            for index in failed_indices:
                doi = doi_list[index]
                future = executor.submit(extract_metadata_sync, doi)
                retry_futures[future] = index
            
            for future in concurrent.futures.as_completed(retry_futures):
                index = retry_futures[future]
                try:
                    result = future.result()
                    results[index] = result
                except Exception as e:
                    print(f"Error in retry processing DOI at index {index}: {e}")
                    results[index] = None
                
                completed = len(doi_list) - len([r for r in results if r is None])
                if progress_callback:
                    progress_callback(completed, len(doi_list), retry_mode=True)
    
    return results

def extract_metadata_sync(doi):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    try:
        result = works.doi(doi)
        if not result:
            return None
        
        authors = result.get('author', [])
        author_list = []
        for author in authors:
            given_name = author.get('given', '')
            family_name = normalize_name(author.get('family', ''))
            author_list.append({
                'given': given_name,
                'family': family_name
            })
        
        title = ''
        if 'title' in result and result['title']:
            title = clean_text(result['title'][0])
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç —Ç–µ–≥–æ–≤ sub, i, SUB
            title = re.sub(r'</?sub>|</?i>|</?SUB>|</?I>', '', title, flags=re.IGNORECASE)
        
        journal = ''
        if 'container-title' in result and result['container-title']:
            journal = clean_text(result['container-title'][0])
        
        year = None
        if 'published' in result and 'date-parts' in result['published']:
            date_parts = result['published']['date-parts']
            if date_parts and date_parts[0]:
                year = date_parts[0][0]
        
        volume = result.get('volume', '')
        issue = result.get('issue', '')
        pages = result.get('page', '')
        article_number = result.get('article-number', '')
        
        metadata = {
            'authors': author_list,
            'title': title,
            'journal': journal,
            'year': year,
            'volume': volume,
            'issue': issue,
            'pages': pages,
            'article_number': article_number,
            'doi': doi,
            'original_doi': doi
        }
        
        return metadata
        
    except Exception as e:
        print(f"Error extracting metadata for DOI {doi}: {e}")
        return None

def format_authors(authors, author_format, separator, et_al_limit, use_and_bool, use_ampersand_bool):
    if not authors:
        return ""
    
    author_str = ""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç –∞–≤—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if use_and_bool or use_ampersand_bool:
        limit = len(authors)
    else:
        limit = et_al_limit if et_al_limit and et_al_limit > 0 else len(authors)
    
    for i, author in enumerate(authors[:limit]):
        given = author['given']
        family = author['family']
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã
        initials = given.split()[:2]
        first_initial = initials[0][0] if initials else ''
        second_initial = initials[1][0].upper() if len(initials) > 1 else ''
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        if author_format == "AA Smith":
            formatted_author = f"{first_initial}{second_initial} {family}"
        elif author_format == "A.A. Smith":
            if second_initial:
                formatted_author = f"{first_initial}.{second_initial}. {family}"
            else:
                formatted_author = f"{first_initial}. {family}"
        elif author_format == "Smith AA":
            formatted_author = f"{family} {first_initial}{second_initial}"
        elif author_format == "Smith A.A":
            if second_initial:
                formatted_author = f"{family} {first_initial}.{second_initial}."
            else:
                formatted_author = f"{family} {first_initial}."
        elif author_format == "Smith, A.A.":
            if second_initial:
                formatted_author = f"{family}, {first_initial}.{second_initial}."
            else:
                formatted_author = f"{family}, {first_initial}."
        else:
            formatted_author = f"{first_initial}. {family}"
        
        author_str += formatted_author
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∞–≤—Ç–æ—Ä–æ–≤
        if i < len(authors[:limit]) - 1:
            if i == len(authors[:limit]) - 2 and (use_and_bool or use_ampersand_bool):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º "and" –∏–ª–∏ "&" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
                if use_and_bool:
                    author_str += " and "
                else:  # use_ampersand_bool
                    author_str += " & "
            else:
                author_str += separator
    
    # –î–æ–±–∞–≤–ª—è–µ–º "et al" –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if et_al_limit and len(authors) > et_al_limit and not (use_and_bool or use_ampersand_bool):
        author_str += " et al"
    
    return author_str.strip()

def format_pages(pages, article_number, page_format, style_type="default"):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∏–ª—è"""
    if pages:
        if style_type == "rsc":
            # –î–ª—è RSC —Å—Ç–∏–ª—è –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if '-' in pages:
                first_page = pages.split('-')[0].strip()
                return first_page
            else:
                return pages.strip()
        elif style_type == "cta":
            # –î–ª—è —Å—Ç–∏–ª—è CTA —Å–æ–∫—Ä–∞—â–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü (6441‚Äì6 –≤–º–µ—Å—Ç–æ 6441‚Äì6446)
            if '-' in pages:
                start, end = pages.split('-')
                start = start.strip()
                end = end.strip()
                
                # –°–æ–∫—Ä–∞—â–∞–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                if len(start) == len(end) and start[:-1] == end[:-1]:
                    return f"{start}‚Äì{end[-1]}"
                elif len(start) > 1 and len(end) > 1 and start[:-2] == end[:-2]:
                    return f"{start}‚Äì{end[-2:]}"
                else:
                    return f"{start}‚Äì{end}"
            else:
                return pages.strip()
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∏–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            if '-' not in pages:
                return pages
            
            start, end = pages.split('-')
            start = start.strip()
            end = end.strip()
            
            if page_format == "122 - 128":
                return f"{start} - {end}"
            elif page_format == "122-128":
                return f"{start}-{end}"
            elif page_format == "122 ‚Äì 128":
                return f"{start} ‚Äì {end}"
            elif page_format == "122‚Äì128":
                return f"{start}‚Äì{end}"
            elif page_format == "122‚Äì8":
                i = 0
                while i < len(start) and i < len(end) and start[i] == end[i]:
                    i += 1
                return f"{start}‚Äì{end[i:]}"
    
    # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏
    return article_number

def add_hyperlink(paragraph, text, url):
    part = paragraph.part
    r_id = part.relate_to(url, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink", is_external=True)
    
    hyperlink = OxmlElement('w:hyperlink')
    hyperlink.set(qn('r:id'), r_id)
    
    new_run = OxmlElement('w:r')
    rPr = OxmlElement('w:rPr')
    
    # –°–∏–Ω–∏–π —Ü–≤–µ—Ç –¥–ª—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏
    color = OxmlElement('w:color')
    color.set(qn('w:val'), '0000FF')
    rPr.append(color)
    
    # –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
    underline = OxmlElement('w:u')
    underline.set(qn('w:val'), 'single')
    rPr.append(underline)
    
    new_run.append(rPr)
    new_text = OxmlElement('w:t')
    new_text.text = text
    new_run.append(new_text)
    
    hyperlink.append(new_run)
    paragraph._p.append(hyperlink)
    
    return hyperlink

def format_reference(metadata, style_config, for_preview=False):
    if not metadata:
        error_message = "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É." if st.session_state.current_language == 'ru' else "Error: Could not format the reference."
        return (error_message, True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Å—Ç–∏–ª—å –ì–û–°–¢
    if style_config.get('gost_style', False):
        return format_gost_reference(metadata, style_config, for_preview)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Å—Ç–∏–ª—å ACS
    if style_config.get('acs_style', False):
        return format_acs_reference(metadata, style_config, for_preview)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Å—Ç–∏–ª—å RSC
    if style_config.get('rsc_style', False):
        return format_rsc_reference(metadata, style_config, for_preview)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Å—Ç–∏–ª—å CTA
    if style_config.get('cta_style', False):
        return format_cta_reference(metadata, style_config, for_preview)
    
    elements = []
    
    for i, (element, config) in enumerate(style_config['elements']):
        value = ""
        doi_value = None
        
        if element == "Authors":
            value = format_authors(
                metadata['authors'],
                style_config['author_format'],
                style_config['author_separator'],
                style_config['et_al_limit'],
                style_config['use_and_bool'],
                style_config['use_ampersand_bool']
            )
        elif element == "Title":
            value = metadata['title']
        elif element == "Journal":
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
            journal_name = metadata['journal']
            journal_style = style_config.get('journal_style', '{Full Journal Name}')
            value = journal_abbrev.abbreviate_journal_name(journal_name, journal_style)
        elif element == "Year":
            value = str(metadata['year']) if metadata['year'] else ""
        elif element == "Volume":
            value = metadata['volume']
        elif element == "Issue":
            value = metadata['issue']
        elif element == "Pages":
            value = format_pages(metadata['pages'], metadata['article_number'], style_config['page_format'])
        elif element == "DOI":
            doi = metadata['doi']
            doi_value = doi
            if style_config['doi_format'] == "10.10/xxx":
                value = doi
            elif style_config['doi_format'] == "doi:10.10/xxx":
                value = f"doi:{doi}"
            elif style_config['doi_format'] == "DOI:10.10/xxx":
                value = f"DOI:{doi}"
            elif style_config['doi_format'] == "https://dx.doi.org/10.10/xxx":
                value = f"https://dx.doi.org/{doi}"
        
        if value:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ–±–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if config['parentheses'] and value:
                value = f"({value})"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            separator = config['separator'] if i < len(style_config['elements']) - 1 else ''
            
            if for_preview:
                # –î–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ç–µ–≥–∏
                formatted_value = value
                if config['italic']:
                    formatted_value = f"<i>{formatted_value}</i>"
                if config['bold']:
                    formatted_value = f"<b>{formatted_value}</b>"
                
                elements.append((formatted_value, False, False, separator, False, None))
            else:
                # –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
                elements.append((value, config['italic'], config['bold'], separator,
                               (element == "DOI" and style_config['doi_hyperlink']), doi_value))
    
    if for_preview:
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        ref_str = ""
        for i, (value, _, _, separator, _, _) in enumerate(elements):
            ref_str += value
            if separator and i < len(elements) - 1:
                ref_str += separator
            elif i == len(elements) - 1 and style_config['final_punctuation']:
                ref_str = ref_str.rstrip(',.') + "."
        
        # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ —Ç–æ—á–∫–∏
        ref_str = re.sub(r'\.\.+', '.', ref_str)
        
        return ref_str, False
    else:
        return elements, False

def format_gost_reference(metadata, style_config, for_preview=False):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É –ì–û–°–¢"""
    if not metadata:
        error_message = "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É." if st.session_state.current_language == 'ru' else "Error: Could not format the reference."
        return (error_message, True)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏
    first_author = ""
    if metadata['authors']:
        author = metadata['authors'][0]
        given = author['given']
        family = author['family']
        initials = given.split()[:2]
        first_initial = initials[0][0] if initials else ''
        second_initial = initials[1][0].upper() if len(initials) > 1 else ''
        
        if second_initial:
            first_author = f"{family}, {first_initial}.{second_initial}."
        else:
            first_author = f"{family}, {first_initial}."
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–æ–≤ –¥–ª—è —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ /
    all_authors = ""
    for i, author in enumerate(metadata['authors']):
        given = author['given']
        family = author['family']
        initials = given.split()[:2]
        first_initial = initials[0][0] if initials else ''
        second_initial = initials[1][0].upper() if len(initials) > 1 else ''
        
        if second_initial:
            author_str = f"{first_initial}.{second_initial}. {family}"
        else:
            author_str = f"{first_initial}. {family}"
        
        all_authors += author_str
        if i < len(metadata['authors']) - 1:
            all_authors += ", "
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–∏—Ä–µ –≤–º–µ—Å—Ç–æ –¥–µ—Ñ–∏—Å–∞
    pages = metadata['pages']
    article_number = metadata['article_number']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∫–∏ –¥–ª—è —Ç–æ–º–æ–≤/—Å—Ç—Ä–∞–Ω–∏—Ü/—Å—Ç–∞—Ç–µ–π
    is_russian = st.session_state.current_language == 'ru'
    volume_label = "–¢." if is_russian else "Vol."
    page_label = "–°." if is_russian else "P."
    article_label = "–ê—Ä—Ç." if is_russian else "Art."
    issue_label = "‚Ññ" if is_russian else "No."
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º DOI
    doi_url = f"https://doi.org/{metadata['doi']}"
    
    # –î–ª—è –ì–û–°–¢ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ (–±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π)
    journal_name = metadata['journal']
    
    # –°—Ç—Ä–æ–∏–º —Å—Å—ã–ª–∫—É –ì–û–°–¢ —Å –Ω–æ–º–µ—Ä–æ–º –≤—ã–ø—É—Å–∫–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if metadata['issue']:
        gost_ref = f"{first_author} {metadata['title']} / {all_authors} // {journal_name}. ‚Äì {metadata['year']}. ‚Äì {volume_label} {metadata['volume']}. ‚Äì {issue_label} {metadata['issue']}."
    else:
        gost_ref = f"{first_author} {metadata['title']} / {all_authors} // {journal_name}. ‚Äì {metadata['year']}. ‚Äì {volume_label} {metadata['volume']}."
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏
    if pages:
        if '-' in pages:
            start_page, end_page = pages.split('-')
            pages = f"{start_page.strip()}‚Äì{end_page.strip()}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Ç–∏—Ä–µ
        else:
            pages = pages.strip()
        gost_ref += f" ‚Äì {page_label} {pages}."
    elif article_number:
        gost_ref += f" ‚Äì {article_label} {article_number}."
    else:
        if is_russian:
            gost_ref += " ‚Äì [–ë–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏]."
        else:
            gost_ref += " ‚Äì [No pagination]."
    
    # –î–æ–±–∞–≤–ª—è–µ–º DOI
    gost_ref += f" ‚Äì {doi_url}"
    
    if for_preview:
        return gost_ref, False
    else:
        # –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å DOI –∫–∞–∫ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π
        elements = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –¥–æ DOI –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        text_before_doi = gost_ref.replace(doi_url, "")
        elements.append((text_before_doi, False, False, "", False, None))
        
        # –î–æ–±–∞–≤–ª—è–µ–º DOI –∫–∞–∫ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É
        elements.append((doi_url, False, False, "", True, metadata['doi']))
        
        return elements, False

def format_acs_reference(metadata, style_config, for_preview=False):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ —Å—Ç–∏–ª–µ ACS (MDPI)"""
    if not metadata:
        error_message = "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É." if st.session_state.current_language == 'ru' else "Error: Could not format the reference."
        return (error_message, True)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–æ–≤ –≤ —Å—Ç–∏–ª–µ ACS: Surname, I.I.; Surname, I.I.; ...
    authors_str = ""
    for i, author in enumerate(metadata['authors']):
        given = author['given']
        family = author['family']
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã
        initials = given.split()[:2]
        first_initial = initials[0][0] if initials else ''
        second_initial = initials[1][0].upper() if len(initials) > 1 else ''
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∞: Surname, I.I.
        if second_initial:
            author_str = f"{family}, {first_initial}.{second_initial}."
        else:
            author_str = f"{family}, {first_initial}."
        
        authors_str += author_str
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        if i < len(metadata['authors']) - 1:
            authors_str += "; "
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    pages = metadata['pages']
    article_number = metadata['article_number']
    
    if pages:
        if '-' in pages:
            start_page, end_page = pages.split('-')
            start_page = start_page.strip()
            end_page = end_page.strip()
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            if len(start_page) == len(end_page) and start_page[:-1] == end_page[:-1]:
                pages_formatted = f"{start_page}‚àí{end_page[-1]}"
            else:
                pages_formatted = f"{start_page}‚àí{end_page}"
        else:
            pages_formatted = pages
    elif article_number:
        pages_formatted = article_number
    else:
        pages_formatted = ""
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ –¥–ª—è —Å—Ç–∏–ª—è ACS
    journal_style = style_config.get('journal_style', '{J. Abbr.}')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å —Ç–æ—á–∫–∞–º–∏ –¥–ª—è ACS
    journal_name = journal_abbrev.abbreviate_journal_name(metadata['journal'], journal_style)
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É ACS
    acs_ref = f"{authors_str} {metadata['title']}. {journal_name} {metadata['year']}, {metadata['volume']}, {pages_formatted}."
    
    # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ —Ç–æ—á–∫–∏
    acs_ref = re.sub(r'\.\.+', '.', acs_ref)
    
    if for_preview:
        return acs_ref, False
    else:
        # –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        elements = []
        
        # –ê–≤—Ç–æ—Ä—ã
        elements.append((authors_str, False, False, " ", False, None))
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ
        elements.append((metadata['title'], False, False, ". ", False, None))
        
        # –ñ—É—Ä–Ω–∞–ª (–∫—É—Ä—Å–∏–≤)
        elements.append((journal_name, True, False, " ", False, None))
        
        # –ì–æ–¥ (–∂–∏—Ä–Ω—ã–π)
        elements.append((str(metadata['year']), False, True, ", ", False, None))
        
        # –¢–æ–º (–∫—É—Ä—Å–∏–≤)
        elements.append((metadata['volume'], True, False, ", ", False, None))
        
        # –°—Ç—Ä–∞–Ω–∏—Ü—ã
        elements.append((pages_formatted, False, False, ".", False, None))
        
        return elements, False

def format_rsc_reference(metadata, style_config, for_preview=False):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ —Å—Ç–∏–ª–µ RSC"""
    if not metadata:
        error_message = "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É." if st.session_state.current_language == 'ru' else "Error: Could not format the reference."
        return (error_message, True)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–æ–≤ –≤ —Å—Ç–∏–ª–µ RSC: I.I. Surname, I.I. Surname, ... and I.I. Surname
    authors_str = ""
    for i, author in enumerate(metadata['authors']):
        given = author['given']
        family = author['family']
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã
        initials = given.split()[:2]
        first_initial = initials[0][0] if initials else ''
        second_initial = initials[1][0].upper() if len(initials) > 1 else ''
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∞: I.I. Surname
        if second_initial:
            author_str = f"{first_initial}.{second_initial}. {family}"
        else:
            author_str = f"{first_initial}. {family}"
        
        authors_str += author_str
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        if i < len(metadata['authors']) - 1:
            if i == len(metadata['authors']) - 2:
                authors_str += " and "
            else:
                authors_str += ", "
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –¥–ª—è RSC –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    pages = metadata['pages']
    article_number = metadata['article_number']
    
    if pages:
        # –î–ª—è RSC —Å—Ç–∏–ª—è –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if '-' in pages:
            first_page = pages.split('-')[0].strip()
            pages_formatted = first_page
        else:
            pages_formatted = pages.strip()
    elif article_number:
        pages_formatted = article_number
    else:
        pages_formatted = ""
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ –¥–ª—è —Å—Ç–∏–ª—è RSC
    journal_style = style_config.get('journal_style', '{J. Abbr.}')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å —Ç–æ—á–∫–∞–º–∏ –¥–ª—è RSC
    journal_name = journal_abbrev.abbreviate_journal_name(metadata['journal'], journal_style)
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É RSC
    rsc_ref = f"{authors_str}, {journal_name}, {metadata['year']}, {metadata['volume']}, {pages_formatted}."
    
    # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ —Ç–æ—á–∫–∏
    rsc_ref = re.sub(r'\.\.+', '.', rsc_ref)
    
    if for_preview:
        return rsc_ref, False
    else:
        # –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        elements = []
        
        # –ê–≤—Ç–æ—Ä—ã
        elements.append((authors_str, False, False, ", ", False, None))
        
        # –ñ—É—Ä–Ω–∞–ª (–∫—É—Ä—Å–∏–≤)
        elements.append((journal_name, True, False, ", ", False, None))
        
        # –ì–æ–¥
        elements.append((str(metadata['year']), False, False, ", ", False, None))
        
        # –¢–æ–º (–∂–∏—Ä–Ω—ã–π)
        elements.append((metadata['volume'], False, True, ", ", False, None))
        
        # –°—Ç—Ä–∞–Ω–∏—Ü—ã (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
        elements.append((pages_formatted, False, False, ".", False, None))
        
        return elements, False

def format_cta_reference(metadata, style_config, for_preview=False):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ —Å—Ç–∏–ª–µ CTA"""
    if not metadata:
        error_message = "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É." if st.session_state.current_language == 'ru' else "Error: Could not format the reference."
        return (error_message, True)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–æ–≤ –≤ —Å—Ç–∏–ª–µ CTA: Surname Initials, Surname Initials, ... Surname Initials
    authors_str = ""
    for i, author in enumerate(metadata['authors']):
        given = author['given']
        family = author['family']
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã
        initials = given.split()[:2]
        first_initial = initials[0][0] if initials else ''
        second_initial = initials[1][0].upper() if len(initials) > 1 else ''
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∞: Surname Initials (–±–µ–∑ —Ç–æ—á–µ–∫)
        if second_initial:
            author_str = f"{family} {first_initial}{second_initial}"
        else:
            author_str = f"{family} {first_initial}"
        
        authors_str += author_str
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        if i < len(metadata['authors']) - 1:
            authors_str += ", "
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å—Ç–∏–ª—è CTA (—Å–æ–∫—Ä–∞—â–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω)
    pages = metadata['pages']
    article_number = metadata['article_number']
    pages_formatted = format_pages(pages, article_number, "", "cta")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ –¥–ª—è —Å—Ç–∏–ª—è CTA (–±–µ–∑ —Ç–æ—á–µ–∫)
    journal_style = style_config.get('journal_style', '{J Abbr}')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ —Ç–æ—á–µ–∫ –¥–ª—è CTA
    journal_name = journal_abbrev.abbreviate_journal_name(metadata['journal'], journal_style)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –≤—ã–ø—É—Å–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    issue_part = f"({metadata['issue']})" if metadata['issue'] else ""
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É CTA
    cta_ref = f"{authors_str}. {metadata['title']}. {journal_name}. {metadata['year']};{metadata['volume']}{issue_part}:{pages_formatted}. doi:{metadata['doi']}"
    
    if for_preview:
        return cta_ref, False
    else:
        # –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        elements = []
        
        # –ê–≤—Ç–æ—Ä—ã
        elements.append((authors_str, False, False, ". ", False, None))
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ
        elements.append((metadata['title'], False, False, ". ", False, None))
        
        # –ñ—É—Ä–Ω–∞–ª (–∫—É—Ä—Å–∏–≤)
        elements.append((journal_name, True, False, ". ", False, None))
        
        # –ì–æ–¥
        elements.append((str(metadata['year']), False, False, ";", False, None))
        
        # –¢–æ–º
        elements.append((metadata['volume'], False, False, "", False, None))
        
        # –ù–æ–º–µ—Ä –≤—ã–ø—É—Å–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if metadata['issue']:
            elements.append((f"({metadata['issue']})", False, False, ":", False, None))
        else:
            elements.append(("", False, False, ":", False, None))
        
        # –°—Ç—Ä–∞–Ω–∏—Ü—ã
        elements.append((pages_formatted, False, False, ". ", False, None))
        
        # DOI - –≤–µ—Å—å —ç–ª–µ–º–µ–Ω—Ç "doi:10.10/xxx" –∫–∞–∫ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞
        doi_text = f"doi:{metadata['doi']}"
        elements.append((doi_text, False, False, "", True, metadata['doi']))
        
        return elements, False

def apply_yellow_background(run):
    shd = OxmlElement('w:shd')
    shd.set(qn('w:fill'), 'FFFF00')
    run._element.get_or_add_rPr().append(shd)

def apply_blue_background(run):
    shd = OxmlElement('w:shd')
    shd.set(qn('w:fill'), 'E6F3FF')  # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ü–≤–µ—Ç
    run._element.get_or_add_rPr().append(shd)

def apply_red_color(run):
    color = OxmlElement('w:color')
    color.set(qn('w:val'), 'FF0000')
    run._element.get_or_add_rPr().append(color)

def find_duplicate_references(formatted_refs):
    """–ù–∞—Ö–æ–¥–∏—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã —Å—Å—ã–ª–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö"""
    seen_hashes = {}
    duplicates_info = {}
    
    for i, (elements, is_error, metadata) in enumerate(formatted_refs):
        if is_error or not metadata:
            continue
            
        ref_hash = generate_reference_hash(metadata)
        if not ref_hash:
            continue
            
        if ref_hash in seen_hashes:
            # –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç
            original_index = seen_hashes[ref_hash]
            duplicates_info[i] = original_index
        else:
            # –ü–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
            seen_hashes[ref_hash] = i
    
    return duplicates_info

def generate_statistics(formatted_refs):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Å—ã–ª–∫–∞–º"""
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    journals = []
    years = []
    authors = []
    
    current_year = datetime.now().year
    
    for _, _, metadata in formatted_refs:
        if not metadata:
            continue
            
        # –ñ—É—Ä–Ω–∞–ª—ã
        if metadata.get('journal'):
            journals.append(metadata['journal'])
        
        # –ì–æ–¥—ã
        if metadata.get('year'):
            years.append(metadata['year'])
        
        # –ê–≤—Ç–æ—Ä—ã
        if metadata.get('authors'):
            for author in metadata['authors']:
                given = author.get('given', '')
                family = author.get('family', '')
                if family:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∞ –∫–∞–∫ "Surname FirstInitial"
                    first_initial = given[0] if given else ''
                    author_formatted = f"{family} {first_initial}." if first_initial else family
                    authors.append(author_formatted)
    
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ DOI (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
    unique_dois = set()
    for _, _, metadata in formatted_refs:
        if metadata and metadata.get('doi'):
            unique_dois.add(metadata['doi'])
    
    total_unique_dois = len(unique_dois)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂—É—Ä–Ω–∞–ª–æ–≤
    journal_counter = Counter(journals)
    journal_stats = []
    for journal, count in journal_counter.most_common(20):
        percentage = (count / total_unique_dois) * 100 if total_unique_dois > 0 else 0
        journal_stats.append({
            'journal': journal,
            'count': count,
            'percentage': round(percentage, 2)
        })
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–¥–æ–≤
    year_counter = Counter(years)
    year_stats = []
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ–¥—ã –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫ 2010
    for year in range(current_year, 2009, -1):
        if year in year_counter:
            count = year_counter[year]
            percentage = (count / total_unique_dois) * 100 if total_unique_dois > 0 else 0
            year_stats.append({
                'year': year,
                'count': count,
                'percentage': round(percentage, 2)
            })
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –≥–æ–¥–∞)
    recent_years = [current_year - i for i in range(4)]
    recent_count = sum(year_counter.get(year, 0) for year in recent_years)
    recent_percentage = (recent_count / total_unique_dois) * 100 if total_unique_dois > 0 else 0
    needs_more_recent_references = recent_percentage < 20
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—Ä–æ–≤
    author_counter = Counter(authors)
    author_stats = []
    for author, count in author_counter.most_common(20):
        percentage = (count / total_unique_dois) * 100 if total_unique_dois > 0 else 0
        author_stats.append({
            'author': author,
            'count': count,
            'percentage': round(percentage, 2)
        })
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –∞–≤—Ç–æ—Ä–æ–≤
    has_frequent_author = any(stats['percentage'] > 30 for stats in author_stats)
    
    return {
        'journal_stats': journal_stats,
        'year_stats': year_stats,
        'author_stats': author_stats,
        'total_unique_dois': total_unique_dois,
        'needs_more_recent_references': needs_more_recent_references,
        'has_frequent_author': has_frequent_author
    }

def generate_html_output(formatted_refs, style_config, html_style='simple'):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –≤—ã–≤–æ–¥ —Å—Å—ã–ª–æ–∫"""
    if html_style == 'simple':
        return generate_simple_html(formatted_refs, style_config)
    elif html_style == 'numbered':
        return generate_numbered_html(formatted_refs, style_config)
    elif html_style == 'with_links':
        return generate_linked_html(formatted_refs, style_config)
    elif html_style == 'bootstrap':
        return generate_bootstrap_html(formatted_refs, style_config)
    else:
        return generate_simple_html(formatted_refs, style_config)

def generate_simple_html(formatted_refs, style_config):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π HTML —Å–ø–∏—Å–æ–∫"""
    html_output = '<div class="references">\n'
    
    for i, (elements, is_error, metadata) in enumerate(formatted_refs):
        if is_error:
            html_output += f'<p class="reference error">{elements}</p>\n'
        else:
            if isinstance(elements, str):
                html_output += f'<p class="reference">{elements}</p>\n'
            else:
                ref_html = ""
                for value, italic, bold, separator, is_hyperlink, doi_value in elements:
                    if is_hyperlink and doi_value:
                        ref_html += f'<a href="https://doi.org/{doi_value}" target="_blank">{value}</a>'
                    else:
                        tags = ""
                        if italic:
                            tags += "<i>"
                        if bold:
                            tags += "<b>"
                        
                        ref_html += tags + html.escape(value)
                        
                        if bold:
                            ref_html += "</b>"
                        if italic:
                            ref_html += "</i>"
                    
                    ref_html += html.escape(separator)
                
                html_output += f'<p class="reference">{ref_html}</p>\n'
    
    html_output += '</div>'
    return html_output

def generate_numbered_html(formatted_refs, style_config):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π HTML —Å–ø–∏—Å–æ–∫"""
    html_output = '<ol class="references">\n'
    
    for i, (elements, is_error, metadata) in enumerate(formatted_refs):
        if is_error:
            html_output += f'<li class="error">{elements}</li>\n'
        else:
            if isinstance(elements, str):
                html_output += f'<li>{elements}</li>\n'
            else:
                ref_html = ""
                for value, italic, bold, separator, is_hyperlink, doi_value in elements:
                    if is_hyperlink and doi_value:
                        ref_html += f'<a href="https://doi.org/{doi_value}" target="_blank">{value}</a>'
                    else:
                        tags = ""
                        if italic:
                            tags += "<i>"
                        if bold:
                            tags += "<b>"
                        
                        ref_html += tags + html.escape(value)
                        
                        if bold:
                            ref_html += "</b>"
                        if italic:
                            ref_html += "</i>"
                    
                    ref_html += html.escape(separator)
                
                html_output += f'<li>{ref_html}</li>\n'
    
    html_output += '</ol>'
    return html_output

def generate_linked_html(formatted_refs, style_config):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML —Å–ø–∏—Å–æ–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏"""
    html_output = '''
    <div class="references">
        <style>
            .reference { margin-bottom: 10px; line-height: 1.4; }
            .reference a { color: #0066cc; text-decoration: none; }
            .reference a:hover { text-decoration: underline; }
            .error { background-color: #fff3cd; padding: 8px; border-left: 4px solid #ffc107; }
        </style>
    '''
    
    for i, (elements, is_error, metadata) in enumerate(formatted_refs):
        if is_error:
            html_output += f'<div class="reference error">{html.escape(str(elements))}</div>\n'
        else:
            if isinstance(elements, str):
                html_output += f'<div class="reference">{html.escape(elements)}</div>\n'
            else:
                ref_html = ""
                for value, italic, bold, separator, is_hyperlink, doi_value in elements:
                    if is_hyperlink and doi_value:
                        ref_html += f'<a href="https://doi.org/{doi_value}" target="_blank" title="Open DOI">{value}</a>'
                    else:
                        tags = ""
                        if italic:
                            tags += "<i>"
                        if bold:
                            tags += "<b>"
                        
                        ref_html += tags + html.escape(value)
                        
                        if bold:
                            ref_html += "</b>"
                        if italic:
                            ref_html += "</i>"
                    
                    ref_html += html.escape(separator)
                
                html_output += f'<div class="reference">{ref_html}</div>\n'
    
    html_output += '</div>'
    return html_output

def generate_bootstrap_html(formatted_refs, style_config):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML —Å Bootstrap —Å—Ç–∏–ª—è–º–∏"""
    html_output = '''
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="references">
                    <style>
                        .reference { 
                            margin-bottom: 15px; 
                            padding: 12px; 
                            border-left: 4px solid #007bff;
                            background-color: #f8f9fa;
                            border-radius: 4px;
                        }
                        .reference:hover {
                            background-color: #e9ecef;
                            transition: background-color 0.3s ease;
                        }
                        .reference a { 
                            color: #007bff; 
                            text-decoration: none; 
                            font-weight: 500;
                        }
                        .reference a:hover { 
                            text-decoration: underline; 
                        }
                        .error { 
                            border-left-color: #dc3545;
                            background-color: #f8d7da;
                        }
                        .reference-number {
                            font-weight: bold;
                            color: #6c757d;
                            margin-right: 8px;
                        }
                    </style>
    '''
    
    for i, (elements, is_error, metadata) in enumerate(formatted_refs):
        numbering = style_config.get('numbering_style', '1.')
        number_text = ""
        
        if numbering != "No numbering":
            if numbering == "1":
                number_text = f"{i + 1} "
            elif numbering == "1.":
                number_text = f"{i + 1}. "
            elif numbering == "1)":
                number_text = f"{i + 1}) "
            elif numbering == "(1)":
                number_text = f"({i + 1}) "
            elif numbering == "[1]":
                number_text = f"[{i + 1}] "
            else:
                number_text = f"{i + 1}. "
        
        if is_error:
            html_output += f'''
            <div class="reference error">
                <span class="reference-number">{number_text}</span>
                {html.escape(str(elements))}
            </div>
            '''
        else:
            if isinstance(elements, str):
                html_output += f'''
                <div class="reference">
                    <span class="reference-number">{number_text}</span>
                    {html.escape(elements)}
                </div>
                '''
            else:
                ref_html = ""
                for value, italic, bold, separator, is_hyperlink, doi_value in elements:
                    if is_hyperlink and doi_value:
                        ref_html += f'<a href="https://doi.org/{doi_value}" target="_blank" class="doi-link">{value}</a>'
                    else:
                        tags = ""
                        if italic:
                            tags += "<i>"
                        if bold:
                            tags += "<b>"
                        
                        ref_html += tags + html.escape(value)
                        
                        if bold:
                            ref_html += "</b>"
                        if italic:
                            ref_html += "</i>"
                    
                    ref_html += html.escape(separator)
                
                html_output += f'''
                <div class="reference">
                    <span class="reference-number">{number_text}</span>
                    {ref_html}
                </div>
                '''
    
    html_output += '''
                </div>
            </div>
        </div>
    </div>
    '''
    return html_output

def apply_journal_template(template_key):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω –∂—É—Ä–Ω–∞–ª–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
    if template_key == 'custom':
        return
    
    template = JOURNAL_TEMPLATES.get(template_key)
    if not template:
        return
    
    config = template['config']
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–∞
    st.session_state.num = config.get('numbering_style', "No numbering")
    st.session_state.auth = config.get('author_format', "AA Smith")
    st.session_state.sep = config.get('author_separator', ", ")
    st.session_state.etal = config.get('et_al_limit', 0) or 0
    st.session_state.use_and_checkbox = config.get('use_and_bool', False)
    st.session_state.use_ampersand_checkbox = config.get('use_ampersand_bool', False)
    st.session_state.doi = config.get('doi_format', "10.10/xxx")
    st.session_state.doilink = config.get('doi_hyperlink', True)
    st.session_state.page = config.get('page_format', "122‚Äì128")
    st.session_state.punct = config.get('final_punctuation', "")
    st.session_state.journal_style = config.get('journal_style', '{Full Journal Name}')
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ —Å—Ç–∏–ª–µ–π
    st.session_state.gost_style = False
    st.session_state.acs_style = False
    st.session_state.rsc_style = False
    st.session_state.cta_style = False
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    elements = config.get('elements', [])
    for i in range(8):
        if i < len(elements):
            element, element_config = elements[i]
            st.session_state[f"el{i}"] = element
            st.session_state[f"it{i}"] = element_config.get('italic', False)
            st.session_state[f"bd{i}"] = element_config.get('bold', False)
            st.session_state[f"pr{i}"] = element_config.get('parentheses', False)
            st.session_state[f"sp{i}"] = element_config.get('separator', ". ")
        else:
            st.session_state[f"el{i}"] = ""
            st.session_state[f"it{i}"] = False
            st.session_state[f"bd{i}"] = False
            st.session_state[f"pr{i}"] = False
            st.session_state[f"sp{i}"] = ". "
    
    st.session_state.style_applied = True

def process_references_with_progress(references, style_config, progress_container, status_container):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    doi_list = []
    formatted_refs = []
    doi_found_count = 0
    doi_not_found_count = 0
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ DOI –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    valid_dois = []
    reference_doi_map = {}  # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å—Å—ã–ª–∫–∏ —Å DOI
    
    for i, ref in enumerate(references):
        if is_section_header(ref):
            doi_list.append(f"{ref} [SECTION HEADER - SKIPPED]")
            formatted_refs.append((ref, False, None))
            continue
            
        doi = find_doi(ref)
        if doi:
            valid_dois.append(doi)
            reference_doi_map[i] = doi
            doi_list.append(doi)
        else:
            doi_list.append(f"{ref}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –¥–æ–±–∞–≤—å—Ç–µ DOI –≤—Ä—É—á–Ω—É—é." if st.session_state.current_language == 'ru' else f"{ref}\nPlease check this source and insert the DOI manually.")
            error_message = f"{ref} [–û–®–ò–ë–ö–ê: DOI –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é.]" if st.session_state.current_language == 'ru' else f"{ref} [ERROR: DOI not found. Please check reference manually.]"
            formatted_refs.append((error_message, True, None))
            doi_not_found_count += 1
    
    # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ DOI
    if valid_dois:
        status_container.info(get_text('batch_processing'))
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        batch_progress_bar = progress_container.progress(0)
        batch_status = status_container.empty()
        
        def update_batch_progress(completed, total, retry_mode=False):
            progress = completed / total
            batch_progress_bar.progress(progress)
            if retry_mode:
                batch_status.text(f"{get_text('retrying_failed')} {completed}/{total}")
            else:
                batch_status.text(f"{get_text('extracting_metadata')} {completed}/{total}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å ThreadPoolExecutor
        metadata_results = extract_metadata_batch(valid_dois, update_batch_progress)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        doi_to_metadata = dict(zip(valid_dois, metadata_results))
        
        for i, ref in enumerate(references):
            if i in reference_doi_map:
                doi = reference_doi_map[i]
                metadata = doi_to_metadata.get(doi)
                
                if metadata:
                    formatted_ref, is_error = format_reference(metadata, style_config)
                    formatted_refs.append((formatted_ref, is_error, metadata))
                    
                    if not is_error:
                        doi_found_count += 1
                    else:
                        error_message = f"{ref} [–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DOI –≤—Ä—É—á–Ω—É—é.]" if st.session_state.current_language == 'ru' else f"{ref} [ERROR: Could not format reference. Please check DOI manually.]"
                        doi_list[doi_list.index(doi)] = f"{doi}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –¥–æ–±–∞–≤—å—Ç–µ DOI –≤—Ä—É—á–Ω—É—é." if st.session_state.current_language == 'ru' else f"{doi}\nPlease check this source and insert the DOI manually."
                        formatted_refs.append((error_message, True, None))
                        doi_not_found_count += 1
                else:
                    error_message = f"{ref} [–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ DOI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DOI –≤—Ä—É—á–Ω—É—é.]" if st.session_state.current_language == 'ru' else f"{ref} [ERROR: Could not get metadata for DOI. Please check DOI manually.]"
                    doi_list[doi_list.index(doi)] = f"{doi}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –¥–æ–±–∞–≤—å—Ç–µ DOI –≤—Ä—É—á–Ω—É—é." if st.session_state.current_language == 'ru' else f"{doi}\nPlease check this source and insert the DOI manually."
                    formatted_refs.append((error_message, True, None))
                    doi_not_found_count += 1
    
    # –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    status_container.info(get_text('checking_duplicates'))
    duplicates_info = find_duplicate_references(formatted_refs)
    
    # –°–æ–∑–¥–∞–µ–º TXT —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º DOI
    output_txt_buffer = io.StringIO()
    for doi in doi_list:
        output_txt_buffer.write(f"{doi}\n")
    output_txt_buffer.seek(0)
    txt_bytes = io.BytesIO(output_txt_buffer.getvalue().encode('utf-8'))
    
    return formatted_refs, txt_bytes, doi_found_count, doi_not_found_count, duplicates_info

def process_docx(input_file, style_config, progress_container, status_container):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç DOCX —Ñ–∞–π–ª —Å —Å—Å—ã–ª–∫–∞–º–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    doc = Document(input_file)
    references = []
    
    for para in doc.paragraphs:
        if para.text.strip():
            references.append(para.text.strip())
    
    st.write(f"**{get_text('found_references').format(len(references))}**")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    formatted_refs, txt_bytes, doi_found_count, doi_not_found_count, duplicates_info = process_references_with_progress(
        references, style_config, progress_container, status_container
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    statistics = generate_statistics(formatted_refs)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π DOCX –¥–æ–∫—É–º–µ–Ω—Ç —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
    output_doc = Document()
    
    # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é 1 –∏ 4
    output_doc.add_paragraph('Citation Style Construction / developed by daM¬©')
    output_doc.add_paragraph('See short stats after the References section')
    output_doc.add_heading('References', level=1)
    
    for i, (elements, is_error, metadata) in enumerate(formatted_refs):
        numbering = style_config['numbering_style']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –Ω—É–º–µ—Ä–∞—Ü–∏–∏
        if numbering == "No numbering":
            prefix = ""
        elif numbering == "1":
            prefix = f"{i + 1} "
        elif numbering == "1.":
            prefix = f"{i + 1}. "
        elif numbering == "1)":
            prefix = f"{i + 1}) "
        elif numbering == "(1)":
            prefix = f"({i + 1}) "
        elif numbering == "[1]":
            prefix = f"[{i + 1}] "
        else:
            prefix = f"{i + 1}. "
        
        para = output_doc.add_paragraph(prefix)
        
        if is_error:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∂–µ–ª—Ç—ã–º —Ñ–æ–Ω–æ–º –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–∏
            run = para.add_run(str(elements))
            apply_yellow_background(run)
        elif i in duplicates_info:
            # –î—É–±–ª–∏–∫–∞—Ç - –≤—ã–¥–µ–ª—è–µ–º —Å–∏–Ω–∏–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É
            original_index = duplicates_info[i] + 1  # +1 –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω—É–º–µ—Ä–∞—Ü–∏—è —Å 1
            duplicate_note = get_text('duplicate_reference').format(original_index)
            
            if isinstance(elements, str):
                run = para.add_run(elements)
                apply_blue_background(run)
                para.add_run(f" - {duplicate_note}").italic = True
            else:
                for j, (value, italic, bold, separator, is_doi_hyperlink, doi_value) in enumerate(elements):
                    if is_doi_hyperlink and doi_value:
                        add_hyperlink(para, value, f"https://doi.org/{doi_value}")
                    else:
                        run = para.add_run(value)
                        if italic:
                            run.font.italic = True
                        if bold:
                            run.font.bold = True
                        apply_blue_background(run)
                    
                    if separator and j < len(elements) - 1:
                        para.add_run(separator)
                
                para.add_run(f" - {duplicate_note}").italic = True
        else:
            # –û–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞
            if metadata is None:
                run = para.add_run(str(elements))
                run.font.italic = True
            else:
                for j, (value, italic, bold, separator, is_doi_hyperlink, doi_value) in enumerate(elements):
                    if is_doi_hyperlink and doi_value:
                        # –î–æ–±–∞–≤–ª—è–µ–º DOI –∫–∞–∫ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É
                        add_hyperlink(para, value, f"https://doi.org/{doi_value}")
                    else:
                        run = para.add_run(value)
                        if italic:
                            run.font.italic = True
                        if bold:
                            run.font.bold = True
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
                    if separator and j < len(elements) - 1:
                        para.add_run(separator)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
                if style_config['final_punctuation'] and not is_error:
                    para.add_run(".")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª Stats —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é 5
    output_doc.add_heading('Stats', level=1)
    
    # –¢–∞–±–ª–∏—Ü–∞ Journal Frequency
    output_doc.add_heading('Journal Frequency', level=2)
    journal_table = output_doc.add_table(rows=1, cols=3)
    journal_table.style = 'Table Grid'
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    hdr_cells = journal_table.rows[0].cells
    hdr_cells[0].text = 'Journal Name'
    hdr_cells[1].text = 'Count'
    hdr_cells[2].text = 'Percentage (%)'
    
    # –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    for journal_stat in statistics['journal_stats']:
        row_cells = journal_table.add_row().cells
        row_cells[0].text = journal_stat['journal']
        row_cells[1].text = str(journal_stat['count'])
        row_cells[2].text = str(journal_stat['percentage'])
    
    # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
    output_doc.add_paragraph()
    
    # –¢–∞–±–ª–∏—Ü–∞ Year Distribution
    output_doc.add_heading('Year Distribution', level=2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é 6
    if statistics['needs_more_recent_references']:
        warning_para = output_doc.add_paragraph()
        warning_run = warning_para.add_run("To improve the relevance and significance of the research, consider including more recent references published within the last 3-4 years")
        apply_red_color(warning_run)
        output_doc.add_paragraph()
    
    year_table = output_doc.add_table(rows=1, cols=3)
    year_table.style = 'Table Grid'
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    hdr_cells = year_table.rows[0].cells
    hdr_cells[0].text = 'Year'
    hdr_cells[1].text = 'Count'
    hdr_cells[2].text = 'Percentage (%)'
    
    # –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    for year_stat in statistics['year_stats']:
        row_cells = year_table.add_row().cells
        row_cells[0].text = str(year_stat['year'])
        row_cells[1].text = str(year_stat['count'])
        row_cells[2].text = str(year_stat['percentage'])
    
    # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
    output_doc.add_paragraph()
    
    # –¢–∞–±–ª–∏—Ü–∞ Author Distribution
    output_doc.add_heading('Author Distribution', level=2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é 7
    if statistics['has_frequent_author']:
        warning_para = output_doc.add_paragraph()
        warning_run = warning_para.add_run("The author(s) are referenced frequently. Either reduce the number of references to the author(s), or expand the reference list to include more sources")
        apply_red_color(warning_run)
        output_doc.add_paragraph()
    
    author_table = output_doc.add_table(rows=1, cols=3)
    author_table.style = 'Table Grid'
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    hdr_cells = author_table.rows[0].cells
    hdr_cells[0].text = 'Author'
    hdr_cells[1].text = 'Count'
    hdr_cells[2].text = 'Percentage (%)'
    
    # –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    for author_stat in statistics['author_stats']:
        row_cells = author_table.add_row().cells
        row_cells[0].text = author_stat['author']
        row_cells[1].text = str(author_stat['count'])
        row_cells[2].text = str(author_stat['percentage'])
    
    output_doc_buffer = io.BytesIO()
    output_doc.save(output_doc_buffer)
    output_doc_buffer.seek(0)
    
    return formatted_refs, txt_bytes, output_doc_buffer, doi_found_count, doi_not_found_count, statistics

def export_style(style_config, file_name):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∏–ª—è –≤ JSON —Ñ–∞–π–ª"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç–∏–ª—è
        export_data = {
            'version': '1.0',
            'export_date': str(datetime.now()),
            'style_config': style_config
        }
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
        json_data = json.dumps(export_data, indent=2, ensure_ascii=False)
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–π—Ç—ã —Ñ–∞–π–ª–∞
        file_bytes = json_data.encode('utf-8')
        
        return file_bytes
    except Exception as e:
        st.error(f"Export error: {str(e)}")
        return None

def import_style(uploaded_file):
    """–ò–º–ø–æ—Ä—Ç —Å—Ç–∏–ª—è –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        content = uploaded_file.read().decode('utf-8')
        
        # –ü–∞—Ä—Å–∏–º JSON
        import_data = json.loads(content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if 'style_config' not in import_data:
            st.error(get_text('import_error'))
            return None
            
        return import_data['style_config']
    except Exception as e:
        st.error(f"{get_text('import_error')}: {str(e)}")
        return None

def apply_imported_style(imported_style):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–∏–ª—è"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º callback –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è session_state
    st.session_state.num = imported_style.get('numbering_style', "No numbering")
    st.session_state.auth = imported_style.get('author_format', "AA Smith")
    st.session_state.sep = imported_style.get('author_separator', ", ")
    st.session_state.etal = imported_style.get('et_al_limit', 0) or 0
    st.session_state.use_and_checkbox = imported_style.get('use_and_bool', False)
    st.session_state.use_ampersand_checkbox = imported_style.get('use_ampersand_bool', False)
    st.session_state.doi = imported_style.get('doi_format', "10.10/xxx")
    st.session_state.doilink = imported_style.get('doi_hyperlink', True)
    st.session_state.page = imported_style.get('page_format', "122‚Äì128")
    st.session_state.punct = imported_style.get('final_punctuation', "")
    st.session_state.gost_style = imported_style.get('gost_style', False)
    st.session_state.acs_style = imported_style.get('acs_style', False)
    st.session_state.rsc_style = imported_style.get('rsc_style', False)
    st.session_state.cta_style = imported_style.get('cta_style', False)
    st.session_state.journal_style = imported_style.get('journal_style', '{Full Journal Name}')
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    elements = imported_style.get('elements', [])
    for i in range(8):
        if i < len(elements):
            element, config = elements[i]
            st.session_state[f"el{i}"] = element
            st.session_state[f"it{i}"] = config.get('italic', False)
            st.session_state[f"bd{i}"] = config.get('bold', False)
            st.session_state[f"pr{i}"] = config.get('parentheses', False)
            st.session_state[f"sp{i}"] = config.get('separator', ". ")
        else:
            st.session_state[f"el{i}"] = ""
            st.session_state[f"it{i}"] = False
            st.session_state[f"bd{i}"] = False
            st.session_state[f"pr{i}"] = False
            st.session_state[f"sp{i}"] = ". "
    
    st.session_state.style_applied = True

def main():
    st.set_page_config(
        layout="wide",
        page_title="Citation Style Constructor",
        initial_sidebar_state="collapsed"
    )
    
    # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π CSS –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    st.markdown("""
        <style>
        .block-container { 
            padding: 0.2rem; 
            max-width: 100% !important;
        }
        @media (max-width: 768px) {
            .block-container {
                padding: 0.1rem;
            }
            .stSelectbox, .stTextInput, .stNumberInput, .stCheckbox, .stRadio, .stFileUploader, .stTextArea {
                margin-bottom: 0.01rem;
                font-size: 14px !important;
            }
            .stTextArea { 
                height: 60px !important; 
                font-size: 14px !important; 
            }
            .stButton > button { 
                width: 100%; 
                padding: 0.1rem; 
                font-size: 14px; 
                margin: 0.01rem; 
            }
            h1 { font-size: 1.2rem; margin-bottom: 0.1rem; }
            h2 { font-size: 1.0rem; margin-bottom: 0.1rem; }
            h3 { font-size: 0.9rem; margin-bottom: 0.05rem; }
            label { font-size: 14px !important; }
            .stMarkdown { font-size: 14px; }
            .stCheckbox > label { font-size: 14px; }
            .stRadio > label { font-size: 14px; }
            .stDownloadButton > button { font-size: 14px; padding: 0.1rem; margin: 0.01rem; }
            .element-row { margin: 0.01rem; padding: 0.01rem; }
            .processing-header { font-size: 0.9rem; font-weight: bold; margin-bottom: 0.1rem; }
            .processing-status { font-size: 0.8rem; margin-bottom: 0.05rem; }
            .compact-row { margin-bottom: 0.1rem; }
            .mobile-col { margin-bottom: 0.5rem; }
        }
        @media (min-width: 769px) {
            .mobile-col { margin-bottom: 0; }
        }
        .stSelectbox, .stTextInput, .stNumberInput, .stCheckbox, .stRadio, .stFileUploader, .stTextArea {
            margin-bottom: 0.02rem;
        }
        .stTextArea { height: 40px !important; font-size: 0.7rem; }
        .stButton > button { width: 100%; padding: 0.05rem; font-size: 0.7rem; margin: 0.02rem; }
        h1 { font-size: 1.0rem; margin-bottom: 0.05rem; }
        h2 { font-size: 0.9rem; margin-bottom: 0.05rem; }
        h3 { font-size: 0.8rem; margin-bottom: 0.02rem; }
        label { font-size: 0.65rem !important; }
        .stMarkdown { font-size: 0.65rem; }
        .stCheckbox > label { font-size: 0.6rem; }
        .stRadio > label { font-size: 0.65rem; }
        .stDownloadButton > button { font-size: 0.7rem; padding: 0.05rem; margin: 0.02rem; }
        .element-row { margin: 0.01rem; padding: 0.01rem; }
        .processing-header { font-size: 0.8rem; font-weight: bold; margin-bottom: 0.1rem; }
        .processing-status { font-size: 0.7rem; margin-bottom: 0.05rem; }
        .compact-row { margin-bottom: 0.1rem; }
        .cache-info {
            background-color: #f0f8ff;
            padding: 8px;
            border-radius: 4px;
            border-left: 4px solid #007bff;
            margin-bottom: 10px;
            font-size: 0.8rem;
        }
        .template-description {
            font-size: 0.7rem;
            color: #666;
            margin-top: -5px;
            margin-bottom: 10px;
        }
        </style>
    """, unsafe_allow_html=True)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if st.session_state.apply_imported_style and st.session_state.imported_style:
        apply_imported_style(st.session_state.imported_style)
        st.session_state.apply_imported_style = False
        st.rerun()

    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞
    language_options = [('English', 'en'), ('–†—É—Å—Å–∫–∏–π', 'ru')]
    selected_language = st.selectbox(
        get_text('language'), 
        language_options, 
        format_func=lambda x: x[0], 
        index=0 if st.session_state.current_language == 'en' else 1,
        key="language_selector"
    )
    st.session_state.current_language = selected_language[1]

    st.title(get_text('header'))

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ
    cache_stats = get_cache_stats()
    st.markdown(f'<div class="cache-info">{get_text("cache_status").format(cache_stats)}</div>', unsafe_allow_html=True)
    
    if st.button(get_text('clear_cache'), key="clear_cache_btn"):
        clear_cache()
        st.success("Cache cleared successfully!")
        st.rerun()

    # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –º–∞–∫–µ—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    col1, col2, col3 = st.columns([1, 1, 1])

    with col1:
        st.subheader(get_text('general_settings'))
        
        # –®–∞–±–ª–æ–Ω—ã –∂—É—Ä–Ω–∞–ª–æ–≤
        st.markdown(f"**{get_text('journal_templates')}**")
        journal_options = [(JOURNAL_TEMPLATES[key]['name'], key) for key in JOURNAL_TEMPLATES.keys()]
        journal_options.sort(key=lambda x: x[0])
        
        selected_journal = st.selectbox(
            get_text('select_journal_template'),
            options=journal_options,
            format_func=lambda x: x[0],
            index=next((i for i, (name, key) in enumerate(journal_options) if key == st.session_state.selected_journal_template), 0),
            key="journal_template_selector"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        template_key = selected_journal[1]
        template_info = JOURNAL_TEMPLATES.get(template_key, {})
        if template_info.get('description'):
            st.markdown(f'<div class="template-description">{template_info["description"]}</div>', unsafe_allow_html=True)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
        if template_key != st.session_state.selected_journal_template:
            st.session_state.selected_journal_template = template_key
            apply_journal_template(template_key)
            st.rerun()
        
        # –°—Ç–∏–ª–∏ –ø—Ä–µ—Å–µ—Ç—ã —Å —Ç—É–ª—Ç–∏–ø–æ–º
        col_preset, col_info = st.columns([3, 1])
        with col_preset:
            st.markdown(f"**{get_text('style_presets')}**")
        with col_info:
            st.markdown(f"<span title='{get_text('style_preset_tooltip')}'>‚ÑπÔ∏è</span>", unsafe_allow_html=True)
        
        # –ö–Ω–æ–ø–∫–∏ —Å—Ç–∏–ª–µ–π –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
        col_gost, col_acs, col_rsc, col_cta = st.columns(4)
        
        with col_gost:
            if st.button(get_text('gost_button'), use_container_width=True, key="gost_button"):
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç–∏–ª—è –ì–û–°–¢
                st.session_state.num = "No numbering"  # –ë–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
                st.session_state.auth = "Smith, A.A."
                st.session_state.sep = ", "
                st.session_state.etal = 0
                st.session_state.use_and_checkbox = False
                st.session_state.use_ampersand_checkbox = False
                st.session_state.doi = "https://dx.doi.org/10.10/xxx"
                st.session_state.doilink = True
                st.session_state.page = "122‚Äì128"
                st.session_state.punct = ""
                st.session_state.journal_style = "{Full Journal Name}"  # –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ì–û–°–¢
                
                # –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                for i in range(8):
                    st.session_state[f"el{i}"] = ""
                    st.session_state[f"it{i}"] = False
                    st.session_state[f"bd{i}"] = False
                    st.session_state[f"pr{i}"] = False
                    st.session_state[f"sp{i}"] = ". "
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Å—Ç–∏–ª—è –ì–û–°–¢
                st.session_state.gost_style = True
                st.session_state.acs_style = False
                st.session_state.rsc_style = False
                st.session_state.cta_style = False
                st.session_state.selected_journal_template = 'custom'
                st.session_state.style_applied = True
                st.rerun()
        
        with col_acs:
            if st.button(get_text('acs_button'), use_container_width=True, key="acs_button"):
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç–∏–ª—è ACS
                st.session_state.num = "No numbering"  # –ë–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
                st.session_state.auth = "Smith, A.A."
                st.session_state.sep = "; "
                st.session_state.etal = 0
                st.session_state.use_and_checkbox = False
                st.session_state.use_ampersand_checkbox = False
                st.session_state.doi = "10.10/xxx"
                st.session_state.doilink = True
                st.session_state.page = "122‚Äì128"
                st.session_state.punct = "."
                st.session_state.journal_style = "{J. Abbr.}"  # –°–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å —Ç–æ—á–∫–∞–º–∏ –¥–ª—è ACS
                
                # –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                for i in range(8):
                    st.session_state[f"el{i}"] = ""
                    st.session_state[f"it{i}"] = False
                    st.session_state[f"bd{i}"] = False
                    st.session_state[f"pr{i}"] = False
                    st.session_state[f"sp{i}"] = ". "
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Å—Ç–∏–ª—è ACS
                st.session_state.gost_style = False
                st.session_state.acs_style = True
                st.session_state.rsc_style = False
                st.session_state.cta_style = False
                st.session_state.selected_journal_template = 'custom'
                st.session_state.style_applied = True
                st.rerun()
        
        with col_rsc:
            if st.button(get_text('rsc_button'), use_container_width=True, key="rsc_button"):
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç–∏–ª—è RSC
                st.session_state.num = "No numbering"  # –ë–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
                st.session_state.auth = "A.A. Smith"
                st.session_state.sep = ", "
                st.session_state.etal = 0
                st.session_state.use_and_checkbox = True
                st.session_state.use_ampersand_checkbox = False
                st.session_state.doi = "10.10/xxx"
                st.session_state.doilink = True
                st.session_state.page = "122"  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                st.session_state.punct = "."
                st.session_state.journal_style = "{J. Abbr.}"  # –°–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å —Ç–æ—á–∫–∞–º–∏ –¥–ª—è RSC
                
                # –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                for i in range(8):
                    st.session_state[f"el{i}"] = ""
                    st.session_state[f"it{i}"] = False
                    st.session_state[f"bd{i}"] = False
                    st.session_state[f"pr{i}"] = False
                    st.session_state[f"sp{i}"] = ". "
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Å—Ç–∏–ª—è RSC
                st.session_state.gost_style = False
                st.session_state.acs_style = False
                st.session_state.rsc_style = True
                st.session_state.cta_style = False
                st.session_state.selected_journal_template = 'custom'
                st.session_state.style_applied = True
                st.rerun()
        
        with col_cta:
            if st.button(get_text('cta_button'), use_container_width=True, key="cta_button"):
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç–∏–ª—è CTA
                st.session_state.num = "No numbering"  # –ë–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
                st.session_state.auth = "Smith AA"
                st.session_state.sep = ", "
                st.session_state.etal = 0
                st.session_state.use_and_checkbox = False
                st.session_state.use_ampersand_checkbox = False
                st.session_state.doi = "doi:10.10/xxx"
                st.session_state.doilink = True
                st.session_state.page = "122‚Äì8"  # –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–∞–Ω–∏—Ü
                st.session_state.punct = ""
                st.session_state.journal_style = "{J Abbr}"  # –°–æ–∫—Ä–∞—â–µ–Ω–∏—è –±–µ–∑ —Ç–æ—á–µ–∫ –¥–ª—è CTA
                
                # –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                for i in range(8):
                    st.session_state[f"el{i}"] = ""
                    st.session_state[f"it{i}"] = False
                    st.session_state[f"bd{i}"] = False
                    st.session_state[f"pr{i}"] = False
                    st.session_state[f"sp{i}"] = ". "
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Å—Ç–∏–ª—è CTA
                st.session_state.gost_style = False
                st.session_state.acs_style = False
                st.session_state.rsc_style = False
                st.session_state.cta_style = True
                st.session_state.selected_journal_template = 'custom'
                st.session_state.style_applied = True
                st.rerun()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_values = {
            'num': "No numbering",
            'auth': "AA Smith", 
            'sep': ", ",
            'etal': 0,
            'use_and_checkbox': False,
            'use_ampersand_checkbox': False,
            'doi': "10.10/xxx",
            'doilink': True,
            'page': "122‚Äì128",
            'punct': "",
            'gost_style': False,
            'acs_style': False,
            'rsc_style': False,
            'cta_style': False,
            'journal_style': '{Full Journal Name}'
        }
        
        for key, default in default_values.items():
            if key not in st.session_state:
                st.session_state[key] = default
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω—É–º–µ—Ä–∞—Ü–∏–∏
        numbering_style = st.selectbox(
            get_text('numbering_style'), 
            ["No numbering", "1", "1.", "1)", "(1)", "[1]"], 
            key="num", 
            index=["No numbering", "1", "1.", "1)", "(1)", "[1]"].index(st.session_state.num)
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–æ–≤ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        col_authors = st.columns([1, 1, 1])
        with col_authors[0]:
            author_format = st.selectbox(
                get_text('author_format'), 
                ["AA Smith", "A.A. Smith", "Smith AA", "Smith A.A", "Smith, A.A."], 
                key="auth", 
                index=["AA Smith", "A.A. Smith", "Smith AA", "Smith A.A", "Smith, A.A."].index(st.session_state.auth)
            )
        with col_authors[1]:
            author_separator = st.selectbox(
                get_text('author_separator'), 
                [", ", "; "], 
                key="sep", 
                index=[", ", "; "].index(st.session_state.sep)
            )
        with col_authors[2]:
            et_al_limit = st.number_input(
                get_text('et_al_limit'), 
                min_value=0, 
                step=1, 
                key="etal", 
                value=st.session_state.etal
            )
        
        # –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –∞–≤—Ç–æ—Ä–æ–≤ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        col_and_amp = st.columns(2)
        with col_and_amp[0]:
            use_and_checkbox = st.checkbox(
                get_text('use_and'), 
                key="use_and_checkbox", 
                value=st.session_state.use_and_checkbox,
                disabled=st.session_state.use_ampersand_checkbox
            )
        with col_and_amp[1]:
            use_ampersand_checkbox = st.checkbox(
                get_text('use_ampersand'), 
                key="use_ampersand_checkbox", 
                value=st.session_state.use_ampersand_checkbox,
                disabled=st.session_state.use_and_checkbox
            )
        
        # –°—Ç–∏–ª—å –∂—É—Ä–Ω–∞–ª–∞
        journal_style = st.selectbox(
            get_text('journal_style'),
            [
                "{Full Journal Name}",
                "{J. Abbr.}", 
                "{J Abbr}"
            ],
            key="journal_style",
            index=[
                "{Full Journal Name}",
                "{J. Abbr.}", 
                "{J Abbr}"
            ].index(st.session_state.journal_style),
            format_func=lambda x: {
                "{Full Journal Name}": get_text('full_journal_name'),
                "{J. Abbr.}": get_text('journal_abbr_with_dots'),
                "{J Abbr}": get_text('journal_abbr_no_dots')
            }[x]
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
        page_options = ["122 - 128", "122-128", "122 ‚Äì 128", "122‚Äì128", "122‚Äì8", "122"]
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è page_format
        current_page = st.session_state.page
        page_index = 3  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "122‚Äì128"
        if current_page in page_options:
            page_index = page_options.index(current_page)
        
        page_format = st.selectbox(
            get_text('page_format'), 
            page_options, 
            key="page", 
            index=page_index
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ DOI –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        col_doi = st.columns([2, 1])
        with col_doi[0]:
            doi_format = st.selectbox(
                get_text('doi_format'), 
                ["10.10/xxx", "doi:10.10/xxx", "DOI:10.10/xxx", "https://dx.doi.org/10.10/xxx"], 
                key="doi", 
                index=["10.10/xxx", "doi:10.10/xxx", "DOI:10.10/xxx", "https://dx.doi.org/10.10/xxx"].index(st.session_state.doi)
            )
        with col_doi[1]:
            doi_hyperlink = st.checkbox(
                get_text('doi_hyperlink'), 
                key="doilink", 
                value=st.session_state.doilink
            )
        
        # –ö–æ–Ω–µ—á–Ω–∞—è –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è
        final_punctuation = st.selectbox(
            get_text('final_punctuation'), 
            ["", "."], 
            key="punct", 
            index=["", "."].index(st.session_state.punct)
        )

    with col2:
        st.subheader(get_text('element_config'))
        available_elements = ["", "Authors", "Title", "Journal", "Year", "Volume", "Issue", "Pages", "DOI"]
        element_configs = []
        used_elements = set()
        
        st.markdown(
            f"<small>{get_text('element')} | {get_text('italic')} | {get_text('bold')} | {get_text('parentheses')} | {get_text('separator')}</small>", 
            unsafe_allow_html=True
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for i in range(8):
            for prop in ['el', 'it', 'bd', 'pr', 'sp']:
                key = f"{prop}{i}"
                if key not in st.session_state:
                    if prop == 'sp':
                        st.session_state[key] = ". "
                    elif prop == 'el':
                        st.session_state[key] = ""
                    else:
                        st.session_state[key] = False
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for i in range(8):
            cols = st.columns([2, 1, 1, 1, 2])
            
            with cols[0]:
                element = st.selectbox(
                    "", 
                    available_elements, 
                    key=f"el{i}", 
                    label_visibility="collapsed",
                    index=available_elements.index(st.session_state[f"el{i}"]) if st.session_state[f"el{i}"] in available_elements else 0
                )
            
            with cols[1]:
                italic = st.checkbox(
                    "", 
                    key=f"it{i}", 
                    help=get_text('italic'), 
                    value=st.session_state[f"it{i}"]
                )
            
            with cols[2]:
                bold = st.checkbox(
                    "", 
                    key=f"bd{i}", 
                    help=get_text('bold'), 
                    value=st.session_state[f"bd{i}"]
                )
            
            with cols[3]:
                parentheses = st.checkbox(
                    "", 
                    key=f"pr{i}", 
                    help=get_text('parentheses'), 
                    value=st.session_state[f"pr{i}"]
                )
            
            with cols[4]:
                separator = st.text_input(
                    "", 
                    value=st.session_state[f"sp{i}"], 
                    key=f"sp{i}", 
                    label_visibility="collapsed"
                )
            
            if element and element not in used_elements:
                element_configs.append((
                    element, 
                    {
                        'italic': italic, 
                        'bold': bold, 
                        'parentheses': parentheses, 
                        'separator': separator
                    }
                ))
                used_elements.add(element)

    with col3:
        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∏–ª—è
        st.subheader(get_text('style_preview'))
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç–∏–ª—è
        style_config = {
            'author_format': st.session_state.auth,
            'author_separator': st.session_state.sep,
            'et_al_limit': st.session_state.etal if st.session_state.etal > 0 else None,
            'use_and_bool': st.session_state.use_and_checkbox,
            'use_ampersand_bool': st.session_state.use_ampersand_checkbox,
            'doi_format': st.session_state.doi,
            'doi_hyperlink': st.session_state.doilink,
            'page_format': st.session_state.page,
            'final_punctuation': st.session_state.punct,
            'numbering_style': st.session_state.num,
            'journal_style': st.session_state.journal_style,
            'elements': element_configs,
            'gost_style': st.session_state.get('gost_style', False),
            'acs_style': st.session_state.get('acs_style', False),
            'rsc_style': st.session_state.get('rsc_style', False),
            'cta_style': st.session_state.get('cta_style', False)
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if st.session_state.get('gost_style', False):
            # –ü—Ä–∏–º–µ—Ä –¥–ª—è —Å—Ç–∏–ª—è –ì–û–°–¢
            preview_metadata = {
                'authors': [
                    {
                        'given': 'John A.', 
                        'family': 'Smith'
                    }, 
                    {
                        'given': 'Alice B.', 
                        'family': 'Doe'
                    }
                ],
                'title': 'Article Title',
                'journal': 'Journal of the American Chemical Society',
                'year': 2020,
                'volume': '15',
                'issue': '3',
                'pages': '122-128',
                'article_number': '',
                'doi': '10.1000/xyz123'
            }
            preview_ref, _ = format_gost_reference(preview_metadata, style_config, for_preview=True)
            
            numbering = style_config['numbering_style']
            if numbering == "No numbering":
                preview_ref_with_numbering = preview_ref
            else:
                if numbering == "1":
                    preview_ref_with_numbering = f"1 {preview_ref}"
                elif numbering == "1.":
                    preview_ref_with_numbering = f"1. {preview_ref}"
                elif numbering == "1)":
                    preview_ref_with_numbering = f"1) {preview_ref}"
                elif numbering == "(1)":
                    preview_ref_with_numbering = f"(1) {preview_ref}"
                elif numbering == "[1]":
                    preview_ref_with_numbering = f"[1] {preview_ref}"
                else:
                    preview_ref_with_numbering = f"1. {preview_ref}"
            
            st.markdown(f"<small>{get_text('example')} {preview_ref_with_numbering}</small>", unsafe_allow_html=True)
        
        elif st.session_state.get('acs_style', False):
            # –ü—Ä–∏–º–µ—Ä –¥–ª—è —Å—Ç–∏–ª—è ACS
            preview_metadata = {
                'authors': [
                    {
                        'given': 'John A.', 
                        'family': 'Smith'
                    }, 
                    {
                        'given': 'Alice B.', 
                        'family': 'Doe'
                    }
                ],
                'title': 'Article Title',
                'journal': 'Journal of the American Chemical Society',
                'year': 2020,
                'volume': '15',
                'issue': '3',
                'pages': '122-128',
                'article_number': '',
                'doi': '10.1000/xyz123'
            }
            preview_ref, _ = format_acs_reference(preview_metadata, style_config, for_preview=True)
            
            numbering = style_config['numbering_style']
            if numbering == "No numbering":
                preview_ref_with_numbering = preview_ref
            else:
                if numbering == "1":
                    preview_ref_with_numbering = f"1 {preview_ref}"
                elif numbering == "1.":
                    preview_ref_with_numbering = f"1. {preview_ref}"
                elif numbering == "1)":
                    preview_ref_with_numbering = f"1) {preview_ref}"
                elif numbering == "(1)":
                    preview_ref_with_numbering = f"(1) {preview_ref}"
                elif numbering == "[1]":
                    preview_ref_with_numbering = f"[1] {preview_ref}"
                else:
                    preview_ref_with_numbering = f"1. {preview_ref}"
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è 3 - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ
            preview_html = preview_ref_with_numbering
            # –î–æ–±–∞–≤–ª—è–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            preview_html = preview_html.replace("J. Am. Chem. Soc.", "<i>J. Am. Chem. Soc.</i>")
            preview_html = preview_html.replace("2020", "<b>2020</b>")
            preview_html = preview_html.replace("15", "<i>15</i>")
            
            st.markdown(f"<small>{get_text('example')} {preview_html}</small>", unsafe_allow_html=True)
        
        elif st.session_state.get('rsc_style', False):
            # –ü—Ä–∏–º–µ—Ä –¥–ª—è —Å—Ç–∏–ª—è RSC
            preview_metadata = {
                'authors': [
                    {
                        'given': 'John A.', 
                        'family': 'Smith'
                    }, 
                    {
                        'given': 'Alice B.', 
                        'family': 'Doe'
                    }
                ],
                'title': 'Article Title',
                'journal': 'Chemical Communications',
                'year': 2020,
                'volume': '15',
                'issue': '3',
                'pages': '122-128',
                'article_number': '',
                'doi': '10.1000/xyz123'
            }
            preview_ref, _ = format_rsc_reference(preview_metadata, style_config, for_preview=True)
            
            numbering = style_config['numbering_style']
            if numbering == "No numbering":
                preview_ref_with_numbering = preview_ref
            else:
                if numbering == "1":
                    preview_ref_with_numbering = f"1 {preview_ref}"
                elif numbering == "1.":
                    preview_ref_with_numbering = f"1. {preview_ref}"
                elif numbering == "1)":
                    preview_ref_with_numbering = f"1) {preview_ref}"
                elif numbering == "(1)":
                    preview_ref_with_numbering = f"(1) {preview_ref}"
                elif numbering == "[1]":
                    preview_ref_with_numbering = f"[1] {preview_ref}"
                else:
                    preview_ref_with_numbering = f"1. {preview_ref}"
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è 3 - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ
            preview_html = preview_ref_with_numbering
            # –î–æ–±–∞–≤–ª—è–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            preview_html = preview_html.replace("Chem. Commun.", "<i>Chem. Commun.</i>")
            preview_html = preview_html.replace("15", "<b>15</b>")
            
            st.markdown(f"<small>{get_text('example')} {preview_html}</small>", unsafe_allow_html=True)
        
        elif st.session_state.get('cta_style', False):
            # –ü—Ä–∏–º–µ—Ä –¥–ª—è —Å—Ç–∏–ª—è CTA
            preview_metadata = {
                'authors': [
                    {
                        'given': 'Fei', 
                        'family': 'He'
                    }, 
                    {
                        'given': 'Feng', 
                        'family': 'Ma'
                    },
                    {
                        'given': 'Juan', 
                        'family': 'Li'
                    },
                    {
                        'given': 'Tao', 
                        'family': 'Li'
                    },
                    {
                        'given': 'Guangshe', 
                        'family': 'Li'
                    }
                ],
                'title': 'Effect of calcination temperature on the structural properties and photocatalytic activities of solvothermal synthesized TiO2 hollow nanoparticles',
                'journal': 'Ceramics International',
                'year': 2014,
                'volume': '40',
                'issue': '5',
                'pages': '6441-6446',
                'article_number': '',
                'doi': '10.1016/j.ceramint.2013.11.094'
            }
            preview_ref, _ = format_cta_reference(preview_metadata, style_config, for_preview=True)
            
            numbering = style_config['numbering_style']
            if numbering == "No numbering":
                preview_ref_with_numbering = preview_ref
            else:
                if numbering == "1":
                    preview_ref_with_numbering = f"1 {preview_ref}"
                elif numbering == "1.":
                    preview_ref_with_numbering = f"1. {preview_ref}"
                elif numbering == "1)":
                    preview_ref_with_numbering = f"1) {preview_ref}"
                elif numbering == "(1)":
                    preview_ref_with_numbering = f"(1) {preview_ref}"
                elif numbering == "[1]":
                    preview_ref_with_numbering = f"[1] {preview_ref}"
                else:
                    preview_ref_with_numbering = f"1. {preview_ref}"
            
            st.markdown(f"<small>{get_text('example')} {preview_ref_with_numbering}</small>", unsafe_allow_html=True)
        
        elif not style_config['elements']:
            st.markdown(
                f"<b style='color:red; font-size: 0.7rem;'>{get_text('error_select_element')}</b>", 
                unsafe_allow_html=True
            )
        else:
            # –ü—Ä–∏–º–µ—Ä –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å—Ç–∏–ª—è
            preview_metadata = {
                'authors': [
                    {
                        'given': 'John A.', 
                        'family': 'Smith'
                    }, 
                    {
                        'given': 'Alice B.', 
                        'family': 'Doe'
                    }
                ],
                'title': 'Article Title',
                'journal': 'Journal of the American Chemical Society',
                'year': 2020,
                'volume': '15',
                'issue': '3',
                'pages': '122-128',
                'article_number': 'e12345',
                'doi': '10.1000/xyz123'
            }
            preview_ref, _ = format_reference(preview_metadata, style_config, for_preview=True)
            
            numbering = style_config['numbering_style']
            if numbering == "No numbering":
                preview_ref_with_numbering = preview_ref
            else:
                if numbering == "1":
                    preview_ref_with_numbering = f"1 {preview_ref}"
                elif numbering == "1.":
                    preview_ref_with_numbering = f"1. {preview_ref}"
                elif numbering == "1)":
                    preview_ref_with_numbering = f"1) {preview_ref}"
                elif numbering == "(1)":
                    preview_ref_with_numbering = f"(1) {preview_ref}"
                elif numbering == "[1]":
                    preview_ref_with_numbering = f"[1] {preview_ref}"
                else:
                    preview_ref_with_numbering = f"1. {preview_ref}"
            
            st.markdown(f"<small>{get_text('example')} {preview_ref_with_numbering}</small>", unsafe_allow_html=True)

        # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        st.subheader(get_text('data_input'))
        input_method = st.radio(
            get_text('input_method'), 
            ['DOCX', 'Text' if st.session_state.current_language == 'en' else '–¢–µ–∫—Å—Ç'], 
            horizontal=True, 
            key="input_method"
        )
        
        if input_method == 'DOCX':
            uploaded_file = st.file_uploader(
                get_text('select_docx'), 
                type=['docx'], 
                label_visibility="collapsed", 
                key="docx_uploader"
            )
        else:
            references_input = st.text_area(
                get_text('references'), 
                placeholder=get_text('enter_references'), 
                height=40, 
                label_visibility="collapsed", 
                key="references_input"
            )

        # –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        st.subheader(get_text('data_output'))
        output_method = st.radio(
            get_text('output_method'), 
            ['DOCX', 'HTML', 'Text' if st.session_state.current_language == 'en' else '–¢–µ–∫—Å—Ç'], 
            horizontal=True, 
            key="output_method"
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ HTML –≤—ã–≤–æ–¥–∞
        if output_method == 'HTML':
            st.markdown(f"**{get_text('html_output_options')}**")
            html_style = st.selectbox(
                get_text('html_style'),
                [
                    ('simple', get_text('html_simple')),
                    ('numbered', get_text('html_numbered')), 
                    ('with_links', get_text('html_with_links')),
                    ('bootstrap', get_text('html_bootstrap'))
                ],
                key="html_style_selector",
                format_func=lambda x: x[1],
                index=0
            )
            st.session_state.html_style = html_style[0]
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥)
        if output_method == 'Text' if st.session_state.current_language == 'en' else '–¢–µ–∫—Å—Ç':
            output_text_value = st.session_state.output_text_value if st.session_state.show_results else ""
            st.text_area(
                get_text('results'), 
                value=output_text_value, 
                height=40, 
                disabled=True, 
                label_visibility="collapsed", 
                key="output_text"
            )

        # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if st.button(get_text('process'), use_container_width=True, key="process_button"):
            if not style_config['elements'] and not style_config.get('gost_style', False) and not style_config.get('acs_style', False) and not style_config.get('rsc_style', False) and not style_config.get('cta_style', False):
                st.error(get_text('error_select_element'))
                return
                
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_container = st.empty()
            status_container = st.empty()
            
            try:
                if input_method == 'DOCX':
                    if not uploaded_file:
                        st.error(get_text('upload_file'))
                        return
                    
                    with st.spinner(get_text('processing')):
                        formatted_refs, txt_bytes, output_doc_buffer, doi_found_count, doi_not_found_count, statistics = process_docx(
                            uploaded_file, style_config, progress_container, status_container
                        )
                else:
                    if not references_input.strip():
                        st.error(get_text('enter_references_error'))
                        return
                    
                    references = [ref.strip() for ref in references_input.split('\n') if ref.strip()]
                    st.write(f"**{get_text('found_references_text').format(len(references))}**")
                    
                    with st.spinner(get_text('processing')):
                        formatted_refs, txt_bytes, doi_found_count, doi_not_found_count, duplicates_info = process_references_with_progress(
                            references, style_config, progress_container, status_container
                        )
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        statistics = generate_statistics(formatted_refs)
                        
                        # –°–æ–∑–¥–∞–µ–º DOCX –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
                        output_doc = Document()
                        
                        # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é 1 –∏ 4
                        output_doc.add_paragraph('Citation Style Construction / developed by daM¬©')
                        output_doc.add_paragraph('See short stats after the References section')
                        output_doc.add_heading('References', level=1)
                        
                        for i, (elements, is_error, metadata) in enumerate(formatted_refs):
                            numbering = style_config['numbering_style']
                            
                            if numbering == "No numbering":
                                prefix = ""
                            elif numbering == "1":
                                prefix = f"{i + 1} "
                            elif numbering == "1.":
                                prefix = f"{i + 1}. "
                            elif numbering == "1)":
                                prefix = f"{i + 1}) "
                            elif numbering == "(1)":
                                prefix = f"({i + 1}) "
                            elif numbering == "[1]":
                                prefix = f"[{i + 1}] "
                            else:
                                prefix = f"{i + 1}. "
                            
                            para = output_doc.add_paragraph(prefix)
                            
                            if is_error:
                                run = para.add_run(str(elements))
                                apply_yellow_background(run)
                            elif i in duplicates_info:
                                # –î—É–±–ª–∏–∫–∞—Ç - –≤—ã–¥–µ–ª—è–µ–º —Å–∏–Ω–∏–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É
                                original_index = duplicates_info[i] + 1
                                duplicate_note = get_text('duplicate_reference').format(original_index)
                                
                                if isinstance(elements, str):
                                    run = para.add_run(elements)
                                    apply_blue_background(run)
                                    para.add_run(f" - {duplicate_note}").italic = True
                                else:
                                    for j, (value, italic, bold, separator, is_doi_hyperlink, doi_value) in enumerate(elements):
                                        if is_doi_hyperlink and doi_value:
                                            add_hyperlink(para, value, f"https://doi.org/{doi_value}")
                                        else:
                                            run = para.add_run(value)
                                            if italic:
                                                run.font.italic = True
                                            if bold:
                                                run.font.bold = True
                                            apply_blue_background(run)
                                        
                                        if separator and j < len(elements) - 1:
                                            para.add_run(separator)
                                    
                                    para.add_run(f" - {duplicate_note}").italic = True
                            else:
                                for j, (value, italic, bold, separator, is_doi_hyperlink, doi_value) in enumerate(elements):
                                    if is_doi_hyperlink and doi_value:
                                        add_hyperlink(para, value, f"https://doi.org/{doi_value}")
                                    else:
                                        run = para.add_run(value)
                                        if italic:
                                            run.font.italic = True
                                        if bold:
                                            run.font.bold = True
                                    
                                    if separator and j < len(elements) - 1:
                                        para.add_run(separator)
                                
                                if style_config['final_punctuation'] and not is_error:
                                    para.add_run(".")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª Stats —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é 5
                        output_doc.add_heading('Stats', level=1)
                        
                        # –¢–∞–±–ª–∏—Ü–∞ Journal Frequency
                        output_doc.add_heading('Journal Frequency', level=2)
                        journal_table = output_doc.add_table(rows=1, cols=3)
                        journal_table.style = 'Table Grid'
                        
                        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                        hdr_cells = journal_table.rows[0].cells
                        hdr_cells[0].text = 'Journal Name'
                        hdr_cells[1].text = 'Count'
                        hdr_cells[2].text = 'Percentage (%)'
                        
                        # –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                        for journal_stat in statistics['journal_stats']:
                            row_cells = journal_table.add_row().cells
                            row_cells[0].text = journal_stat['journal']
                            row_cells[1].text = str(journal_stat['count'])
                            row_cells[2].text = str(journal_stat['percentage'])
                        
                        # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
                        output_doc.add_paragraph()
                        
                        # –¢–∞–±–ª–∏—Ü–∞ Year Distribution
                        output_doc.add_heading('Year Distribution', level=2)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é 6
                        if statistics['needs_more_recent_references']:
                            warning_para = output_doc.add_paragraph()
                            warning_run = warning_para.add_run("To improve the relevance and significance of the research, consider including more recent references published within the last 3-4 years")
                            apply_red_color(warning_run)
                            output_doc.add_paragraph()
                        
                        year_table = output_doc.add_table(rows=1, cols=3)
                        year_table.style = 'Table Grid'
                        
                        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                        hdr_cells = year_table.rows[0].cells
                        hdr_cells[0].text = 'Year'
                        hdr_cells[1].text = 'Count'
                        hdr_cells[2].text = 'Percentage (%)'
                        
                        # –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                        for year_stat in statistics['year_stats']:
                            row_cells = year_table.add_row().cells
                            row_cells[0].text = str(year_stat['year'])
                            row_cells[1].text = str(year_stat['count'])
                            row_cells[2].text = str(year_stat['percentage'])
                        
                        # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
                        output_doc.add_paragraph()
                        
                        # –¢–∞–±–ª–∏—Ü–∞ Author Distribution
                        output_doc.add_heading('Author Distribution', level=2)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é 7
                        if statistics['has_frequent_author']:
                            warning_para = output_doc.add_paragraph()
                            warning_run = warning_para.add_run("The author(s) are referenced frequently. Either reduce the number of references to the author(s), or expand the reference list to include more sources")
                            apply_red_color(warning_run)
                            output_doc.add_paragraph()
                        
                        author_table = output_doc.add_table(rows=1, cols=3)
                        author_table.style = 'Table Grid'
                        
                        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                        hdr_cells = author_table.rows[0].cells
                        hdr_cells[0].text = 'Author'
                        hdr_cells[1].text = 'Count'
                        hdr_cells[2].text = 'Percentage (%)'
                        
                        # –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                        for author_stat in statistics['author_stats']:
                            row_cells = author_table.add_row().cells
                            row_cells[0].text = author_stat['author']
                            row_cells[1].text = str(author_stat['count'])
                            row_cells[2].text = str(author_stat['percentage'])
                        
                        output_doc_buffer = io.BytesIO()
                        output_doc.save(output_doc_buffer)
                        output_doc_buffer.seek(0)

                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                progress_container.empty()
                status_container.empty()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                st.write(f"**{get_text('statistics').format(doi_found_count, doi_not_found_count)}**")
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≤–æ–¥–∞
                if output_method == 'Text' if st.session_state.current_language == 'en' else '–¢–µ–∫—Å—Ç':
                    output_text_value = ""
                    for i, (elements, is_error, metadata) in enumerate(formatted_refs):
                        numbering = style_config['numbering_style']
                        
                        if numbering == "No numbering":
                            prefix = ""
                        elif numbering == "1":
                            prefix = f"{i + 1} "
                        elif numbering == "1.":
                            prefix = f"{i + 1}. "
                        elif numbering == "1)":
                            prefix = f"{i + 1}) "
                        elif numbering == "(1)":
                            prefix = f"({i + 1}) "
                        elif numbering == "[1]":
                            prefix = f"[{i + 1}] "
                        else:
                            prefix = f"{i + 1}. "
                        
                        if is_error:
                            output_text_value += f"{prefix}{elements}\n"
                        else:
                            if isinstance(elements, str):
                                output_text_value += f"{prefix}{elements}\n"
                            else:
                                ref_str = ""
                                for j, element_data in enumerate(elements):
                                    if len(element_data) == 6:
                                        value, _, _, separator, _, _ = element_data
                                        ref_str += value
                                        if separator and j < len(elements) - 1:
                                            ref_str += separator
                                    else:
                                        ref_str += str(element_data)
                                
                                if style_config['final_punctuation'] and not is_error:
                                    ref_str = ref_str.rstrip(',.') + "."
                                
                                output_text_value += f"{prefix}{ref_str}\n"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    st.session_state.output_text_value = output_text_value
                    st.session_state.show_results = True
                else:
                    st.session_state.output_text_value = ""
                    st.session_state.show_results = False

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                html_output = None
                if output_method == 'HTML':
                    html_output = generate_html_output(formatted_refs, style_config, st.session_state.html_style)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                st.session_state.download_data = {
                    'txt_bytes': txt_bytes,
                    'output_doc_buffer': output_doc_buffer if output_method == 'DOCX' else None,
                    'html_output': html_output if output_method == 'HTML' else None
                }
                
            except Exception as e:
                st.error(f"Processing error: {str(e)}")
                return
            
            st.rerun()

        # –ö–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        if st.session_state.download_data:
            col_download = st.columns(3)
            with col_download[0]:
                st.download_button(
                    label=get_text('doi_txt'),
                    data=st.session_state.download_data['txt_bytes'],
                    file_name='doi_list.txt',
                    mime='text/plain',
                    key="doi_download",
                    use_container_width=True
                )
            
            with col_download[1]:
                if output_method == 'DOCX' and st.session_state.download_data.get('output_doc_buffer'):
                    st.download_button(
                        label=get_text('references_docx'),
                        data=st.session_state.download_data['output_doc_buffer'],
                        file_name='Reformatted references.docx',
                        mime='application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                        key="docx_download",
                        use_container_width=True
                    )
                elif output_method == 'HTML' and st.session_state.download_data.get('html_output'):
                    st.download_button(
                        label=get_text('references_html'),
                        data=st.session_state.download_data['html_output'],
                        file_name='references.html',
                        mime='text/html',
                        key="html_download",
                        use_container_width=True
                    )
            
            with col_download[2]:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º HTML –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω HTML –≤—ã–≤–æ–¥
                if output_method == 'HTML' and st.session_state.download_data.get('html_output'):
                    with st.expander("HTML Preview"):
                        st.components.v1.html(st.session_state.download_data['html_output'], height=400, scrolling=True)

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è–º–∏
        st.subheader("üíæ Style Management")
        
        # –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∏–ª—è –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        col_export = st.columns([2, 1])
        with col_export[0]:
            export_file_name = st.text_input(
                get_text('export_file_name'), 
                value="my_citation_style", 
                placeholder="Enter file name", 
                key="export_name"
            )
        
        with col_export[1]:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∏–ª—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            current_style_config = {
                'author_format': st.session_state.auth,
                'author_separator': st.session_state.sep,
                'et_al_limit': st.session_state.etal if st.session_state.etal > 0 else None,
                'use_and_bool': st.session_state.use_and_checkbox,
                'use_ampersand_bool': st.session_state.use_ampersand_checkbox,
                'doi_format': st.session_state.doi,
                'doi_hyperlink': st.session_state.doilink,
                'page_format': st.session_state.page,
                'final_punctuation': st.session_state.punct,
                'numbering_style': st.session_state.num,
                'journal_style': st.session_state.journal_style,
                'elements': element_configs,
                'gost_style': st.session_state.get('gost_style', False),
                'acs_style': st.session_state.get('acs_style', False),
                'rsc_style': st.session_state.get('rsc_style', False),
                'cta_style': st.session_state.get('cta_style', False)
            }
            
            # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_data = export_style(current_style_config, export_file_name)
            if export_data:
                st.download_button(
                    label=get_text('export_style'),
                    data=export_data,
                    file_name=f"{export_file_name}.json",
                    mime="application/json",
                    use_container_width=True,
                    key="export_button"
                )
        
        # –ò–º–ø–æ—Ä—Ç —Å—Ç–∏–ª—è
        imported_file = st.file_uploader(
            get_text('import_file'), 
            type=['json'], 
            label_visibility="collapsed", 
            key="style_importer"
        )
        
        if imported_file is not None and not st.session_state.style_applied:
            imported_style = import_style(imported_file)
            if imported_style:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
                st.session_state.imported_style = imported_style
                st.session_state.apply_imported_style = True
                st.success(get_text('import_success'))
                st.rerun()

if __name__ == "__main__":
    main()


